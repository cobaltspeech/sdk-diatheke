//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: diatheke.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import GRPC
import NIO
import NIOHTTP1
import SwiftProtobuf


/// Usage: instantiate Cobaltspeech_Diatheke_DiathekeClient, then call methods of this protocol to make API calls.
public protocol Cobaltspeech_Diatheke_DiathekeClientProtocol {
  func version(_ request: Cobaltspeech_Diatheke_Empty, callOptions: CallOptions?) -> UnaryCall<Cobaltspeech_Diatheke_Empty, Cobaltspeech_Diatheke_VersionResponse>
  func models(_ request: Cobaltspeech_Diatheke_Empty, callOptions: CallOptions?) -> UnaryCall<Cobaltspeech_Diatheke_Empty, Cobaltspeech_Diatheke_ModelsResponse>
  func newSession(_ request: Cobaltspeech_Diatheke_NewSessionRequest, callOptions: CallOptions?) -> UnaryCall<Cobaltspeech_Diatheke_NewSessionRequest, Cobaltspeech_Diatheke_SessionID>
  func endSession(_ request: Cobaltspeech_Diatheke_SessionID, callOptions: CallOptions?) -> UnaryCall<Cobaltspeech_Diatheke_SessionID, Cobaltspeech_Diatheke_Empty>
  func sessionEventStream(_ request: Cobaltspeech_Diatheke_SessionID, callOptions: CallOptions?, handler: @escaping (Cobaltspeech_Diatheke_DiathekeEvent) -> Void) -> ServerStreamingCall<Cobaltspeech_Diatheke_SessionID, Cobaltspeech_Diatheke_DiathekeEvent>
  func commandFinished(_ request: Cobaltspeech_Diatheke_CommandStatus, callOptions: CallOptions?) -> UnaryCall<Cobaltspeech_Diatheke_CommandStatus, Cobaltspeech_Diatheke_Empty>
  func streamAudioInput(callOptions: CallOptions?) -> ClientStreamingCall<Cobaltspeech_Diatheke_AudioInput, Cobaltspeech_Diatheke_Empty>
  func streamAudioReplies(_ request: Cobaltspeech_Diatheke_SessionID, callOptions: CallOptions?, handler: @escaping (Cobaltspeech_Diatheke_AudioReply) -> Void) -> ServerStreamingCall<Cobaltspeech_Diatheke_SessionID, Cobaltspeech_Diatheke_AudioReply>
  func pushText(_ request: Cobaltspeech_Diatheke_PushTextRequest, callOptions: CallOptions?) -> UnaryCall<Cobaltspeech_Diatheke_PushTextRequest, Cobaltspeech_Diatheke_Empty>
  func streamASR(callOptions: CallOptions?, handler: @escaping (Cobaltspeech_Diatheke_ASRResponse) -> Void) -> BidirectionalStreamingCall<Cobaltspeech_Diatheke_ASRRequest, Cobaltspeech_Diatheke_ASRResponse>
  func streamTTS(_ request: Cobaltspeech_Diatheke_TTSRequest, callOptions: CallOptions?, handler: @escaping (Cobaltspeech_Diatheke_TTSResponse) -> Void) -> ServerStreamingCall<Cobaltspeech_Diatheke_TTSRequest, Cobaltspeech_Diatheke_TTSResponse>
}

public final class Cobaltspeech_Diatheke_DiathekeClient: GRPCClient, Cobaltspeech_Diatheke_DiathekeClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the cobaltspeech.diatheke.Diatheke service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }

  /// Queries the Version of the Server.
  ///
  /// - Parameters:
  ///   - request: Request to send to Version.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func version(_ request: Cobaltspeech_Diatheke_Empty, callOptions: CallOptions? = nil) -> UnaryCall<Cobaltspeech_Diatheke_Empty, Cobaltspeech_Diatheke_VersionResponse> {
    return self.makeUnaryCall(path: "/cobaltspeech.diatheke.Diatheke/Version",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Models will return a list of available versions.  Model values from
  /// this list may be used in NewSession calls.
  ///
  /// - Parameters:
  ///   - request: Request to send to Models.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func models(_ request: Cobaltspeech_Diatheke_Empty, callOptions: CallOptions? = nil) -> UnaryCall<Cobaltspeech_Diatheke_Empty, Cobaltspeech_Diatheke_ModelsResponse> {
    return self.makeUnaryCall(path: "/cobaltspeech.diatheke.Diatheke/Models",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Requests a new session with the given config and returns the session
  /// ID, which is required for other rpc methods.
  ///
  /// - Parameters:
  ///   - request: Request to send to NewSession.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func newSession(_ request: Cobaltspeech_Diatheke_NewSessionRequest, callOptions: CallOptions? = nil) -> UnaryCall<Cobaltspeech_Diatheke_NewSessionRequest, Cobaltspeech_Diatheke_SessionID> {
    return self.makeUnaryCall(path: "/cobaltspeech.diatheke.Diatheke/NewSession",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Terminates an existing session and closes any open event streams.
  /// It is an error if the SessionEndRequest has an invalid SessionID.
  ///
  /// - Parameters:
  ///   - request: Request to send to EndSession.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func endSession(_ request: Cobaltspeech_Diatheke_SessionID, callOptions: CallOptions? = nil) -> UnaryCall<Cobaltspeech_Diatheke_SessionID, Cobaltspeech_Diatheke_Empty> {
    return self.makeUnaryCall(path: "/cobaltspeech.diatheke.Diatheke/EndSession",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Requests a new event stream for the given session.
  ///
  /// - Parameters:
  ///   - request: Request to send to SessionEventStream.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func sessionEventStream(_ request: Cobaltspeech_Diatheke_SessionID, callOptions: CallOptions? = nil, handler: @escaping (Cobaltspeech_Diatheke_DiathekeEvent) -> Void) -> ServerStreamingCall<Cobaltspeech_Diatheke_SessionID, Cobaltspeech_Diatheke_DiathekeEvent> {
    return self.makeServerStreamingCall(path: "/cobaltspeech.diatheke.Diatheke/SessionEventStream",
                                        request: request,
                                        callOptions: callOptions ?? self.defaultCallOptions,
                                        handler: handler)
  }

  /// Notify Diatheke when a command has completed so that it may update
  /// the dialog state. The initial command request will come as part of
  /// a DiathekeEvent. While not strictly required (depeding on the model
  /// and command), it is best practice to always call this method when a
  /// command is complete. Cases where it is required include when the 
  /// command has output parameters, or when the command is followed by 
  /// another action in the Diatheke model.
  ///
  /// - Parameters:
  ///   - request: Request to send to CommandFinished.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func commandFinished(_ request: Cobaltspeech_Diatheke_CommandStatus, callOptions: CallOptions? = nil) -> UnaryCall<Cobaltspeech_Diatheke_CommandStatus, Cobaltspeech_Diatheke_Empty> {
    return self.makeUnaryCall(path: "/cobaltspeech.diatheke.Diatheke/CommandFinished",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Begin an audio input stream for a session. The first message to
  /// the server should specify the sessionID, with binary audio data pushed
  /// for every subsequent message. As the audio is recognized, Diatheke
  /// will respond with appropriate events on the session's event stream.
  /// <p>
  /// While it is allowed to call this multiple times during a single session,
  /// clients should never have multiple audio input streams running concurrently
  /// for the same session (the audio may mix and result in unpredictable
  /// behavior). Previous audio streams should always be closed before starting
  /// a new one.
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata, status and response.
  public func streamAudioInput(callOptions: CallOptions? = nil) -> ClientStreamingCall<Cobaltspeech_Diatheke_AudioInput, Cobaltspeech_Diatheke_Empty> {
    return self.makeClientStreamingCall(path: "/cobaltspeech.diatheke.Diatheke/StreamAudioInput",
                                        callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Create an audio reply stream for a session. The returned stream 
  /// will receive replies ("say" entries in the Diatheke model) from the
  /// server as they occur in the conversation. For each "say" entry, the 
  /// stream will first receive the text to synthesize (defined by the model),
  /// followed by one or more messages containing the synthesized audio bytes. 
  /// The "say" entry will end with a message indicating that TTS for that 
  /// entry is complete.
  /// NOTE: The text in the first message of an audio reply is the same that
  ///       will be received in the session's event stream.
  ///
  /// - Parameters:
  ///   - request: Request to send to StreamAudioReplies.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func streamAudioReplies(_ request: Cobaltspeech_Diatheke_SessionID, callOptions: CallOptions? = nil, handler: @escaping (Cobaltspeech_Diatheke_AudioReply) -> Void) -> ServerStreamingCall<Cobaltspeech_Diatheke_SessionID, Cobaltspeech_Diatheke_AudioReply> {
    return self.makeServerStreamingCall(path: "/cobaltspeech.diatheke.Diatheke/StreamAudioReplies",
                                        request: request,
                                        callOptions: callOptions ?? self.defaultCallOptions,
                                        handler: handler)
  }

  /// Push text to Diatheke as part of the conversation for a session.
  /// Diatheke will respond with an appropriate event on the session's
  /// event stream based on whether the given text was recognized as a
  /// valid intent or not.
  ///
  /// - Parameters:
  ///   - request: Request to send to PushText.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func pushText(_ request: Cobaltspeech_Diatheke_PushTextRequest, callOptions: CallOptions? = nil) -> UnaryCall<Cobaltspeech_Diatheke_PushTextRequest, Cobaltspeech_Diatheke_Empty> {
    return self.makeUnaryCall(path: "/cobaltspeech.diatheke.Diatheke/PushText",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Manually run streaming ASR unrelated to any session by pushing
  /// audio data to the server on the audio stream. As transcriptions
  /// become available, the server will return them on the ASRResponse
  /// stream. The transcriptions may then be used for, e.g., the PushText
  /// method. This function is provided as a convenience.
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  public func streamASR(callOptions: CallOptions? = nil, handler: @escaping (Cobaltspeech_Diatheke_ASRResponse) -> Void) -> BidirectionalStreamingCall<Cobaltspeech_Diatheke_ASRRequest, Cobaltspeech_Diatheke_ASRResponse> {
    return self.makeBidirectionalStreamingCall(path: "/cobaltspeech.diatheke.Diatheke/StreamASR",
                                               callOptions: callOptions ?? self.defaultCallOptions,
                                               handler: handler)
  }

  /// Manually run streaming TTS. The Audio stream will receive
  /// binary audio data as it is synthesized and will close automatically
  /// when synthesis is complete. This function is provided as a
  /// convenience.
  ///
  /// - Parameters:
  ///   - request: Request to send to StreamTTS.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func streamTTS(_ request: Cobaltspeech_Diatheke_TTSRequest, callOptions: CallOptions? = nil, handler: @escaping (Cobaltspeech_Diatheke_TTSResponse) -> Void) -> ServerStreamingCall<Cobaltspeech_Diatheke_TTSRequest, Cobaltspeech_Diatheke_TTSResponse> {
    return self.makeServerStreamingCall(path: "/cobaltspeech.diatheke.Diatheke/StreamTTS",
                                        request: request,
                                        callOptions: callOptions ?? self.defaultCallOptions,
                                        handler: handler)
  }

}


// Provides conformance to `GRPCPayload` for request and response messages
extension Cobaltspeech_Diatheke_Empty: GRPCProtobufPayload {}
extension Cobaltspeech_Diatheke_VersionResponse: GRPCProtobufPayload {}
extension Cobaltspeech_Diatheke_ModelsResponse: GRPCProtobufPayload {}
extension Cobaltspeech_Diatheke_NewSessionRequest: GRPCProtobufPayload {}
extension Cobaltspeech_Diatheke_SessionID: GRPCProtobufPayload {}
extension Cobaltspeech_Diatheke_DiathekeEvent: GRPCProtobufPayload {}
extension Cobaltspeech_Diatheke_CommandStatus: GRPCProtobufPayload {}
extension Cobaltspeech_Diatheke_AudioInput: GRPCProtobufPayload {}
extension Cobaltspeech_Diatheke_AudioReply: GRPCProtobufPayload {}
extension Cobaltspeech_Diatheke_PushTextRequest: GRPCProtobufPayload {}
extension Cobaltspeech_Diatheke_ASRRequest: GRPCProtobufPayload {}
extension Cobaltspeech_Diatheke_ASRResponse: GRPCProtobufPayload {}
extension Cobaltspeech_Diatheke_TTSRequest: GRPCProtobufPayload {}
extension Cobaltspeech_Diatheke_TTSResponse: GRPCProtobufPayload {}

