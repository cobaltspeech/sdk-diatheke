// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: diatheke.proto

package cobaltspeech.diatheke;

public final class DiathekeOuterClass {
  private DiathekeOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  public interface VersionResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:cobaltspeech.diatheke.VersionResponse)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * Server that manages all of the the other components.
     * </pre>
     *
     * <code>optional string server = 1;</code>
     */
    java.lang.String getServer();
    /**
     * <pre>
     * Server that manages all of the the other components.
     * </pre>
     *
     * <code>optional string server = 1;</code>
     */
    com.google.protobuf.ByteString
        getServerBytes();
  }
  /**
   * <pre>
   * The message sent by the server for the `Version` method.
   * </pre>
   *
   * Protobuf type {@code cobaltspeech.diatheke.VersionResponse}
   */
  public  static final class VersionResponse extends
      com.google.protobuf.GeneratedMessageLite<
          VersionResponse, VersionResponse.Builder> implements
      // @@protoc_insertion_point(message_implements:cobaltspeech.diatheke.VersionResponse)
      VersionResponseOrBuilder {
    private VersionResponse() {
      server_ = "";
    }
    public static final int SERVER_FIELD_NUMBER = 1;
    private java.lang.String server_;
    /**
     * <pre>
     * Server that manages all of the the other components.
     * </pre>
     *
     * <code>optional string server = 1;</code>
     */
    public java.lang.String getServer() {
      return server_;
    }
    /**
     * <pre>
     * Server that manages all of the the other components.
     * </pre>
     *
     * <code>optional string server = 1;</code>
     */
    public com.google.protobuf.ByteString
        getServerBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(server_);
    }
    /**
     * <pre>
     * Server that manages all of the the other components.
     * </pre>
     *
     * <code>optional string server = 1;</code>
     */
    private void setServer(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      server_ = value;
    }
    /**
     * <pre>
     * Server that manages all of the the other components.
     * </pre>
     *
     * <code>optional string server = 1;</code>
     */
    private void clearServer() {
      
      server_ = getDefaultInstance().getServer();
    }
    /**
     * <pre>
     * Server that manages all of the the other components.
     * </pre>
     *
     * <code>optional string server = 1;</code>
     */
    private void setServerBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      server_ = value.toStringUtf8();
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!server_.isEmpty()) {
        output.writeString(1, getServer());
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (!server_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getServer());
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static cobaltspeech.diatheke.DiathekeOuterClass.VersionResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.VersionResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.VersionResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.VersionResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.VersionResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.VersionResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.VersionResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.VersionResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.VersionResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.VersionResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(cobaltspeech.diatheke.DiathekeOuterClass.VersionResponse prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * The message sent by the server for the `Version` method.
     * </pre>
     *
     * Protobuf type {@code cobaltspeech.diatheke.VersionResponse}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          cobaltspeech.diatheke.DiathekeOuterClass.VersionResponse, Builder> implements
        // @@protoc_insertion_point(builder_implements:cobaltspeech.diatheke.VersionResponse)
        cobaltspeech.diatheke.DiathekeOuterClass.VersionResponseOrBuilder {
      // Construct using cobaltspeech.diatheke.DiathekeOuterClass.VersionResponse.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * Server that manages all of the the other components.
       * </pre>
       *
       * <code>optional string server = 1;</code>
       */
      public java.lang.String getServer() {
        return instance.getServer();
      }
      /**
       * <pre>
       * Server that manages all of the the other components.
       * </pre>
       *
       * <code>optional string server = 1;</code>
       */
      public com.google.protobuf.ByteString
          getServerBytes() {
        return instance.getServerBytes();
      }
      /**
       * <pre>
       * Server that manages all of the the other components.
       * </pre>
       *
       * <code>optional string server = 1;</code>
       */
      public Builder setServer(
          java.lang.String value) {
        copyOnWrite();
        instance.setServer(value);
        return this;
      }
      /**
       * <pre>
       * Server that manages all of the the other components.
       * </pre>
       *
       * <code>optional string server = 1;</code>
       */
      public Builder clearServer() {
        copyOnWrite();
        instance.clearServer();
        return this;
      }
      /**
       * <pre>
       * Server that manages all of the the other components.
       * </pre>
       *
       * <code>optional string server = 1;</code>
       */
      public Builder setServerBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setServerBytes(value);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:cobaltspeech.diatheke.VersionResponse)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new cobaltspeech.diatheke.DiathekeOuterClass.VersionResponse();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          cobaltspeech.diatheke.DiathekeOuterClass.VersionResponse other = (cobaltspeech.diatheke.DiathekeOuterClass.VersionResponse) arg1;
          server_ = visitor.visitString(!server_.isEmpty(), server_,
              !other.server_.isEmpty(), other.server_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  String s = input.readStringRequireUtf8();

                  server_ = s;
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (cobaltspeech.diatheke.DiathekeOuterClass.VersionResponse.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:cobaltspeech.diatheke.VersionResponse)
    private static final cobaltspeech.diatheke.DiathekeOuterClass.VersionResponse DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new VersionResponse();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static cobaltspeech.diatheke.DiathekeOuterClass.VersionResponse getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<VersionResponse> PARSER;

    public static com.google.protobuf.Parser<VersionResponse> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ModelsResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:cobaltspeech.diatheke.ModelsResponse)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * Array of models available for use.
     * </pre>
     *
     * <code>repeated string models = 1;</code>
     */
    java.util.List<String>
        getModelsList();
    /**
     * <pre>
     * Array of models available for use.
     * </pre>
     *
     * <code>repeated string models = 1;</code>
     */
    int getModelsCount();
    /**
     * <pre>
     * Array of models available for use.
     * </pre>
     *
     * <code>repeated string models = 1;</code>
     */
    java.lang.String getModels(int index);
    /**
     * <pre>
     * Array of models available for use.
     * </pre>
     *
     * <code>repeated string models = 1;</code>
     */
    com.google.protobuf.ByteString
        getModelsBytes(int index);
  }
  /**
   * <pre>
   * The message sent by the server in response to a Models request.
   * Returns an array of model names.
   * </pre>
   *
   * Protobuf type {@code cobaltspeech.diatheke.ModelsResponse}
   */
  public  static final class ModelsResponse extends
      com.google.protobuf.GeneratedMessageLite<
          ModelsResponse, ModelsResponse.Builder> implements
      // @@protoc_insertion_point(message_implements:cobaltspeech.diatheke.ModelsResponse)
      ModelsResponseOrBuilder {
    private ModelsResponse() {
      models_ = com.google.protobuf.GeneratedMessageLite.emptyProtobufList();
    }
    public static final int MODELS_FIELD_NUMBER = 1;
    private com.google.protobuf.Internal.ProtobufList<String> models_;
    /**
     * <pre>
     * Array of models available for use.
     * </pre>
     *
     * <code>repeated string models = 1;</code>
     */
    public java.util.List<String> getModelsList() {
      return models_;
    }
    /**
     * <pre>
     * Array of models available for use.
     * </pre>
     *
     * <code>repeated string models = 1;</code>
     */
    public int getModelsCount() {
      return models_.size();
    }
    /**
     * <pre>
     * Array of models available for use.
     * </pre>
     *
     * <code>repeated string models = 1;</code>
     */
    public java.lang.String getModels(int index) {
      return models_.get(index);
    }
    /**
     * <pre>
     * Array of models available for use.
     * </pre>
     *
     * <code>repeated string models = 1;</code>
     */
    public com.google.protobuf.ByteString
        getModelsBytes(int index) {
      return com.google.protobuf.ByteString.copyFromUtf8(
          models_.get(index));
    }
    private void ensureModelsIsMutable() {
      if (!models_.isModifiable()) {
        models_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(models_);
       }
    }
    /**
     * <pre>
     * Array of models available for use.
     * </pre>
     *
     * <code>repeated string models = 1;</code>
     */
    private void setModels(
        int index, java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureModelsIsMutable();
      models_.set(index, value);
    }
    /**
     * <pre>
     * Array of models available for use.
     * </pre>
     *
     * <code>repeated string models = 1;</code>
     */
    private void addModels(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureModelsIsMutable();
      models_.add(value);
    }
    /**
     * <pre>
     * Array of models available for use.
     * </pre>
     *
     * <code>repeated string models = 1;</code>
     */
    private void addAllModels(
        java.lang.Iterable<java.lang.String> values) {
      ensureModelsIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, models_);
    }
    /**
     * <pre>
     * Array of models available for use.
     * </pre>
     *
     * <code>repeated string models = 1;</code>
     */
    private void clearModels() {
      models_ = com.google.protobuf.GeneratedMessageLite.emptyProtobufList();
    }
    /**
     * <pre>
     * Array of models available for use.
     * </pre>
     *
     * <code>repeated string models = 1;</code>
     */
    private void addModelsBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      ensureModelsIsMutable();
      models_.add(value.toStringUtf8());
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < models_.size(); i++) {
        output.writeString(1, models_.get(i));
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < models_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeStringSizeNoTag(models_.get(i));
        }
        size += dataSize;
        size += 1 * getModelsList().size();
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static cobaltspeech.diatheke.DiathekeOuterClass.ModelsResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.ModelsResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.ModelsResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.ModelsResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.ModelsResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.ModelsResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.ModelsResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.ModelsResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.ModelsResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.ModelsResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(cobaltspeech.diatheke.DiathekeOuterClass.ModelsResponse prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * The message sent by the server in response to a Models request.
     * Returns an array of model names.
     * </pre>
     *
     * Protobuf type {@code cobaltspeech.diatheke.ModelsResponse}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          cobaltspeech.diatheke.DiathekeOuterClass.ModelsResponse, Builder> implements
        // @@protoc_insertion_point(builder_implements:cobaltspeech.diatheke.ModelsResponse)
        cobaltspeech.diatheke.DiathekeOuterClass.ModelsResponseOrBuilder {
      // Construct using cobaltspeech.diatheke.DiathekeOuterClass.ModelsResponse.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * Array of models available for use.
       * </pre>
       *
       * <code>repeated string models = 1;</code>
       */
      public java.util.List<String>
          getModelsList() {
        return java.util.Collections.unmodifiableList(
            instance.getModelsList());
      }
      /**
       * <pre>
       * Array of models available for use.
       * </pre>
       *
       * <code>repeated string models = 1;</code>
       */
      public int getModelsCount() {
        return instance.getModelsCount();
      }
      /**
       * <pre>
       * Array of models available for use.
       * </pre>
       *
       * <code>repeated string models = 1;</code>
       */
      public java.lang.String getModels(int index) {
        return instance.getModels(index);
      }
      /**
       * <pre>
       * Array of models available for use.
       * </pre>
       *
       * <code>repeated string models = 1;</code>
       */
      public com.google.protobuf.ByteString
          getModelsBytes(int index) {
        return instance.getModelsBytes(index);
      }
      /**
       * <pre>
       * Array of models available for use.
       * </pre>
       *
       * <code>repeated string models = 1;</code>
       */
      public Builder setModels(
          int index, java.lang.String value) {
        copyOnWrite();
        instance.setModels(index, value);
        return this;
      }
      /**
       * <pre>
       * Array of models available for use.
       * </pre>
       *
       * <code>repeated string models = 1;</code>
       */
      public Builder addModels(
          java.lang.String value) {
        copyOnWrite();
        instance.addModels(value);
        return this;
      }
      /**
       * <pre>
       * Array of models available for use.
       * </pre>
       *
       * <code>repeated string models = 1;</code>
       */
      public Builder addAllModels(
          java.lang.Iterable<java.lang.String> values) {
        copyOnWrite();
        instance.addAllModels(values);
        return this;
      }
      /**
       * <pre>
       * Array of models available for use.
       * </pre>
       *
       * <code>repeated string models = 1;</code>
       */
      public Builder clearModels() {
        copyOnWrite();
        instance.clearModels();
        return this;
      }
      /**
       * <pre>
       * Array of models available for use.
       * </pre>
       *
       * <code>repeated string models = 1;</code>
       */
      public Builder addModelsBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.addModelsBytes(value);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:cobaltspeech.diatheke.ModelsResponse)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new cobaltspeech.diatheke.DiathekeOuterClass.ModelsResponse();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          models_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          cobaltspeech.diatheke.DiathekeOuterClass.ModelsResponse other = (cobaltspeech.diatheke.DiathekeOuterClass.ModelsResponse) arg1;
          models_= visitor.visitList(models_, other.models_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  String s = input.readStringRequireUtf8();
                  if (!models_.isModifiable()) {
                    models_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(models_);
                  }
                  models_.add(s);
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (cobaltspeech.diatheke.DiathekeOuterClass.ModelsResponse.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:cobaltspeech.diatheke.ModelsResponse)
    private static final cobaltspeech.diatheke.DiathekeOuterClass.ModelsResponse DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ModelsResponse();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static cobaltspeech.diatheke.DiathekeOuterClass.ModelsResponse getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<ModelsResponse> PARSER;

    public static com.google.protobuf.Parser<ModelsResponse> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface NewSessionRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:cobaltspeech.diatheke.NewSessionRequest)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * For applications that have more than one model to use for ASR/NLU.
     * ASR grammar can vary between models, as well as sets of commands.
     * Some applications will only have one model.
     * </pre>
     *
     * <code>optional string model = 1;</code>
     */
    java.lang.String getModel();
    /**
     * <pre>
     * For applications that have more than one model to use for ASR/NLU.
     * ASR grammar can vary between models, as well as sets of commands.
     * Some applications will only have one model.
     * </pre>
     *
     * <code>optional string model = 1;</code>
     */
    com.google.protobuf.ByteString
        getModelBytes();
  }
  /**
   * <pre>
   * Request for the NewSession call.
   * TODO: Consider combining the language and model into one string, such as `en_US_variant`.
   * </pre>
   *
   * Protobuf type {@code cobaltspeech.diatheke.NewSessionRequest}
   */
  public  static final class NewSessionRequest extends
      com.google.protobuf.GeneratedMessageLite<
          NewSessionRequest, NewSessionRequest.Builder> implements
      // @@protoc_insertion_point(message_implements:cobaltspeech.diatheke.NewSessionRequest)
      NewSessionRequestOrBuilder {
    private NewSessionRequest() {
      model_ = "";
    }
    public static final int MODEL_FIELD_NUMBER = 1;
    private java.lang.String model_;
    /**
     * <pre>
     * For applications that have more than one model to use for ASR/NLU.
     * ASR grammar can vary between models, as well as sets of commands.
     * Some applications will only have one model.
     * </pre>
     *
     * <code>optional string model = 1;</code>
     */
    public java.lang.String getModel() {
      return model_;
    }
    /**
     * <pre>
     * For applications that have more than one model to use for ASR/NLU.
     * ASR grammar can vary between models, as well as sets of commands.
     * Some applications will only have one model.
     * </pre>
     *
     * <code>optional string model = 1;</code>
     */
    public com.google.protobuf.ByteString
        getModelBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(model_);
    }
    /**
     * <pre>
     * For applications that have more than one model to use for ASR/NLU.
     * ASR grammar can vary between models, as well as sets of commands.
     * Some applications will only have one model.
     * </pre>
     *
     * <code>optional string model = 1;</code>
     */
    private void setModel(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      model_ = value;
    }
    /**
     * <pre>
     * For applications that have more than one model to use for ASR/NLU.
     * ASR grammar can vary between models, as well as sets of commands.
     * Some applications will only have one model.
     * </pre>
     *
     * <code>optional string model = 1;</code>
     */
    private void clearModel() {
      
      model_ = getDefaultInstance().getModel();
    }
    /**
     * <pre>
     * For applications that have more than one model to use for ASR/NLU.
     * ASR grammar can vary between models, as well as sets of commands.
     * Some applications will only have one model.
     * </pre>
     *
     * <code>optional string model = 1;</code>
     */
    private void setModelBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      model_ = value.toStringUtf8();
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!model_.isEmpty()) {
        output.writeString(1, getModel());
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (!model_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getModel());
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static cobaltspeech.diatheke.DiathekeOuterClass.NewSessionRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.NewSessionRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.NewSessionRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.NewSessionRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.NewSessionRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.NewSessionRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.NewSessionRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.NewSessionRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.NewSessionRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.NewSessionRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(cobaltspeech.diatheke.DiathekeOuterClass.NewSessionRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * Request for the NewSession call.
     * TODO: Consider combining the language and model into one string, such as `en_US_variant`.
     * </pre>
     *
     * Protobuf type {@code cobaltspeech.diatheke.NewSessionRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          cobaltspeech.diatheke.DiathekeOuterClass.NewSessionRequest, Builder> implements
        // @@protoc_insertion_point(builder_implements:cobaltspeech.diatheke.NewSessionRequest)
        cobaltspeech.diatheke.DiathekeOuterClass.NewSessionRequestOrBuilder {
      // Construct using cobaltspeech.diatheke.DiathekeOuterClass.NewSessionRequest.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * For applications that have more than one model to use for ASR/NLU.
       * ASR grammar can vary between models, as well as sets of commands.
       * Some applications will only have one model.
       * </pre>
       *
       * <code>optional string model = 1;</code>
       */
      public java.lang.String getModel() {
        return instance.getModel();
      }
      /**
       * <pre>
       * For applications that have more than one model to use for ASR/NLU.
       * ASR grammar can vary between models, as well as sets of commands.
       * Some applications will only have one model.
       * </pre>
       *
       * <code>optional string model = 1;</code>
       */
      public com.google.protobuf.ByteString
          getModelBytes() {
        return instance.getModelBytes();
      }
      /**
       * <pre>
       * For applications that have more than one model to use for ASR/NLU.
       * ASR grammar can vary between models, as well as sets of commands.
       * Some applications will only have one model.
       * </pre>
       *
       * <code>optional string model = 1;</code>
       */
      public Builder setModel(
          java.lang.String value) {
        copyOnWrite();
        instance.setModel(value);
        return this;
      }
      /**
       * <pre>
       * For applications that have more than one model to use for ASR/NLU.
       * ASR grammar can vary between models, as well as sets of commands.
       * Some applications will only have one model.
       * </pre>
       *
       * <code>optional string model = 1;</code>
       */
      public Builder clearModel() {
        copyOnWrite();
        instance.clearModel();
        return this;
      }
      /**
       * <pre>
       * For applications that have more than one model to use for ASR/NLU.
       * ASR grammar can vary between models, as well as sets of commands.
       * Some applications will only have one model.
       * </pre>
       *
       * <code>optional string model = 1;</code>
       */
      public Builder setModelBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setModelBytes(value);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:cobaltspeech.diatheke.NewSessionRequest)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new cobaltspeech.diatheke.DiathekeOuterClass.NewSessionRequest();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          cobaltspeech.diatheke.DiathekeOuterClass.NewSessionRequest other = (cobaltspeech.diatheke.DiathekeOuterClass.NewSessionRequest) arg1;
          model_ = visitor.visitString(!model_.isEmpty(), model_,
              !other.model_.isEmpty(), other.model_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  String s = input.readStringRequireUtf8();

                  model_ = s;
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (cobaltspeech.diatheke.DiathekeOuterClass.NewSessionRequest.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:cobaltspeech.diatheke.NewSessionRequest)
    private static final cobaltspeech.diatheke.DiathekeOuterClass.NewSessionRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new NewSessionRequest();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static cobaltspeech.diatheke.DiathekeOuterClass.NewSessionRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<NewSessionRequest> PARSER;

    public static com.google.protobuf.Parser<NewSessionRequest> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface SessionIDOrBuilder extends
      // @@protoc_insertion_point(interface_extends:cobaltspeech.diatheke.SessionID)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * Session ID returned from the NewSession call.
     * </pre>
     *
     * <code>optional string session_id = 1;</code>
     */
    java.lang.String getSessionId();
    /**
     * <pre>
     * Session ID returned from the NewSession call.
     * </pre>
     *
     * <code>optional string session_id = 1;</code>
     */
    com.google.protobuf.ByteString
        getSessionIdBytes();
  }
  /**
   * <pre>
   * Simple message that only contains the session ID.
   * </pre>
   *
   * Protobuf type {@code cobaltspeech.diatheke.SessionID}
   */
  public  static final class SessionID extends
      com.google.protobuf.GeneratedMessageLite<
          SessionID, SessionID.Builder> implements
      // @@protoc_insertion_point(message_implements:cobaltspeech.diatheke.SessionID)
      SessionIDOrBuilder {
    private SessionID() {
      sessionId_ = "";
    }
    public static final int SESSION_ID_FIELD_NUMBER = 1;
    private java.lang.String sessionId_;
    /**
     * <pre>
     * Session ID returned from the NewSession call.
     * </pre>
     *
     * <code>optional string session_id = 1;</code>
     */
    public java.lang.String getSessionId() {
      return sessionId_;
    }
    /**
     * <pre>
     * Session ID returned from the NewSession call.
     * </pre>
     *
     * <code>optional string session_id = 1;</code>
     */
    public com.google.protobuf.ByteString
        getSessionIdBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(sessionId_);
    }
    /**
     * <pre>
     * Session ID returned from the NewSession call.
     * </pre>
     *
     * <code>optional string session_id = 1;</code>
     */
    private void setSessionId(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      sessionId_ = value;
    }
    /**
     * <pre>
     * Session ID returned from the NewSession call.
     * </pre>
     *
     * <code>optional string session_id = 1;</code>
     */
    private void clearSessionId() {
      
      sessionId_ = getDefaultInstance().getSessionId();
    }
    /**
     * <pre>
     * Session ID returned from the NewSession call.
     * </pre>
     *
     * <code>optional string session_id = 1;</code>
     */
    private void setSessionIdBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      sessionId_ = value.toStringUtf8();
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!sessionId_.isEmpty()) {
        output.writeString(1, getSessionId());
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (!sessionId_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getSessionId());
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static cobaltspeech.diatheke.DiathekeOuterClass.SessionID parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.SessionID parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.SessionID parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.SessionID parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.SessionID parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.SessionID parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.SessionID parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.SessionID parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.SessionID parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.SessionID parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(cobaltspeech.diatheke.DiathekeOuterClass.SessionID prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * Simple message that only contains the session ID.
     * </pre>
     *
     * Protobuf type {@code cobaltspeech.diatheke.SessionID}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          cobaltspeech.diatheke.DiathekeOuterClass.SessionID, Builder> implements
        // @@protoc_insertion_point(builder_implements:cobaltspeech.diatheke.SessionID)
        cobaltspeech.diatheke.DiathekeOuterClass.SessionIDOrBuilder {
      // Construct using cobaltspeech.diatheke.DiathekeOuterClass.SessionID.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * Session ID returned from the NewSession call.
       * </pre>
       *
       * <code>optional string session_id = 1;</code>
       */
      public java.lang.String getSessionId() {
        return instance.getSessionId();
      }
      /**
       * <pre>
       * Session ID returned from the NewSession call.
       * </pre>
       *
       * <code>optional string session_id = 1;</code>
       */
      public com.google.protobuf.ByteString
          getSessionIdBytes() {
        return instance.getSessionIdBytes();
      }
      /**
       * <pre>
       * Session ID returned from the NewSession call.
       * </pre>
       *
       * <code>optional string session_id = 1;</code>
       */
      public Builder setSessionId(
          java.lang.String value) {
        copyOnWrite();
        instance.setSessionId(value);
        return this;
      }
      /**
       * <pre>
       * Session ID returned from the NewSession call.
       * </pre>
       *
       * <code>optional string session_id = 1;</code>
       */
      public Builder clearSessionId() {
        copyOnWrite();
        instance.clearSessionId();
        return this;
      }
      /**
       * <pre>
       * Session ID returned from the NewSession call.
       * </pre>
       *
       * <code>optional string session_id = 1;</code>
       */
      public Builder setSessionIdBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setSessionIdBytes(value);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:cobaltspeech.diatheke.SessionID)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new cobaltspeech.diatheke.DiathekeOuterClass.SessionID();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          cobaltspeech.diatheke.DiathekeOuterClass.SessionID other = (cobaltspeech.diatheke.DiathekeOuterClass.SessionID) arg1;
          sessionId_ = visitor.visitString(!sessionId_.isEmpty(), sessionId_,
              !other.sessionId_.isEmpty(), other.sessionId_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  String s = input.readStringRequireUtf8();

                  sessionId_ = s;
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (cobaltspeech.diatheke.DiathekeOuterClass.SessionID.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:cobaltspeech.diatheke.SessionID)
    private static final cobaltspeech.diatheke.DiathekeOuterClass.SessionID DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new SessionID();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static cobaltspeech.diatheke.DiathekeOuterClass.SessionID getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<SessionID> PARSER;

    public static com.google.protobuf.Parser<SessionID> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface DiathekeEventOrBuilder extends
      // @@protoc_insertion_point(interface_extends:cobaltspeech.diatheke.DiathekeEvent)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * Indicates Diatheke found an actionable state in the dialog,
     * and requests the client to perform the given command.
     * While not strictly required (depeding on the model and command),
     * it is best practice to always call CommandFinished after receiving
     * this event so that Diatheke can update the dialog state when the
     * command is complete. Cases where it is required include when the
     * command has output parameters, or when it is followed by another
     * action in the Diatheke model.
     * </pre>
     *
     * <code>optional .cobaltspeech.diatheke.CommandEvent command = 1;</code>
     */
    cobaltspeech.diatheke.DiathekeOuterClass.CommandEvent getCommand();

    /**
     * <pre>
     * An event indicating whether pushed text and audio was recognized by
     * ASR and/or Diatheke.
     * </pre>
     *
     * <code>optional .cobaltspeech.diatheke.RecognizeEvent recognize = 2;</code>
     */
    cobaltspeech.diatheke.DiathekeOuterClass.RecognizeEvent getRecognize();

    /**
     * <pre>
     * The textual reply from Diatheke in the conversation (not to be 
     * confused with the server concepts of request and response). For 
     * example, this could be a question to solicit more information 
     * from the user, a status report, or any other reply defined by 
     * the Diatheke model. The text of this message is also provided in
     * the AudioReply stream (if one is open).
     * </pre>
     *
     * <code>optional .cobaltspeech.diatheke.ReplyEvent reply = 3;</code>
     */
    cobaltspeech.diatheke.DiathekeOuterClass.ReplyEvent getReply();

    public cobaltspeech.diatheke.DiathekeOuterClass.DiathekeEvent.ResultCase getResultCase();
  }
  /**
   * <pre>
   * An event from Diatheke in response to either recognized audio or
   * submitted text.
   * </pre>
   *
   * Protobuf type {@code cobaltspeech.diatheke.DiathekeEvent}
   */
  public  static final class DiathekeEvent extends
      com.google.protobuf.GeneratedMessageLite<
          DiathekeEvent, DiathekeEvent.Builder> implements
      // @@protoc_insertion_point(message_implements:cobaltspeech.diatheke.DiathekeEvent)
      DiathekeEventOrBuilder {
    private DiathekeEvent() {
    }
    private int resultCase_ = 0;
    private java.lang.Object result_;
    public enum ResultCase
        implements com.google.protobuf.Internal.EnumLite {
      COMMAND(1),
      RECOGNIZE(2),
      REPLY(3),
      RESULT_NOT_SET(0);
      private final int value;
      private ResultCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ResultCase valueOf(int value) {
        return forNumber(value);
      }

      public static ResultCase forNumber(int value) {
        switch (value) {
          case 1: return COMMAND;
          case 2: return RECOGNIZE;
          case 3: return REPLY;
          case 0: return RESULT_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public ResultCase
    getResultCase() {
      return ResultCase.forNumber(
          resultCase_);
    }

    private void clearResult() {
      resultCase_ = 0;
      result_ = null;
    }

    public static final int COMMAND_FIELD_NUMBER = 1;
    /**
     * <pre>
     * Indicates Diatheke found an actionable state in the dialog,
     * and requests the client to perform the given command.
     * While not strictly required (depeding on the model and command),
     * it is best practice to always call CommandFinished after receiving
     * this event so that Diatheke can update the dialog state when the
     * command is complete. Cases where it is required include when the
     * command has output parameters, or when it is followed by another
     * action in the Diatheke model.
     * </pre>
     *
     * <code>optional .cobaltspeech.diatheke.CommandEvent command = 1;</code>
     */
    public cobaltspeech.diatheke.DiathekeOuterClass.CommandEvent getCommand() {
      if (resultCase_ == 1) {
         return (cobaltspeech.diatheke.DiathekeOuterClass.CommandEvent) result_;
      }
      return cobaltspeech.diatheke.DiathekeOuterClass.CommandEvent.getDefaultInstance();
    }
    /**
     * <pre>
     * Indicates Diatheke found an actionable state in the dialog,
     * and requests the client to perform the given command.
     * While not strictly required (depeding on the model and command),
     * it is best practice to always call CommandFinished after receiving
     * this event so that Diatheke can update the dialog state when the
     * command is complete. Cases where it is required include when the
     * command has output parameters, or when it is followed by another
     * action in the Diatheke model.
     * </pre>
     *
     * <code>optional .cobaltspeech.diatheke.CommandEvent command = 1;</code>
     */
    private void setCommand(cobaltspeech.diatheke.DiathekeOuterClass.CommandEvent value) {
      if (value == null) {
        throw new NullPointerException();
      }
      result_ = value;
      resultCase_ = 1;
    }
    /**
     * <pre>
     * Indicates Diatheke found an actionable state in the dialog,
     * and requests the client to perform the given command.
     * While not strictly required (depeding on the model and command),
     * it is best practice to always call CommandFinished after receiving
     * this event so that Diatheke can update the dialog state when the
     * command is complete. Cases where it is required include when the
     * command has output parameters, or when it is followed by another
     * action in the Diatheke model.
     * </pre>
     *
     * <code>optional .cobaltspeech.diatheke.CommandEvent command = 1;</code>
     */
    private void setCommand(
        cobaltspeech.diatheke.DiathekeOuterClass.CommandEvent.Builder builderForValue) {
      result_ = builderForValue.build();
      resultCase_ = 1;
    }
    /**
     * <pre>
     * Indicates Diatheke found an actionable state in the dialog,
     * and requests the client to perform the given command.
     * While not strictly required (depeding on the model and command),
     * it is best practice to always call CommandFinished after receiving
     * this event so that Diatheke can update the dialog state when the
     * command is complete. Cases where it is required include when the
     * command has output parameters, or when it is followed by another
     * action in the Diatheke model.
     * </pre>
     *
     * <code>optional .cobaltspeech.diatheke.CommandEvent command = 1;</code>
     */
    private void mergeCommand(cobaltspeech.diatheke.DiathekeOuterClass.CommandEvent value) {
      if (resultCase_ == 1 &&
          result_ != cobaltspeech.diatheke.DiathekeOuterClass.CommandEvent.getDefaultInstance()) {
        result_ = cobaltspeech.diatheke.DiathekeOuterClass.CommandEvent.newBuilder((cobaltspeech.diatheke.DiathekeOuterClass.CommandEvent) result_)
            .mergeFrom(value).buildPartial();
      } else {
        result_ = value;
      }
      resultCase_ = 1;
    }
    /**
     * <pre>
     * Indicates Diatheke found an actionable state in the dialog,
     * and requests the client to perform the given command.
     * While not strictly required (depeding on the model and command),
     * it is best practice to always call CommandFinished after receiving
     * this event so that Diatheke can update the dialog state when the
     * command is complete. Cases where it is required include when the
     * command has output parameters, or when it is followed by another
     * action in the Diatheke model.
     * </pre>
     *
     * <code>optional .cobaltspeech.diatheke.CommandEvent command = 1;</code>
     */
    private void clearCommand() {
      if (resultCase_ == 1) {
        resultCase_ = 0;
        result_ = null;
      }
    }

    public static final int RECOGNIZE_FIELD_NUMBER = 2;
    /**
     * <pre>
     * An event indicating whether pushed text and audio was recognized by
     * ASR and/or Diatheke.
     * </pre>
     *
     * <code>optional .cobaltspeech.diatheke.RecognizeEvent recognize = 2;</code>
     */
    public cobaltspeech.diatheke.DiathekeOuterClass.RecognizeEvent getRecognize() {
      if (resultCase_ == 2) {
         return (cobaltspeech.diatheke.DiathekeOuterClass.RecognizeEvent) result_;
      }
      return cobaltspeech.diatheke.DiathekeOuterClass.RecognizeEvent.getDefaultInstance();
    }
    /**
     * <pre>
     * An event indicating whether pushed text and audio was recognized by
     * ASR and/or Diatheke.
     * </pre>
     *
     * <code>optional .cobaltspeech.diatheke.RecognizeEvent recognize = 2;</code>
     */
    private void setRecognize(cobaltspeech.diatheke.DiathekeOuterClass.RecognizeEvent value) {
      if (value == null) {
        throw new NullPointerException();
      }
      result_ = value;
      resultCase_ = 2;
    }
    /**
     * <pre>
     * An event indicating whether pushed text and audio was recognized by
     * ASR and/or Diatheke.
     * </pre>
     *
     * <code>optional .cobaltspeech.diatheke.RecognizeEvent recognize = 2;</code>
     */
    private void setRecognize(
        cobaltspeech.diatheke.DiathekeOuterClass.RecognizeEvent.Builder builderForValue) {
      result_ = builderForValue.build();
      resultCase_ = 2;
    }
    /**
     * <pre>
     * An event indicating whether pushed text and audio was recognized by
     * ASR and/or Diatheke.
     * </pre>
     *
     * <code>optional .cobaltspeech.diatheke.RecognizeEvent recognize = 2;</code>
     */
    private void mergeRecognize(cobaltspeech.diatheke.DiathekeOuterClass.RecognizeEvent value) {
      if (resultCase_ == 2 &&
          result_ != cobaltspeech.diatheke.DiathekeOuterClass.RecognizeEvent.getDefaultInstance()) {
        result_ = cobaltspeech.diatheke.DiathekeOuterClass.RecognizeEvent.newBuilder((cobaltspeech.diatheke.DiathekeOuterClass.RecognizeEvent) result_)
            .mergeFrom(value).buildPartial();
      } else {
        result_ = value;
      }
      resultCase_ = 2;
    }
    /**
     * <pre>
     * An event indicating whether pushed text and audio was recognized by
     * ASR and/or Diatheke.
     * </pre>
     *
     * <code>optional .cobaltspeech.diatheke.RecognizeEvent recognize = 2;</code>
     */
    private void clearRecognize() {
      if (resultCase_ == 2) {
        resultCase_ = 0;
        result_ = null;
      }
    }

    public static final int REPLY_FIELD_NUMBER = 3;
    /**
     * <pre>
     * The textual reply from Diatheke in the conversation (not to be 
     * confused with the server concepts of request and response). For 
     * example, this could be a question to solicit more information 
     * from the user, a status report, or any other reply defined by 
     * the Diatheke model. The text of this message is also provided in
     * the AudioReply stream (if one is open).
     * </pre>
     *
     * <code>optional .cobaltspeech.diatheke.ReplyEvent reply = 3;</code>
     */
    public cobaltspeech.diatheke.DiathekeOuterClass.ReplyEvent getReply() {
      if (resultCase_ == 3) {
         return (cobaltspeech.diatheke.DiathekeOuterClass.ReplyEvent) result_;
      }
      return cobaltspeech.diatheke.DiathekeOuterClass.ReplyEvent.getDefaultInstance();
    }
    /**
     * <pre>
     * The textual reply from Diatheke in the conversation (not to be 
     * confused with the server concepts of request and response). For 
     * example, this could be a question to solicit more information 
     * from the user, a status report, or any other reply defined by 
     * the Diatheke model. The text of this message is also provided in
     * the AudioReply stream (if one is open).
     * </pre>
     *
     * <code>optional .cobaltspeech.diatheke.ReplyEvent reply = 3;</code>
     */
    private void setReply(cobaltspeech.diatheke.DiathekeOuterClass.ReplyEvent value) {
      if (value == null) {
        throw new NullPointerException();
      }
      result_ = value;
      resultCase_ = 3;
    }
    /**
     * <pre>
     * The textual reply from Diatheke in the conversation (not to be 
     * confused with the server concepts of request and response). For 
     * example, this could be a question to solicit more information 
     * from the user, a status report, or any other reply defined by 
     * the Diatheke model. The text of this message is also provided in
     * the AudioReply stream (if one is open).
     * </pre>
     *
     * <code>optional .cobaltspeech.diatheke.ReplyEvent reply = 3;</code>
     */
    private void setReply(
        cobaltspeech.diatheke.DiathekeOuterClass.ReplyEvent.Builder builderForValue) {
      result_ = builderForValue.build();
      resultCase_ = 3;
    }
    /**
     * <pre>
     * The textual reply from Diatheke in the conversation (not to be 
     * confused with the server concepts of request and response). For 
     * example, this could be a question to solicit more information 
     * from the user, a status report, or any other reply defined by 
     * the Diatheke model. The text of this message is also provided in
     * the AudioReply stream (if one is open).
     * </pre>
     *
     * <code>optional .cobaltspeech.diatheke.ReplyEvent reply = 3;</code>
     */
    private void mergeReply(cobaltspeech.diatheke.DiathekeOuterClass.ReplyEvent value) {
      if (resultCase_ == 3 &&
          result_ != cobaltspeech.diatheke.DiathekeOuterClass.ReplyEvent.getDefaultInstance()) {
        result_ = cobaltspeech.diatheke.DiathekeOuterClass.ReplyEvent.newBuilder((cobaltspeech.diatheke.DiathekeOuterClass.ReplyEvent) result_)
            .mergeFrom(value).buildPartial();
      } else {
        result_ = value;
      }
      resultCase_ = 3;
    }
    /**
     * <pre>
     * The textual reply from Diatheke in the conversation (not to be 
     * confused with the server concepts of request and response). For 
     * example, this could be a question to solicit more information 
     * from the user, a status report, or any other reply defined by 
     * the Diatheke model. The text of this message is also provided in
     * the AudioReply stream (if one is open).
     * </pre>
     *
     * <code>optional .cobaltspeech.diatheke.ReplyEvent reply = 3;</code>
     */
    private void clearReply() {
      if (resultCase_ == 3) {
        resultCase_ = 0;
        result_ = null;
      }
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (resultCase_ == 1) {
        output.writeMessage(1, (cobaltspeech.diatheke.DiathekeOuterClass.CommandEvent) result_);
      }
      if (resultCase_ == 2) {
        output.writeMessage(2, (cobaltspeech.diatheke.DiathekeOuterClass.RecognizeEvent) result_);
      }
      if (resultCase_ == 3) {
        output.writeMessage(3, (cobaltspeech.diatheke.DiathekeOuterClass.ReplyEvent) result_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (resultCase_ == 1) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, (cobaltspeech.diatheke.DiathekeOuterClass.CommandEvent) result_);
      }
      if (resultCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, (cobaltspeech.diatheke.DiathekeOuterClass.RecognizeEvent) result_);
      }
      if (resultCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, (cobaltspeech.diatheke.DiathekeOuterClass.ReplyEvent) result_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static cobaltspeech.diatheke.DiathekeOuterClass.DiathekeEvent parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.DiathekeEvent parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.DiathekeEvent parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.DiathekeEvent parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.DiathekeEvent parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.DiathekeEvent parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.DiathekeEvent parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.DiathekeEvent parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.DiathekeEvent parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.DiathekeEvent parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(cobaltspeech.diatheke.DiathekeOuterClass.DiathekeEvent prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * An event from Diatheke in response to either recognized audio or
     * submitted text.
     * </pre>
     *
     * Protobuf type {@code cobaltspeech.diatheke.DiathekeEvent}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          cobaltspeech.diatheke.DiathekeOuterClass.DiathekeEvent, Builder> implements
        // @@protoc_insertion_point(builder_implements:cobaltspeech.diatheke.DiathekeEvent)
        cobaltspeech.diatheke.DiathekeOuterClass.DiathekeEventOrBuilder {
      // Construct using cobaltspeech.diatheke.DiathekeOuterClass.DiathekeEvent.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }

      public ResultCase
          getResultCase() {
        return instance.getResultCase();
      }

      public Builder clearResult() {
        copyOnWrite();
        instance.clearResult();
        return this;
      }


      /**
       * <pre>
       * Indicates Diatheke found an actionable state in the dialog,
       * and requests the client to perform the given command.
       * While not strictly required (depeding on the model and command),
       * it is best practice to always call CommandFinished after receiving
       * this event so that Diatheke can update the dialog state when the
       * command is complete. Cases where it is required include when the
       * command has output parameters, or when it is followed by another
       * action in the Diatheke model.
       * </pre>
       *
       * <code>optional .cobaltspeech.diatheke.CommandEvent command = 1;</code>
       */
      public cobaltspeech.diatheke.DiathekeOuterClass.CommandEvent getCommand() {
        return instance.getCommand();
      }
      /**
       * <pre>
       * Indicates Diatheke found an actionable state in the dialog,
       * and requests the client to perform the given command.
       * While not strictly required (depeding on the model and command),
       * it is best practice to always call CommandFinished after receiving
       * this event so that Diatheke can update the dialog state when the
       * command is complete. Cases where it is required include when the
       * command has output parameters, or when it is followed by another
       * action in the Diatheke model.
       * </pre>
       *
       * <code>optional .cobaltspeech.diatheke.CommandEvent command = 1;</code>
       */
      public Builder setCommand(cobaltspeech.diatheke.DiathekeOuterClass.CommandEvent value) {
        copyOnWrite();
        instance.setCommand(value);
        return this;
      }
      /**
       * <pre>
       * Indicates Diatheke found an actionable state in the dialog,
       * and requests the client to perform the given command.
       * While not strictly required (depeding on the model and command),
       * it is best practice to always call CommandFinished after receiving
       * this event so that Diatheke can update the dialog state when the
       * command is complete. Cases where it is required include when the
       * command has output parameters, or when it is followed by another
       * action in the Diatheke model.
       * </pre>
       *
       * <code>optional .cobaltspeech.diatheke.CommandEvent command = 1;</code>
       */
      public Builder setCommand(
          cobaltspeech.diatheke.DiathekeOuterClass.CommandEvent.Builder builderForValue) {
        copyOnWrite();
        instance.setCommand(builderForValue);
        return this;
      }
      /**
       * <pre>
       * Indicates Diatheke found an actionable state in the dialog,
       * and requests the client to perform the given command.
       * While not strictly required (depeding on the model and command),
       * it is best practice to always call CommandFinished after receiving
       * this event so that Diatheke can update the dialog state when the
       * command is complete. Cases where it is required include when the
       * command has output parameters, or when it is followed by another
       * action in the Diatheke model.
       * </pre>
       *
       * <code>optional .cobaltspeech.diatheke.CommandEvent command = 1;</code>
       */
      public Builder mergeCommand(cobaltspeech.diatheke.DiathekeOuterClass.CommandEvent value) {
        copyOnWrite();
        instance.mergeCommand(value);
        return this;
      }
      /**
       * <pre>
       * Indicates Diatheke found an actionable state in the dialog,
       * and requests the client to perform the given command.
       * While not strictly required (depeding on the model and command),
       * it is best practice to always call CommandFinished after receiving
       * this event so that Diatheke can update the dialog state when the
       * command is complete. Cases where it is required include when the
       * command has output parameters, or when it is followed by another
       * action in the Diatheke model.
       * </pre>
       *
       * <code>optional .cobaltspeech.diatheke.CommandEvent command = 1;</code>
       */
      public Builder clearCommand() {
        copyOnWrite();
        instance.clearCommand();
        return this;
      }

      /**
       * <pre>
       * An event indicating whether pushed text and audio was recognized by
       * ASR and/or Diatheke.
       * </pre>
       *
       * <code>optional .cobaltspeech.diatheke.RecognizeEvent recognize = 2;</code>
       */
      public cobaltspeech.diatheke.DiathekeOuterClass.RecognizeEvent getRecognize() {
        return instance.getRecognize();
      }
      /**
       * <pre>
       * An event indicating whether pushed text and audio was recognized by
       * ASR and/or Diatheke.
       * </pre>
       *
       * <code>optional .cobaltspeech.diatheke.RecognizeEvent recognize = 2;</code>
       */
      public Builder setRecognize(cobaltspeech.diatheke.DiathekeOuterClass.RecognizeEvent value) {
        copyOnWrite();
        instance.setRecognize(value);
        return this;
      }
      /**
       * <pre>
       * An event indicating whether pushed text and audio was recognized by
       * ASR and/or Diatheke.
       * </pre>
       *
       * <code>optional .cobaltspeech.diatheke.RecognizeEvent recognize = 2;</code>
       */
      public Builder setRecognize(
          cobaltspeech.diatheke.DiathekeOuterClass.RecognizeEvent.Builder builderForValue) {
        copyOnWrite();
        instance.setRecognize(builderForValue);
        return this;
      }
      /**
       * <pre>
       * An event indicating whether pushed text and audio was recognized by
       * ASR and/or Diatheke.
       * </pre>
       *
       * <code>optional .cobaltspeech.diatheke.RecognizeEvent recognize = 2;</code>
       */
      public Builder mergeRecognize(cobaltspeech.diatheke.DiathekeOuterClass.RecognizeEvent value) {
        copyOnWrite();
        instance.mergeRecognize(value);
        return this;
      }
      /**
       * <pre>
       * An event indicating whether pushed text and audio was recognized by
       * ASR and/or Diatheke.
       * </pre>
       *
       * <code>optional .cobaltspeech.diatheke.RecognizeEvent recognize = 2;</code>
       */
      public Builder clearRecognize() {
        copyOnWrite();
        instance.clearRecognize();
        return this;
      }

      /**
       * <pre>
       * The textual reply from Diatheke in the conversation (not to be 
       * confused with the server concepts of request and response). For 
       * example, this could be a question to solicit more information 
       * from the user, a status report, or any other reply defined by 
       * the Diatheke model. The text of this message is also provided in
       * the AudioReply stream (if one is open).
       * </pre>
       *
       * <code>optional .cobaltspeech.diatheke.ReplyEvent reply = 3;</code>
       */
      public cobaltspeech.diatheke.DiathekeOuterClass.ReplyEvent getReply() {
        return instance.getReply();
      }
      /**
       * <pre>
       * The textual reply from Diatheke in the conversation (not to be 
       * confused with the server concepts of request and response). For 
       * example, this could be a question to solicit more information 
       * from the user, a status report, or any other reply defined by 
       * the Diatheke model. The text of this message is also provided in
       * the AudioReply stream (if one is open).
       * </pre>
       *
       * <code>optional .cobaltspeech.diatheke.ReplyEvent reply = 3;</code>
       */
      public Builder setReply(cobaltspeech.diatheke.DiathekeOuterClass.ReplyEvent value) {
        copyOnWrite();
        instance.setReply(value);
        return this;
      }
      /**
       * <pre>
       * The textual reply from Diatheke in the conversation (not to be 
       * confused with the server concepts of request and response). For 
       * example, this could be a question to solicit more information 
       * from the user, a status report, or any other reply defined by 
       * the Diatheke model. The text of this message is also provided in
       * the AudioReply stream (if one is open).
       * </pre>
       *
       * <code>optional .cobaltspeech.diatheke.ReplyEvent reply = 3;</code>
       */
      public Builder setReply(
          cobaltspeech.diatheke.DiathekeOuterClass.ReplyEvent.Builder builderForValue) {
        copyOnWrite();
        instance.setReply(builderForValue);
        return this;
      }
      /**
       * <pre>
       * The textual reply from Diatheke in the conversation (not to be 
       * confused with the server concepts of request and response). For 
       * example, this could be a question to solicit more information 
       * from the user, a status report, or any other reply defined by 
       * the Diatheke model. The text of this message is also provided in
       * the AudioReply stream (if one is open).
       * </pre>
       *
       * <code>optional .cobaltspeech.diatheke.ReplyEvent reply = 3;</code>
       */
      public Builder mergeReply(cobaltspeech.diatheke.DiathekeOuterClass.ReplyEvent value) {
        copyOnWrite();
        instance.mergeReply(value);
        return this;
      }
      /**
       * <pre>
       * The textual reply from Diatheke in the conversation (not to be 
       * confused with the server concepts of request and response). For 
       * example, this could be a question to solicit more information 
       * from the user, a status report, or any other reply defined by 
       * the Diatheke model. The text of this message is also provided in
       * the AudioReply stream (if one is open).
       * </pre>
       *
       * <code>optional .cobaltspeech.diatheke.ReplyEvent reply = 3;</code>
       */
      public Builder clearReply() {
        copyOnWrite();
        instance.clearReply();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:cobaltspeech.diatheke.DiathekeEvent)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new cobaltspeech.diatheke.DiathekeOuterClass.DiathekeEvent();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          cobaltspeech.diatheke.DiathekeOuterClass.DiathekeEvent other = (cobaltspeech.diatheke.DiathekeOuterClass.DiathekeEvent) arg1;
          switch (other.getResultCase()) {
            case COMMAND: {
              result_ = visitor.visitOneofMessage(
                  resultCase_ == 1,
                  result_,
                  other.result_);
              break;
            }
            case RECOGNIZE: {
              result_ = visitor.visitOneofMessage(
                  resultCase_ == 2,
                  result_,
                  other.result_);
              break;
            }
            case REPLY: {
              result_ = visitor.visitOneofMessage(
                  resultCase_ == 3,
                  result_,
                  other.result_);
              break;
            }
            case RESULT_NOT_SET: {
              visitor.visitOneofNotSet(resultCase_ != 0);
              break;
            }
          }
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            if (other.resultCase_ != 0) {
              resultCase_ = other.resultCase_;
            }
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  cobaltspeech.diatheke.DiathekeOuterClass.CommandEvent.Builder subBuilder = null;
                  if (resultCase_ == 1) {
                    subBuilder = ((cobaltspeech.diatheke.DiathekeOuterClass.CommandEvent) result_).toBuilder();
                  }
                  result_ =
                       input.readMessage(cobaltspeech.diatheke.DiathekeOuterClass.CommandEvent.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom((cobaltspeech.diatheke.DiathekeOuterClass.CommandEvent) result_);
                    result_ = subBuilder.buildPartial();
                  }
                  resultCase_ = 1;
                  break;
                }
                case 18: {
                  cobaltspeech.diatheke.DiathekeOuterClass.RecognizeEvent.Builder subBuilder = null;
                  if (resultCase_ == 2) {
                    subBuilder = ((cobaltspeech.diatheke.DiathekeOuterClass.RecognizeEvent) result_).toBuilder();
                  }
                  result_ =
                       input.readMessage(cobaltspeech.diatheke.DiathekeOuterClass.RecognizeEvent.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom((cobaltspeech.diatheke.DiathekeOuterClass.RecognizeEvent) result_);
                    result_ = subBuilder.buildPartial();
                  }
                  resultCase_ = 2;
                  break;
                }
                case 26: {
                  cobaltspeech.diatheke.DiathekeOuterClass.ReplyEvent.Builder subBuilder = null;
                  if (resultCase_ == 3) {
                    subBuilder = ((cobaltspeech.diatheke.DiathekeOuterClass.ReplyEvent) result_).toBuilder();
                  }
                  result_ =
                       input.readMessage(cobaltspeech.diatheke.DiathekeOuterClass.ReplyEvent.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom((cobaltspeech.diatheke.DiathekeOuterClass.ReplyEvent) result_);
                    result_ = subBuilder.buildPartial();
                  }
                  resultCase_ = 3;
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (cobaltspeech.diatheke.DiathekeOuterClass.DiathekeEvent.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:cobaltspeech.diatheke.DiathekeEvent)
    private static final cobaltspeech.diatheke.DiathekeOuterClass.DiathekeEvent DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new DiathekeEvent();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static cobaltspeech.diatheke.DiathekeOuterClass.DiathekeEvent getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<DiathekeEvent> PARSER;

    public static com.google.protobuf.Parser<DiathekeEvent> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface CommandEventOrBuilder extends
      // @@protoc_insertion_point(interface_extends:cobaltspeech.diatheke.CommandEvent)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * ID of the command that should be run.  i.e. "COM01" for Command #01.
     * </pre>
     *
     * <code>optional string command_id = 1;</code>
     */
    java.lang.String getCommandId();
    /**
     * <pre>
     * ID of the command that should be run.  i.e. "COM01" for Command #01.
     * </pre>
     *
     * <code>optional string command_id = 1;</code>
     */
    com.google.protobuf.ByteString
        getCommandIdBytes();

    /**
     * <pre>
     * A generic map of parameters (name, value). The parameters are 
     * defined in the Diatheke model. Depending on the command, these
     * parameters should be sent back with the CommandStatus update.
     * </pre>
     *
     * <code>map&lt;string, string&gt; parameters = 2;</code>
     */
    int getParametersCount();
    /**
     * <pre>
     * A generic map of parameters (name, value). The parameters are 
     * defined in the Diatheke model. Depending on the command, these
     * parameters should be sent back with the CommandStatus update.
     * </pre>
     *
     * <code>map&lt;string, string&gt; parameters = 2;</code>
     */
    boolean containsParameters(
        java.lang.String key);
    /**
     * Use {@link #getParametersMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.String>
    getParameters();
    /**
     * <pre>
     * A generic map of parameters (name, value). The parameters are 
     * defined in the Diatheke model. Depending on the command, these
     * parameters should be sent back with the CommandStatus update.
     * </pre>
     *
     * <code>map&lt;string, string&gt; parameters = 2;</code>
     */
    java.util.Map<java.lang.String, java.lang.String>
    getParametersMap();
    /**
     * <pre>
     * A generic map of parameters (name, value). The parameters are 
     * defined in the Diatheke model. Depending on the command, these
     * parameters should be sent back with the CommandStatus update.
     * </pre>
     *
     * <code>map&lt;string, string&gt; parameters = 2;</code>
     */

    java.lang.String getParametersOrDefault(
        java.lang.String key,
        java.lang.String defaultValue);
    /**
     * <pre>
     * A generic map of parameters (name, value). The parameters are 
     * defined in the Diatheke model. Depending on the command, these
     * parameters should be sent back with the CommandStatus update.
     * </pre>
     *
     * <code>map&lt;string, string&gt; parameters = 2;</code>
     */

    java.lang.String getParametersOrThrow(
        java.lang.String key);

    /**
     * <pre>
     * ID to keep track of the dialog state when the command is requested.
     * This field is required in the CommandStatus message so that Diatheke
     * can correctly update the dialog state when CommandFinished is called.
     * </pre>
     *
     * <code>optional string command_state_id = 3;</code>
     */
    java.lang.String getCommandStateId();
    /**
     * <pre>
     * ID to keep track of the dialog state when the command is requested.
     * This field is required in the CommandStatus message so that Diatheke
     * can correctly update the dialog state when CommandFinished is called.
     * </pre>
     *
     * <code>optional string command_state_id = 3;</code>
     */
    com.google.protobuf.ByteString
        getCommandStateIdBytes();
  }
  /**
   * <pre>
   * A CommandEvent occurs when Diatheke wants the client to execute the
   * given command.
   * </pre>
   *
   * Protobuf type {@code cobaltspeech.diatheke.CommandEvent}
   */
  public  static final class CommandEvent extends
      com.google.protobuf.GeneratedMessageLite<
          CommandEvent, CommandEvent.Builder> implements
      // @@protoc_insertion_point(message_implements:cobaltspeech.diatheke.CommandEvent)
      CommandEventOrBuilder {
    private CommandEvent() {
      commandId_ = "";
      commandStateId_ = "";
    }
    private int bitField0_;
    public static final int COMMAND_ID_FIELD_NUMBER = 1;
    private java.lang.String commandId_;
    /**
     * <pre>
     * ID of the command that should be run.  i.e. "COM01" for Command #01.
     * </pre>
     *
     * <code>optional string command_id = 1;</code>
     */
    public java.lang.String getCommandId() {
      return commandId_;
    }
    /**
     * <pre>
     * ID of the command that should be run.  i.e. "COM01" for Command #01.
     * </pre>
     *
     * <code>optional string command_id = 1;</code>
     */
    public com.google.protobuf.ByteString
        getCommandIdBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(commandId_);
    }
    /**
     * <pre>
     * ID of the command that should be run.  i.e. "COM01" for Command #01.
     * </pre>
     *
     * <code>optional string command_id = 1;</code>
     */
    private void setCommandId(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      commandId_ = value;
    }
    /**
     * <pre>
     * ID of the command that should be run.  i.e. "COM01" for Command #01.
     * </pre>
     *
     * <code>optional string command_id = 1;</code>
     */
    private void clearCommandId() {
      
      commandId_ = getDefaultInstance().getCommandId();
    }
    /**
     * <pre>
     * ID of the command that should be run.  i.e. "COM01" for Command #01.
     * </pre>
     *
     * <code>optional string command_id = 1;</code>
     */
    private void setCommandIdBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      commandId_ = value.toStringUtf8();
    }

    public static final int PARAMETERS_FIELD_NUMBER = 2;
    private static final class ParametersDefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.String, java.lang.String> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.String, java.lang.String>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "");
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.String, java.lang.String> parameters_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.String, java.lang.String>
    internalGetParameters() {
      return parameters_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.String, java.lang.String>
    internalGetMutableParameters() {
      if (!parameters_.isMutable()) {
        parameters_ = parameters_.mutableCopy();
      }
      return parameters_;
    }

    public int getParametersCount() {
      return internalGetParameters().size();
    }
    /**
     * <pre>
     * A generic map of parameters (name, value). The parameters are 
     * defined in the Diatheke model. Depending on the command, these
     * parameters should be sent back with the CommandStatus update.
     * </pre>
     *
     * <code>map&lt;string, string&gt; parameters = 2;</code>
     */

    public boolean containsParameters(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return internalGetParameters().containsKey(key);
    }
    /**
     * Use {@link #getParametersMap()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getParameters() {
      return getParametersMap();
    }
    /**
     * <pre>
     * A generic map of parameters (name, value). The parameters are 
     * defined in the Diatheke model. Depending on the command, these
     * parameters should be sent back with the CommandStatus update.
     * </pre>
     *
     * <code>map&lt;string, string&gt; parameters = 2;</code>
     */

    public java.util.Map<java.lang.String, java.lang.String> getParametersMap() {
      return java.util.Collections.unmodifiableMap(
          internalGetParameters());
    }
    /**
     * <pre>
     * A generic map of parameters (name, value). The parameters are 
     * defined in the Diatheke model. Depending on the command, these
     * parameters should be sent back with the CommandStatus update.
     * </pre>
     *
     * <code>map&lt;string, string&gt; parameters = 2;</code>
     */

    public java.lang.String getParametersOrDefault(
        java.lang.String key,
        java.lang.String defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetParameters();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * A generic map of parameters (name, value). The parameters are 
     * defined in the Diatheke model. Depending on the command, these
     * parameters should be sent back with the CommandStatus update.
     * </pre>
     *
     * <code>map&lt;string, string&gt; parameters = 2;</code>
     */

    public java.lang.String getParametersOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetParameters();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <pre>
     * A generic map of parameters (name, value). The parameters are 
     * defined in the Diatheke model. Depending on the command, these
     * parameters should be sent back with the CommandStatus update.
     * </pre>
     *
     * <code>map&lt;string, string&gt; parameters = 2;</code>
     */
    private java.util.Map<java.lang.String, java.lang.String>
    getMutableParametersMap() {
      return internalGetMutableParameters();
    }

    public static final int COMMAND_STATE_ID_FIELD_NUMBER = 3;
    private java.lang.String commandStateId_;
    /**
     * <pre>
     * ID to keep track of the dialog state when the command is requested.
     * This field is required in the CommandStatus message so that Diatheke
     * can correctly update the dialog state when CommandFinished is called.
     * </pre>
     *
     * <code>optional string command_state_id = 3;</code>
     */
    public java.lang.String getCommandStateId() {
      return commandStateId_;
    }
    /**
     * <pre>
     * ID to keep track of the dialog state when the command is requested.
     * This field is required in the CommandStatus message so that Diatheke
     * can correctly update the dialog state when CommandFinished is called.
     * </pre>
     *
     * <code>optional string command_state_id = 3;</code>
     */
    public com.google.protobuf.ByteString
        getCommandStateIdBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(commandStateId_);
    }
    /**
     * <pre>
     * ID to keep track of the dialog state when the command is requested.
     * This field is required in the CommandStatus message so that Diatheke
     * can correctly update the dialog state when CommandFinished is called.
     * </pre>
     *
     * <code>optional string command_state_id = 3;</code>
     */
    private void setCommandStateId(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      commandStateId_ = value;
    }
    /**
     * <pre>
     * ID to keep track of the dialog state when the command is requested.
     * This field is required in the CommandStatus message so that Diatheke
     * can correctly update the dialog state when CommandFinished is called.
     * </pre>
     *
     * <code>optional string command_state_id = 3;</code>
     */
    private void clearCommandStateId() {
      
      commandStateId_ = getDefaultInstance().getCommandStateId();
    }
    /**
     * <pre>
     * ID to keep track of the dialog state when the command is requested.
     * This field is required in the CommandStatus message so that Diatheke
     * can correctly update the dialog state when CommandFinished is called.
     * </pre>
     *
     * <code>optional string command_state_id = 3;</code>
     */
    private void setCommandStateIdBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      commandStateId_ = value.toStringUtf8();
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!commandId_.isEmpty()) {
        output.writeString(1, getCommandId());
      }
      for (java.util.Map.Entry<java.lang.String, java.lang.String> entry
           : internalGetParameters().entrySet()) {
        ParametersDefaultEntryHolder.defaultEntry.serializeTo(
            output, 2, entry.getKey(), entry.getValue());
      }
      if (!commandStateId_.isEmpty()) {
        output.writeString(3, getCommandStateId());
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (!commandId_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getCommandId());
      }
      for (java.util.Map.Entry<java.lang.String, java.lang.String> entry
           : internalGetParameters().entrySet()) {
        size += ParametersDefaultEntryHolder.defaultEntry.computeMessageSize(
          2, entry.getKey(), entry.getValue());
      }
      if (!commandStateId_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(3, getCommandStateId());
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static cobaltspeech.diatheke.DiathekeOuterClass.CommandEvent parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.CommandEvent parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.CommandEvent parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.CommandEvent parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.CommandEvent parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.CommandEvent parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.CommandEvent parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.CommandEvent parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.CommandEvent parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.CommandEvent parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(cobaltspeech.diatheke.DiathekeOuterClass.CommandEvent prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * A CommandEvent occurs when Diatheke wants the client to execute the
     * given command.
     * </pre>
     *
     * Protobuf type {@code cobaltspeech.diatheke.CommandEvent}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          cobaltspeech.diatheke.DiathekeOuterClass.CommandEvent, Builder> implements
        // @@protoc_insertion_point(builder_implements:cobaltspeech.diatheke.CommandEvent)
        cobaltspeech.diatheke.DiathekeOuterClass.CommandEventOrBuilder {
      // Construct using cobaltspeech.diatheke.DiathekeOuterClass.CommandEvent.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * ID of the command that should be run.  i.e. "COM01" for Command #01.
       * </pre>
       *
       * <code>optional string command_id = 1;</code>
       */
      public java.lang.String getCommandId() {
        return instance.getCommandId();
      }
      /**
       * <pre>
       * ID of the command that should be run.  i.e. "COM01" for Command #01.
       * </pre>
       *
       * <code>optional string command_id = 1;</code>
       */
      public com.google.protobuf.ByteString
          getCommandIdBytes() {
        return instance.getCommandIdBytes();
      }
      /**
       * <pre>
       * ID of the command that should be run.  i.e. "COM01" for Command #01.
       * </pre>
       *
       * <code>optional string command_id = 1;</code>
       */
      public Builder setCommandId(
          java.lang.String value) {
        copyOnWrite();
        instance.setCommandId(value);
        return this;
      }
      /**
       * <pre>
       * ID of the command that should be run.  i.e. "COM01" for Command #01.
       * </pre>
       *
       * <code>optional string command_id = 1;</code>
       */
      public Builder clearCommandId() {
        copyOnWrite();
        instance.clearCommandId();
        return this;
      }
      /**
       * <pre>
       * ID of the command that should be run.  i.e. "COM01" for Command #01.
       * </pre>
       *
       * <code>optional string command_id = 1;</code>
       */
      public Builder setCommandIdBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setCommandIdBytes(value);
        return this;
      }


      public int getParametersCount() {
        return instance.getParametersMap().size();
      }
      /**
       * <pre>
       * A generic map of parameters (name, value). The parameters are 
       * defined in the Diatheke model. Depending on the command, these
       * parameters should be sent back with the CommandStatus update.
       * </pre>
       *
       * <code>map&lt;string, string&gt; parameters = 2;</code>
       */

      public boolean containsParameters(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        return instance.getParametersMap().containsKey(key);
      }

      public Builder clearParameters() {
        copyOnWrite();
        instance.getMutableParametersMap().clear();
        return this;
      }
      /**
       * <pre>
       * A generic map of parameters (name, value). The parameters are 
       * defined in the Diatheke model. Depending on the command, these
       * parameters should be sent back with the CommandStatus update.
       * </pre>
       *
       * <code>map&lt;string, string&gt; parameters = 2;</code>
       */

      public Builder removeParameters(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        copyOnWrite();
        instance.getMutableParametersMap().remove(key);
        return this;
      }
      /**
       * Use {@link #getParametersMap()} instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String> getParameters() {
        return getParametersMap();
      }
      /**
       * <pre>
       * A generic map of parameters (name, value). The parameters are 
       * defined in the Diatheke model. Depending on the command, these
       * parameters should be sent back with the CommandStatus update.
       * </pre>
       *
       * <code>map&lt;string, string&gt; parameters = 2;</code>
       */
      public java.util.Map<java.lang.String, java.lang.String> getParametersMap() {
        return java.util.Collections.unmodifiableMap(
            instance.getParametersMap());
      }
      /**
       * <pre>
       * A generic map of parameters (name, value). The parameters are 
       * defined in the Diatheke model. Depending on the command, these
       * parameters should be sent back with the CommandStatus update.
       * </pre>
       *
       * <code>map&lt;string, string&gt; parameters = 2;</code>
       */

      public java.lang.String getParametersOrDefault(
          java.lang.String key,
          java.lang.String defaultValue) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.String> map =
            instance.getParametersMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       * A generic map of parameters (name, value). The parameters are 
       * defined in the Diatheke model. Depending on the command, these
       * parameters should be sent back with the CommandStatus update.
       * </pre>
       *
       * <code>map&lt;string, string&gt; parameters = 2;</code>
       */

      public java.lang.String getParametersOrThrow(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.String> map =
            instance.getParametersMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <pre>
       * A generic map of parameters (name, value). The parameters are 
       * defined in the Diatheke model. Depending on the command, these
       * parameters should be sent back with the CommandStatus update.
       * </pre>
       *
       * <code>map&lt;string, string&gt; parameters = 2;</code>
       */
      public Builder putParameters(
          java.lang.String key,
          java.lang.String value) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        if (value == null) { throw new java.lang.NullPointerException(); }
        copyOnWrite();
        instance.getMutableParametersMap().put(key, value);
        return this;
      }
      /**
       * <pre>
       * A generic map of parameters (name, value). The parameters are 
       * defined in the Diatheke model. Depending on the command, these
       * parameters should be sent back with the CommandStatus update.
       * </pre>
       *
       * <code>map&lt;string, string&gt; parameters = 2;</code>
       */
      public Builder putAllParameters(
          java.util.Map<java.lang.String, java.lang.String> values) {
        copyOnWrite();
        instance.getMutableParametersMap().putAll(values);
        return this;
      }

      /**
       * <pre>
       * ID to keep track of the dialog state when the command is requested.
       * This field is required in the CommandStatus message so that Diatheke
       * can correctly update the dialog state when CommandFinished is called.
       * </pre>
       *
       * <code>optional string command_state_id = 3;</code>
       */
      public java.lang.String getCommandStateId() {
        return instance.getCommandStateId();
      }
      /**
       * <pre>
       * ID to keep track of the dialog state when the command is requested.
       * This field is required in the CommandStatus message so that Diatheke
       * can correctly update the dialog state when CommandFinished is called.
       * </pre>
       *
       * <code>optional string command_state_id = 3;</code>
       */
      public com.google.protobuf.ByteString
          getCommandStateIdBytes() {
        return instance.getCommandStateIdBytes();
      }
      /**
       * <pre>
       * ID to keep track of the dialog state when the command is requested.
       * This field is required in the CommandStatus message so that Diatheke
       * can correctly update the dialog state when CommandFinished is called.
       * </pre>
       *
       * <code>optional string command_state_id = 3;</code>
       */
      public Builder setCommandStateId(
          java.lang.String value) {
        copyOnWrite();
        instance.setCommandStateId(value);
        return this;
      }
      /**
       * <pre>
       * ID to keep track of the dialog state when the command is requested.
       * This field is required in the CommandStatus message so that Diatheke
       * can correctly update the dialog state when CommandFinished is called.
       * </pre>
       *
       * <code>optional string command_state_id = 3;</code>
       */
      public Builder clearCommandStateId() {
        copyOnWrite();
        instance.clearCommandStateId();
        return this;
      }
      /**
       * <pre>
       * ID to keep track of the dialog state when the command is requested.
       * This field is required in the CommandStatus message so that Diatheke
       * can correctly update the dialog state when CommandFinished is called.
       * </pre>
       *
       * <code>optional string command_state_id = 3;</code>
       */
      public Builder setCommandStateIdBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setCommandStateIdBytes(value);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:cobaltspeech.diatheke.CommandEvent)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new cobaltspeech.diatheke.DiathekeOuterClass.CommandEvent();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          parameters_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          cobaltspeech.diatheke.DiathekeOuterClass.CommandEvent other = (cobaltspeech.diatheke.DiathekeOuterClass.CommandEvent) arg1;
          commandId_ = visitor.visitString(!commandId_.isEmpty(), commandId_,
              !other.commandId_.isEmpty(), other.commandId_);
          parameters_ = visitor.visitMap(
              parameters_, other.internalGetParameters());
          commandStateId_ = visitor.visitString(!commandStateId_.isEmpty(), commandStateId_,
              !other.commandStateId_.isEmpty(), other.commandStateId_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  String s = input.readStringRequireUtf8();

                  commandId_ = s;
                  break;
                }
                case 18: {
                  if (!parameters_.isMutable()) {
                    parameters_ = parameters_.mutableCopy();
                  }
                  ParametersDefaultEntryHolder.defaultEntry.parseInto(parameters_, input, extensionRegistry);  break;
                }
                case 26: {
                  String s = input.readStringRequireUtf8();

                  commandStateId_ = s;
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (cobaltspeech.diatheke.DiathekeOuterClass.CommandEvent.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:cobaltspeech.diatheke.CommandEvent)
    private static final cobaltspeech.diatheke.DiathekeOuterClass.CommandEvent DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new CommandEvent();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static cobaltspeech.diatheke.DiathekeOuterClass.CommandEvent getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<CommandEvent> PARSER;

    public static com.google.protobuf.Parser<CommandEvent> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface RecognizeEventOrBuilder extends
      // @@protoc_insertion_point(interface_extends:cobaltspeech.diatheke.RecognizeEvent)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * The pushed text or transcription of audio sent to Diatheke.
     * </pre>
     *
     * <code>optional string text = 1;</code>
     */
    java.lang.String getText();
    /**
     * <pre>
     * The pushed text or transcription of audio sent to Diatheke.
     * </pre>
     *
     * <code>optional string text = 1;</code>
     */
    com.google.protobuf.ByteString
        getTextBytes();

    /**
     * <pre>
     * True if the submitted text or audio transcription was recognized by the
     * Diatheke model as a valid intent or entity.
     * </pre>
     *
     * <code>optional bool valid_input = 2;</code>
     */
    boolean getValidInput();
  }
  /**
   * <pre>
   * A RecognizeEvent occurs if a session's audio input has a transcription
   * available, or if the PushText method was called. In both cases, the
   * event will indicate whether the text was recognized as a valid intent
   * by the Diatheke model.
   * </pre>
   *
   * Protobuf type {@code cobaltspeech.diatheke.RecognizeEvent}
   */
  public  static final class RecognizeEvent extends
      com.google.protobuf.GeneratedMessageLite<
          RecognizeEvent, RecognizeEvent.Builder> implements
      // @@protoc_insertion_point(message_implements:cobaltspeech.diatheke.RecognizeEvent)
      RecognizeEventOrBuilder {
    private RecognizeEvent() {
      text_ = "";
    }
    public static final int TEXT_FIELD_NUMBER = 1;
    private java.lang.String text_;
    /**
     * <pre>
     * The pushed text or transcription of audio sent to Diatheke.
     * </pre>
     *
     * <code>optional string text = 1;</code>
     */
    public java.lang.String getText() {
      return text_;
    }
    /**
     * <pre>
     * The pushed text or transcription of audio sent to Diatheke.
     * </pre>
     *
     * <code>optional string text = 1;</code>
     */
    public com.google.protobuf.ByteString
        getTextBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(text_);
    }
    /**
     * <pre>
     * The pushed text or transcription of audio sent to Diatheke.
     * </pre>
     *
     * <code>optional string text = 1;</code>
     */
    private void setText(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      text_ = value;
    }
    /**
     * <pre>
     * The pushed text or transcription of audio sent to Diatheke.
     * </pre>
     *
     * <code>optional string text = 1;</code>
     */
    private void clearText() {
      
      text_ = getDefaultInstance().getText();
    }
    /**
     * <pre>
     * The pushed text or transcription of audio sent to Diatheke.
     * </pre>
     *
     * <code>optional string text = 1;</code>
     */
    private void setTextBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      text_ = value.toStringUtf8();
    }

    public static final int VALID_INPUT_FIELD_NUMBER = 2;
    private boolean validInput_;
    /**
     * <pre>
     * True if the submitted text or audio transcription was recognized by the
     * Diatheke model as a valid intent or entity.
     * </pre>
     *
     * <code>optional bool valid_input = 2;</code>
     */
    public boolean getValidInput() {
      return validInput_;
    }
    /**
     * <pre>
     * True if the submitted text or audio transcription was recognized by the
     * Diatheke model as a valid intent or entity.
     * </pre>
     *
     * <code>optional bool valid_input = 2;</code>
     */
    private void setValidInput(boolean value) {
      
      validInput_ = value;
    }
    /**
     * <pre>
     * True if the submitted text or audio transcription was recognized by the
     * Diatheke model as a valid intent or entity.
     * </pre>
     *
     * <code>optional bool valid_input = 2;</code>
     */
    private void clearValidInput() {
      
      validInput_ = false;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!text_.isEmpty()) {
        output.writeString(1, getText());
      }
      if (validInput_ != false) {
        output.writeBool(2, validInput_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (!text_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getText());
      }
      if (validInput_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, validInput_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static cobaltspeech.diatheke.DiathekeOuterClass.RecognizeEvent parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.RecognizeEvent parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.RecognizeEvent parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.RecognizeEvent parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.RecognizeEvent parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.RecognizeEvent parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.RecognizeEvent parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.RecognizeEvent parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.RecognizeEvent parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.RecognizeEvent parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(cobaltspeech.diatheke.DiathekeOuterClass.RecognizeEvent prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * A RecognizeEvent occurs if a session's audio input has a transcription
     * available, or if the PushText method was called. In both cases, the
     * event will indicate whether the text was recognized as a valid intent
     * by the Diatheke model.
     * </pre>
     *
     * Protobuf type {@code cobaltspeech.diatheke.RecognizeEvent}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          cobaltspeech.diatheke.DiathekeOuterClass.RecognizeEvent, Builder> implements
        // @@protoc_insertion_point(builder_implements:cobaltspeech.diatheke.RecognizeEvent)
        cobaltspeech.diatheke.DiathekeOuterClass.RecognizeEventOrBuilder {
      // Construct using cobaltspeech.diatheke.DiathekeOuterClass.RecognizeEvent.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * The pushed text or transcription of audio sent to Diatheke.
       * </pre>
       *
       * <code>optional string text = 1;</code>
       */
      public java.lang.String getText() {
        return instance.getText();
      }
      /**
       * <pre>
       * The pushed text or transcription of audio sent to Diatheke.
       * </pre>
       *
       * <code>optional string text = 1;</code>
       */
      public com.google.protobuf.ByteString
          getTextBytes() {
        return instance.getTextBytes();
      }
      /**
       * <pre>
       * The pushed text or transcription of audio sent to Diatheke.
       * </pre>
       *
       * <code>optional string text = 1;</code>
       */
      public Builder setText(
          java.lang.String value) {
        copyOnWrite();
        instance.setText(value);
        return this;
      }
      /**
       * <pre>
       * The pushed text or transcription of audio sent to Diatheke.
       * </pre>
       *
       * <code>optional string text = 1;</code>
       */
      public Builder clearText() {
        copyOnWrite();
        instance.clearText();
        return this;
      }
      /**
       * <pre>
       * The pushed text or transcription of audio sent to Diatheke.
       * </pre>
       *
       * <code>optional string text = 1;</code>
       */
      public Builder setTextBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setTextBytes(value);
        return this;
      }

      /**
       * <pre>
       * True if the submitted text or audio transcription was recognized by the
       * Diatheke model as a valid intent or entity.
       * </pre>
       *
       * <code>optional bool valid_input = 2;</code>
       */
      public boolean getValidInput() {
        return instance.getValidInput();
      }
      /**
       * <pre>
       * True if the submitted text or audio transcription was recognized by the
       * Diatheke model as a valid intent or entity.
       * </pre>
       *
       * <code>optional bool valid_input = 2;</code>
       */
      public Builder setValidInput(boolean value) {
        copyOnWrite();
        instance.setValidInput(value);
        return this;
      }
      /**
       * <pre>
       * True if the submitted text or audio transcription was recognized by the
       * Diatheke model as a valid intent or entity.
       * </pre>
       *
       * <code>optional bool valid_input = 2;</code>
       */
      public Builder clearValidInput() {
        copyOnWrite();
        instance.clearValidInput();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:cobaltspeech.diatheke.RecognizeEvent)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new cobaltspeech.diatheke.DiathekeOuterClass.RecognizeEvent();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          cobaltspeech.diatheke.DiathekeOuterClass.RecognizeEvent other = (cobaltspeech.diatheke.DiathekeOuterClass.RecognizeEvent) arg1;
          text_ = visitor.visitString(!text_.isEmpty(), text_,
              !other.text_.isEmpty(), other.text_);
          validInput_ = visitor.visitBoolean(validInput_ != false, validInput_,
              other.validInput_ != false, other.validInput_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  String s = input.readStringRequireUtf8();

                  text_ = s;
                  break;
                }
                case 16: {

                  validInput_ = input.readBool();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (cobaltspeech.diatheke.DiathekeOuterClass.RecognizeEvent.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:cobaltspeech.diatheke.RecognizeEvent)
    private static final cobaltspeech.diatheke.DiathekeOuterClass.RecognizeEvent DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new RecognizeEvent();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static cobaltspeech.diatheke.DiathekeOuterClass.RecognizeEvent getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<RecognizeEvent> PARSER;

    public static com.google.protobuf.Parser<RecognizeEvent> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ReplyEventOrBuilder extends
      // @@protoc_insertion_point(interface_extends:cobaltspeech.diatheke.ReplyEvent)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * Text of the reply event (defined by the Diatheke model).
     * </pre>
     *
     * <code>optional string text = 1;</code>
     */
    java.lang.String getText();
    /**
     * <pre>
     * Text of the reply event (defined by the Diatheke model).
     * </pre>
     *
     * <code>optional string text = 1;</code>
     */
    com.google.protobuf.ByteString
        getTextBytes();

    /**
     * <pre>
     * Label of the reply event (defined by the Diatheke model).
     * </pre>
     *
     * <code>optional string label = 2;</code>
     */
    java.lang.String getLabel();
    /**
     * <pre>
     * Label of the reply event (defined by the Diatheke model).
     * </pre>
     *
     * <code>optional string label = 2;</code>
     */
    com.google.protobuf.ByteString
        getLabelBytes();
  }
  /**
   * <pre>
   * A ReplyEvent occurs when Diatheke has a reply in the conversation (not
   * to be confused with the server concepts of request and response). These
   * correspond to "say" entries in the Diatheke model. For example, it might
   * be a prompt for additional information from the user, a status update,
   * or a confirmation. ReplyEvents are not generated in response to 
   * StreamTTS calls.
   * </pre>
   *
   * Protobuf type {@code cobaltspeech.diatheke.ReplyEvent}
   */
  public  static final class ReplyEvent extends
      com.google.protobuf.GeneratedMessageLite<
          ReplyEvent, ReplyEvent.Builder> implements
      // @@protoc_insertion_point(message_implements:cobaltspeech.diatheke.ReplyEvent)
      ReplyEventOrBuilder {
    private ReplyEvent() {
      text_ = "";
      label_ = "";
    }
    public static final int TEXT_FIELD_NUMBER = 1;
    private java.lang.String text_;
    /**
     * <pre>
     * Text of the reply event (defined by the Diatheke model).
     * </pre>
     *
     * <code>optional string text = 1;</code>
     */
    public java.lang.String getText() {
      return text_;
    }
    /**
     * <pre>
     * Text of the reply event (defined by the Diatheke model).
     * </pre>
     *
     * <code>optional string text = 1;</code>
     */
    public com.google.protobuf.ByteString
        getTextBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(text_);
    }
    /**
     * <pre>
     * Text of the reply event (defined by the Diatheke model).
     * </pre>
     *
     * <code>optional string text = 1;</code>
     */
    private void setText(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      text_ = value;
    }
    /**
     * <pre>
     * Text of the reply event (defined by the Diatheke model).
     * </pre>
     *
     * <code>optional string text = 1;</code>
     */
    private void clearText() {
      
      text_ = getDefaultInstance().getText();
    }
    /**
     * <pre>
     * Text of the reply event (defined by the Diatheke model).
     * </pre>
     *
     * <code>optional string text = 1;</code>
     */
    private void setTextBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      text_ = value.toStringUtf8();
    }

    public static final int LABEL_FIELD_NUMBER = 2;
    private java.lang.String label_;
    /**
     * <pre>
     * Label of the reply event (defined by the Diatheke model).
     * </pre>
     *
     * <code>optional string label = 2;</code>
     */
    public java.lang.String getLabel() {
      return label_;
    }
    /**
     * <pre>
     * Label of the reply event (defined by the Diatheke model).
     * </pre>
     *
     * <code>optional string label = 2;</code>
     */
    public com.google.protobuf.ByteString
        getLabelBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(label_);
    }
    /**
     * <pre>
     * Label of the reply event (defined by the Diatheke model).
     * </pre>
     *
     * <code>optional string label = 2;</code>
     */
    private void setLabel(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      label_ = value;
    }
    /**
     * <pre>
     * Label of the reply event (defined by the Diatheke model).
     * </pre>
     *
     * <code>optional string label = 2;</code>
     */
    private void clearLabel() {
      
      label_ = getDefaultInstance().getLabel();
    }
    /**
     * <pre>
     * Label of the reply event (defined by the Diatheke model).
     * </pre>
     *
     * <code>optional string label = 2;</code>
     */
    private void setLabelBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      label_ = value.toStringUtf8();
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!text_.isEmpty()) {
        output.writeString(1, getText());
      }
      if (!label_.isEmpty()) {
        output.writeString(2, getLabel());
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (!text_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getText());
      }
      if (!label_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(2, getLabel());
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static cobaltspeech.diatheke.DiathekeOuterClass.ReplyEvent parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.ReplyEvent parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.ReplyEvent parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.ReplyEvent parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.ReplyEvent parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.ReplyEvent parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.ReplyEvent parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.ReplyEvent parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.ReplyEvent parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.ReplyEvent parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(cobaltspeech.diatheke.DiathekeOuterClass.ReplyEvent prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * A ReplyEvent occurs when Diatheke has a reply in the conversation (not
     * to be confused with the server concepts of request and response). These
     * correspond to "say" entries in the Diatheke model. For example, it might
     * be a prompt for additional information from the user, a status update,
     * or a confirmation. ReplyEvents are not generated in response to 
     * StreamTTS calls.
     * </pre>
     *
     * Protobuf type {@code cobaltspeech.diatheke.ReplyEvent}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          cobaltspeech.diatheke.DiathekeOuterClass.ReplyEvent, Builder> implements
        // @@protoc_insertion_point(builder_implements:cobaltspeech.diatheke.ReplyEvent)
        cobaltspeech.diatheke.DiathekeOuterClass.ReplyEventOrBuilder {
      // Construct using cobaltspeech.diatheke.DiathekeOuterClass.ReplyEvent.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * Text of the reply event (defined by the Diatheke model).
       * </pre>
       *
       * <code>optional string text = 1;</code>
       */
      public java.lang.String getText() {
        return instance.getText();
      }
      /**
       * <pre>
       * Text of the reply event (defined by the Diatheke model).
       * </pre>
       *
       * <code>optional string text = 1;</code>
       */
      public com.google.protobuf.ByteString
          getTextBytes() {
        return instance.getTextBytes();
      }
      /**
       * <pre>
       * Text of the reply event (defined by the Diatheke model).
       * </pre>
       *
       * <code>optional string text = 1;</code>
       */
      public Builder setText(
          java.lang.String value) {
        copyOnWrite();
        instance.setText(value);
        return this;
      }
      /**
       * <pre>
       * Text of the reply event (defined by the Diatheke model).
       * </pre>
       *
       * <code>optional string text = 1;</code>
       */
      public Builder clearText() {
        copyOnWrite();
        instance.clearText();
        return this;
      }
      /**
       * <pre>
       * Text of the reply event (defined by the Diatheke model).
       * </pre>
       *
       * <code>optional string text = 1;</code>
       */
      public Builder setTextBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setTextBytes(value);
        return this;
      }

      /**
       * <pre>
       * Label of the reply event (defined by the Diatheke model).
       * </pre>
       *
       * <code>optional string label = 2;</code>
       */
      public java.lang.String getLabel() {
        return instance.getLabel();
      }
      /**
       * <pre>
       * Label of the reply event (defined by the Diatheke model).
       * </pre>
       *
       * <code>optional string label = 2;</code>
       */
      public com.google.protobuf.ByteString
          getLabelBytes() {
        return instance.getLabelBytes();
      }
      /**
       * <pre>
       * Label of the reply event (defined by the Diatheke model).
       * </pre>
       *
       * <code>optional string label = 2;</code>
       */
      public Builder setLabel(
          java.lang.String value) {
        copyOnWrite();
        instance.setLabel(value);
        return this;
      }
      /**
       * <pre>
       * Label of the reply event (defined by the Diatheke model).
       * </pre>
       *
       * <code>optional string label = 2;</code>
       */
      public Builder clearLabel() {
        copyOnWrite();
        instance.clearLabel();
        return this;
      }
      /**
       * <pre>
       * Label of the reply event (defined by the Diatheke model).
       * </pre>
       *
       * <code>optional string label = 2;</code>
       */
      public Builder setLabelBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setLabelBytes(value);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:cobaltspeech.diatheke.ReplyEvent)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new cobaltspeech.diatheke.DiathekeOuterClass.ReplyEvent();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          cobaltspeech.diatheke.DiathekeOuterClass.ReplyEvent other = (cobaltspeech.diatheke.DiathekeOuterClass.ReplyEvent) arg1;
          text_ = visitor.visitString(!text_.isEmpty(), text_,
              !other.text_.isEmpty(), other.text_);
          label_ = visitor.visitString(!label_.isEmpty(), label_,
              !other.label_.isEmpty(), other.label_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  String s = input.readStringRequireUtf8();

                  text_ = s;
                  break;
                }
                case 18: {
                  String s = input.readStringRequireUtf8();

                  label_ = s;
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (cobaltspeech.diatheke.DiathekeOuterClass.ReplyEvent.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:cobaltspeech.diatheke.ReplyEvent)
    private static final cobaltspeech.diatheke.DiathekeOuterClass.ReplyEvent DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ReplyEvent();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static cobaltspeech.diatheke.DiathekeOuterClass.ReplyEvent getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<ReplyEvent> PARSER;

    public static com.google.protobuf.Parser<ReplyEvent> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface CommandStatusOrBuilder extends
      // @@protoc_insertion_point(interface_extends:cobaltspeech.diatheke.CommandStatus)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * session_id should be the same as the status id returned from
     * NewSessionResponse.
     * </pre>
     *
     * <code>optional string session_id = 1;</code>
     */
    java.lang.String getSessionId();
    /**
     * <pre>
     * session_id should be the same as the status id returned from
     * NewSessionResponse.
     * </pre>
     *
     * <code>optional string session_id = 1;</code>
     */
    com.google.protobuf.ByteString
        getSessionIdBytes();

    /**
     * <pre>
     * ID of the command as given in the RunCommand object.
     * </pre>
     *
     * <code>optional string command_id = 2;</code>
     */
    java.lang.String getCommandId();
    /**
     * <pre>
     * ID of the command as given in the RunCommand object.
     * </pre>
     *
     * <code>optional string command_id = 2;</code>
     */
    com.google.protobuf.ByteString
        getCommandIdBytes();

    /**
     * <code>optional .cobaltspeech.diatheke.CommandStatus.StatusCode return_status = 3;</code>
     */
    int getReturnStatusValue();
    /**
     * <code>optional .cobaltspeech.diatheke.CommandStatus.StatusCode return_status = 3;</code>
     */
    cobaltspeech.diatheke.DiathekeOuterClass.CommandStatus.StatusCode getReturnStatus();

    /**
     * <pre>
     * The populated output parameters from the RunCommand object. For example,
     * the map might contain the entry "temperature", which was populated with
     * a value of "30" after the command finished.
     * </pre>
     *
     * <code>map&lt;string, string&gt; output_parameters = 4;</code>
     */
    int getOutputParametersCount();
    /**
     * <pre>
     * The populated output parameters from the RunCommand object. For example,
     * the map might contain the entry "temperature", which was populated with
     * a value of "30" after the command finished.
     * </pre>
     *
     * <code>map&lt;string, string&gt; output_parameters = 4;</code>
     */
    boolean containsOutputParameters(
        java.lang.String key);
    /**
     * Use {@link #getOutputParametersMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.String>
    getOutputParameters();
    /**
     * <pre>
     * The populated output parameters from the RunCommand object. For example,
     * the map might contain the entry "temperature", which was populated with
     * a value of "30" after the command finished.
     * </pre>
     *
     * <code>map&lt;string, string&gt; output_parameters = 4;</code>
     */
    java.util.Map<java.lang.String, java.lang.String>
    getOutputParametersMap();
    /**
     * <pre>
     * The populated output parameters from the RunCommand object. For example,
     * the map might contain the entry "temperature", which was populated with
     * a value of "30" after the command finished.
     * </pre>
     *
     * <code>map&lt;string, string&gt; output_parameters = 4;</code>
     */

    java.lang.String getOutputParametersOrDefault(
        java.lang.String key,
        java.lang.String defaultValue);
    /**
     * <pre>
     * The populated output parameters from the RunCommand object. For example,
     * the map might contain the entry "temperature", which was populated with
     * a value of "30" after the command finished.
     * </pre>
     *
     * <code>map&lt;string, string&gt; output_parameters = 4;</code>
     */

    java.lang.String getOutputParametersOrThrow(
        java.lang.String key);

    /**
     * <pre>
     * Set this field with an error message if an a error occured while
     * executing the command.
     * </pre>
     *
     * <code>optional string error_message_text = 5;</code>
     */
    java.lang.String getErrorMessageText();
    /**
     * <pre>
     * Set this field with an error message if an a error occured while
     * executing the command.
     * </pre>
     *
     * <code>optional string error_message_text = 5;</code>
     */
    com.google.protobuf.ByteString
        getErrorMessageTextBytes();

    /**
     * <pre>
     * State ID from the original CommandEvent. This field is required for
     * Diatheke to correctly update the dialog state when CommandFinished 
     * is called.
     * </pre>
     *
     * <code>optional string command_state_id = 6;</code>
     */
    java.lang.String getCommandStateId();
    /**
     * <pre>
     * State ID from the original CommandEvent. This field is required for
     * Diatheke to correctly update the dialog state when CommandFinished 
     * is called.
     * </pre>
     *
     * <code>optional string command_state_id = 6;</code>
     */
    com.google.protobuf.ByteString
        getCommandStateIdBytes();
  }
  /**
   * <pre>
   * The final status of an executed command.
   * </pre>
   *
   * Protobuf type {@code cobaltspeech.diatheke.CommandStatus}
   */
  public  static final class CommandStatus extends
      com.google.protobuf.GeneratedMessageLite<
          CommandStatus, CommandStatus.Builder> implements
      // @@protoc_insertion_point(message_implements:cobaltspeech.diatheke.CommandStatus)
      CommandStatusOrBuilder {
    private CommandStatus() {
      sessionId_ = "";
      commandId_ = "";
      errorMessageText_ = "";
      commandStateId_ = "";
    }
    /**
     * <pre>
     * CommandStatus are the resulting states of a command.
     * </pre>
     *
     * Protobuf enum {@code cobaltspeech.diatheke.CommandStatus.StatusCode}
     */
    public enum StatusCode
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <pre>
       * SUCCESS indicates that the command was successfully completed, and the
       * dialog state may now move on to the next state.
       * </pre>
       *
       * <code>SUCCESS = 0;</code>
       */
      SUCCESS(0),
      /**
       * <pre>
       * FAILURE indicates that the command was not successfully completed, and
       * the dialog state should be updated accordingly.
       * </pre>
       *
       * <code>FAILURE = 1;</code>
       */
      FAILURE(1),
      UNRECOGNIZED(-1),
      ;

      /**
       * <pre>
       * SUCCESS indicates that the command was successfully completed, and the
       * dialog state may now move on to the next state.
       * </pre>
       *
       * <code>SUCCESS = 0;</code>
       */
      public static final int SUCCESS_VALUE = 0;
      /**
       * <pre>
       * FAILURE indicates that the command was not successfully completed, and
       * the dialog state should be updated accordingly.
       * </pre>
       *
       * <code>FAILURE = 1;</code>
       */
      public static final int FAILURE_VALUE = 1;


      public final int getNumber() {
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static StatusCode valueOf(int value) {
        return forNumber(value);
      }

      public static StatusCode forNumber(int value) {
        switch (value) {
          case 0: return SUCCESS;
          case 1: return FAILURE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<StatusCode>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          StatusCode> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<StatusCode>() {
              public StatusCode findValueByNumber(int number) {
                return StatusCode.forNumber(number);
              }
            };

      private final int value;

      private StatusCode(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:cobaltspeech.diatheke.CommandStatus.StatusCode)
    }

    private int bitField0_;
    public static final int SESSION_ID_FIELD_NUMBER = 1;
    private java.lang.String sessionId_;
    /**
     * <pre>
     * session_id should be the same as the status id returned from
     * NewSessionResponse.
     * </pre>
     *
     * <code>optional string session_id = 1;</code>
     */
    public java.lang.String getSessionId() {
      return sessionId_;
    }
    /**
     * <pre>
     * session_id should be the same as the status id returned from
     * NewSessionResponse.
     * </pre>
     *
     * <code>optional string session_id = 1;</code>
     */
    public com.google.protobuf.ByteString
        getSessionIdBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(sessionId_);
    }
    /**
     * <pre>
     * session_id should be the same as the status id returned from
     * NewSessionResponse.
     * </pre>
     *
     * <code>optional string session_id = 1;</code>
     */
    private void setSessionId(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      sessionId_ = value;
    }
    /**
     * <pre>
     * session_id should be the same as the status id returned from
     * NewSessionResponse.
     * </pre>
     *
     * <code>optional string session_id = 1;</code>
     */
    private void clearSessionId() {
      
      sessionId_ = getDefaultInstance().getSessionId();
    }
    /**
     * <pre>
     * session_id should be the same as the status id returned from
     * NewSessionResponse.
     * </pre>
     *
     * <code>optional string session_id = 1;</code>
     */
    private void setSessionIdBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      sessionId_ = value.toStringUtf8();
    }

    public static final int COMMAND_ID_FIELD_NUMBER = 2;
    private java.lang.String commandId_;
    /**
     * <pre>
     * ID of the command as given in the RunCommand object.
     * </pre>
     *
     * <code>optional string command_id = 2;</code>
     */
    public java.lang.String getCommandId() {
      return commandId_;
    }
    /**
     * <pre>
     * ID of the command as given in the RunCommand object.
     * </pre>
     *
     * <code>optional string command_id = 2;</code>
     */
    public com.google.protobuf.ByteString
        getCommandIdBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(commandId_);
    }
    /**
     * <pre>
     * ID of the command as given in the RunCommand object.
     * </pre>
     *
     * <code>optional string command_id = 2;</code>
     */
    private void setCommandId(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      commandId_ = value;
    }
    /**
     * <pre>
     * ID of the command as given in the RunCommand object.
     * </pre>
     *
     * <code>optional string command_id = 2;</code>
     */
    private void clearCommandId() {
      
      commandId_ = getDefaultInstance().getCommandId();
    }
    /**
     * <pre>
     * ID of the command as given in the RunCommand object.
     * </pre>
     *
     * <code>optional string command_id = 2;</code>
     */
    private void setCommandIdBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      commandId_ = value.toStringUtf8();
    }

    public static final int RETURN_STATUS_FIELD_NUMBER = 3;
    private int returnStatus_;
    /**
     * <code>optional .cobaltspeech.diatheke.CommandStatus.StatusCode return_status = 3;</code>
     */
    public int getReturnStatusValue() {
      return returnStatus_;
    }
    /**
     * <code>optional .cobaltspeech.diatheke.CommandStatus.StatusCode return_status = 3;</code>
     */
    public cobaltspeech.diatheke.DiathekeOuterClass.CommandStatus.StatusCode getReturnStatus() {
      cobaltspeech.diatheke.DiathekeOuterClass.CommandStatus.StatusCode result = cobaltspeech.diatheke.DiathekeOuterClass.CommandStatus.StatusCode.forNumber(returnStatus_);
      return result == null ? cobaltspeech.diatheke.DiathekeOuterClass.CommandStatus.StatusCode.UNRECOGNIZED : result;
    }
    /**
     * <code>optional .cobaltspeech.diatheke.CommandStatus.StatusCode return_status = 3;</code>
     */
    private void setReturnStatusValue(int value) {
        returnStatus_ = value;
    }
    /**
     * <code>optional .cobaltspeech.diatheke.CommandStatus.StatusCode return_status = 3;</code>
     */
    private void setReturnStatus(cobaltspeech.diatheke.DiathekeOuterClass.CommandStatus.StatusCode value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      returnStatus_ = value.getNumber();
    }
    /**
     * <code>optional .cobaltspeech.diatheke.CommandStatus.StatusCode return_status = 3;</code>
     */
    private void clearReturnStatus() {
      
      returnStatus_ = 0;
    }

    public static final int OUTPUT_PARAMETERS_FIELD_NUMBER = 4;
    private static final class OutputParametersDefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.String, java.lang.String> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.String, java.lang.String>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "");
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.String, java.lang.String> outputParameters_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.String, java.lang.String>
    internalGetOutputParameters() {
      return outputParameters_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.String, java.lang.String>
    internalGetMutableOutputParameters() {
      if (!outputParameters_.isMutable()) {
        outputParameters_ = outputParameters_.mutableCopy();
      }
      return outputParameters_;
    }

    public int getOutputParametersCount() {
      return internalGetOutputParameters().size();
    }
    /**
     * <pre>
     * The populated output parameters from the RunCommand object. For example,
     * the map might contain the entry "temperature", which was populated with
     * a value of "30" after the command finished.
     * </pre>
     *
     * <code>map&lt;string, string&gt; output_parameters = 4;</code>
     */

    public boolean containsOutputParameters(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return internalGetOutputParameters().containsKey(key);
    }
    /**
     * Use {@link #getOutputParametersMap()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getOutputParameters() {
      return getOutputParametersMap();
    }
    /**
     * <pre>
     * The populated output parameters from the RunCommand object. For example,
     * the map might contain the entry "temperature", which was populated with
     * a value of "30" after the command finished.
     * </pre>
     *
     * <code>map&lt;string, string&gt; output_parameters = 4;</code>
     */

    public java.util.Map<java.lang.String, java.lang.String> getOutputParametersMap() {
      return java.util.Collections.unmodifiableMap(
          internalGetOutputParameters());
    }
    /**
     * <pre>
     * The populated output parameters from the RunCommand object. For example,
     * the map might contain the entry "temperature", which was populated with
     * a value of "30" after the command finished.
     * </pre>
     *
     * <code>map&lt;string, string&gt; output_parameters = 4;</code>
     */

    public java.lang.String getOutputParametersOrDefault(
        java.lang.String key,
        java.lang.String defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetOutputParameters();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * The populated output parameters from the RunCommand object. For example,
     * the map might contain the entry "temperature", which was populated with
     * a value of "30" after the command finished.
     * </pre>
     *
     * <code>map&lt;string, string&gt; output_parameters = 4;</code>
     */

    public java.lang.String getOutputParametersOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetOutputParameters();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <pre>
     * The populated output parameters from the RunCommand object. For example,
     * the map might contain the entry "temperature", which was populated with
     * a value of "30" after the command finished.
     * </pre>
     *
     * <code>map&lt;string, string&gt; output_parameters = 4;</code>
     */
    private java.util.Map<java.lang.String, java.lang.String>
    getMutableOutputParametersMap() {
      return internalGetMutableOutputParameters();
    }

    public static final int ERROR_MESSAGE_TEXT_FIELD_NUMBER = 5;
    private java.lang.String errorMessageText_;
    /**
     * <pre>
     * Set this field with an error message if an a error occured while
     * executing the command.
     * </pre>
     *
     * <code>optional string error_message_text = 5;</code>
     */
    public java.lang.String getErrorMessageText() {
      return errorMessageText_;
    }
    /**
     * <pre>
     * Set this field with an error message if an a error occured while
     * executing the command.
     * </pre>
     *
     * <code>optional string error_message_text = 5;</code>
     */
    public com.google.protobuf.ByteString
        getErrorMessageTextBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(errorMessageText_);
    }
    /**
     * <pre>
     * Set this field with an error message if an a error occured while
     * executing the command.
     * </pre>
     *
     * <code>optional string error_message_text = 5;</code>
     */
    private void setErrorMessageText(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      errorMessageText_ = value;
    }
    /**
     * <pre>
     * Set this field with an error message if an a error occured while
     * executing the command.
     * </pre>
     *
     * <code>optional string error_message_text = 5;</code>
     */
    private void clearErrorMessageText() {
      
      errorMessageText_ = getDefaultInstance().getErrorMessageText();
    }
    /**
     * <pre>
     * Set this field with an error message if an a error occured while
     * executing the command.
     * </pre>
     *
     * <code>optional string error_message_text = 5;</code>
     */
    private void setErrorMessageTextBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      errorMessageText_ = value.toStringUtf8();
    }

    public static final int COMMAND_STATE_ID_FIELD_NUMBER = 6;
    private java.lang.String commandStateId_;
    /**
     * <pre>
     * State ID from the original CommandEvent. This field is required for
     * Diatheke to correctly update the dialog state when CommandFinished 
     * is called.
     * </pre>
     *
     * <code>optional string command_state_id = 6;</code>
     */
    public java.lang.String getCommandStateId() {
      return commandStateId_;
    }
    /**
     * <pre>
     * State ID from the original CommandEvent. This field is required for
     * Diatheke to correctly update the dialog state when CommandFinished 
     * is called.
     * </pre>
     *
     * <code>optional string command_state_id = 6;</code>
     */
    public com.google.protobuf.ByteString
        getCommandStateIdBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(commandStateId_);
    }
    /**
     * <pre>
     * State ID from the original CommandEvent. This field is required for
     * Diatheke to correctly update the dialog state when CommandFinished 
     * is called.
     * </pre>
     *
     * <code>optional string command_state_id = 6;</code>
     */
    private void setCommandStateId(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      commandStateId_ = value;
    }
    /**
     * <pre>
     * State ID from the original CommandEvent. This field is required for
     * Diatheke to correctly update the dialog state when CommandFinished 
     * is called.
     * </pre>
     *
     * <code>optional string command_state_id = 6;</code>
     */
    private void clearCommandStateId() {
      
      commandStateId_ = getDefaultInstance().getCommandStateId();
    }
    /**
     * <pre>
     * State ID from the original CommandEvent. This field is required for
     * Diatheke to correctly update the dialog state when CommandFinished 
     * is called.
     * </pre>
     *
     * <code>optional string command_state_id = 6;</code>
     */
    private void setCommandStateIdBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      commandStateId_ = value.toStringUtf8();
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!sessionId_.isEmpty()) {
        output.writeString(1, getSessionId());
      }
      if (!commandId_.isEmpty()) {
        output.writeString(2, getCommandId());
      }
      if (returnStatus_ != cobaltspeech.diatheke.DiathekeOuterClass.CommandStatus.StatusCode.SUCCESS.getNumber()) {
        output.writeEnum(3, returnStatus_);
      }
      for (java.util.Map.Entry<java.lang.String, java.lang.String> entry
           : internalGetOutputParameters().entrySet()) {
        OutputParametersDefaultEntryHolder.defaultEntry.serializeTo(
            output, 4, entry.getKey(), entry.getValue());
      }
      if (!errorMessageText_.isEmpty()) {
        output.writeString(5, getErrorMessageText());
      }
      if (!commandStateId_.isEmpty()) {
        output.writeString(6, getCommandStateId());
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (!sessionId_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getSessionId());
      }
      if (!commandId_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(2, getCommandId());
      }
      if (returnStatus_ != cobaltspeech.diatheke.DiathekeOuterClass.CommandStatus.StatusCode.SUCCESS.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, returnStatus_);
      }
      for (java.util.Map.Entry<java.lang.String, java.lang.String> entry
           : internalGetOutputParameters().entrySet()) {
        size += OutputParametersDefaultEntryHolder.defaultEntry.computeMessageSize(
          4, entry.getKey(), entry.getValue());
      }
      if (!errorMessageText_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(5, getErrorMessageText());
      }
      if (!commandStateId_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(6, getCommandStateId());
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static cobaltspeech.diatheke.DiathekeOuterClass.CommandStatus parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.CommandStatus parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.CommandStatus parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.CommandStatus parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.CommandStatus parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.CommandStatus parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.CommandStatus parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.CommandStatus parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.CommandStatus parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.CommandStatus parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(cobaltspeech.diatheke.DiathekeOuterClass.CommandStatus prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * The final status of an executed command.
     * </pre>
     *
     * Protobuf type {@code cobaltspeech.diatheke.CommandStatus}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          cobaltspeech.diatheke.DiathekeOuterClass.CommandStatus, Builder> implements
        // @@protoc_insertion_point(builder_implements:cobaltspeech.diatheke.CommandStatus)
        cobaltspeech.diatheke.DiathekeOuterClass.CommandStatusOrBuilder {
      // Construct using cobaltspeech.diatheke.DiathekeOuterClass.CommandStatus.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * session_id should be the same as the status id returned from
       * NewSessionResponse.
       * </pre>
       *
       * <code>optional string session_id = 1;</code>
       */
      public java.lang.String getSessionId() {
        return instance.getSessionId();
      }
      /**
       * <pre>
       * session_id should be the same as the status id returned from
       * NewSessionResponse.
       * </pre>
       *
       * <code>optional string session_id = 1;</code>
       */
      public com.google.protobuf.ByteString
          getSessionIdBytes() {
        return instance.getSessionIdBytes();
      }
      /**
       * <pre>
       * session_id should be the same as the status id returned from
       * NewSessionResponse.
       * </pre>
       *
       * <code>optional string session_id = 1;</code>
       */
      public Builder setSessionId(
          java.lang.String value) {
        copyOnWrite();
        instance.setSessionId(value);
        return this;
      }
      /**
       * <pre>
       * session_id should be the same as the status id returned from
       * NewSessionResponse.
       * </pre>
       *
       * <code>optional string session_id = 1;</code>
       */
      public Builder clearSessionId() {
        copyOnWrite();
        instance.clearSessionId();
        return this;
      }
      /**
       * <pre>
       * session_id should be the same as the status id returned from
       * NewSessionResponse.
       * </pre>
       *
       * <code>optional string session_id = 1;</code>
       */
      public Builder setSessionIdBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setSessionIdBytes(value);
        return this;
      }

      /**
       * <pre>
       * ID of the command as given in the RunCommand object.
       * </pre>
       *
       * <code>optional string command_id = 2;</code>
       */
      public java.lang.String getCommandId() {
        return instance.getCommandId();
      }
      /**
       * <pre>
       * ID of the command as given in the RunCommand object.
       * </pre>
       *
       * <code>optional string command_id = 2;</code>
       */
      public com.google.protobuf.ByteString
          getCommandIdBytes() {
        return instance.getCommandIdBytes();
      }
      /**
       * <pre>
       * ID of the command as given in the RunCommand object.
       * </pre>
       *
       * <code>optional string command_id = 2;</code>
       */
      public Builder setCommandId(
          java.lang.String value) {
        copyOnWrite();
        instance.setCommandId(value);
        return this;
      }
      /**
       * <pre>
       * ID of the command as given in the RunCommand object.
       * </pre>
       *
       * <code>optional string command_id = 2;</code>
       */
      public Builder clearCommandId() {
        copyOnWrite();
        instance.clearCommandId();
        return this;
      }
      /**
       * <pre>
       * ID of the command as given in the RunCommand object.
       * </pre>
       *
       * <code>optional string command_id = 2;</code>
       */
      public Builder setCommandIdBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setCommandIdBytes(value);
        return this;
      }

      /**
       * <code>optional .cobaltspeech.diatheke.CommandStatus.StatusCode return_status = 3;</code>
       */
      public int getReturnStatusValue() {
        return instance.getReturnStatusValue();
      }
      /**
       * <code>optional .cobaltspeech.diatheke.CommandStatus.StatusCode return_status = 3;</code>
       */
      public Builder setReturnStatusValue(int value) {
        copyOnWrite();
        instance.setReturnStatusValue(value);
        return this;
      }
      /**
       * <code>optional .cobaltspeech.diatheke.CommandStatus.StatusCode return_status = 3;</code>
       */
      public cobaltspeech.diatheke.DiathekeOuterClass.CommandStatus.StatusCode getReturnStatus() {
        return instance.getReturnStatus();
      }
      /**
       * <code>optional .cobaltspeech.diatheke.CommandStatus.StatusCode return_status = 3;</code>
       */
      public Builder setReturnStatus(cobaltspeech.diatheke.DiathekeOuterClass.CommandStatus.StatusCode value) {
        copyOnWrite();
        instance.setReturnStatus(value);
        return this;
      }
      /**
       * <code>optional .cobaltspeech.diatheke.CommandStatus.StatusCode return_status = 3;</code>
       */
      public Builder clearReturnStatus() {
        copyOnWrite();
        instance.clearReturnStatus();
        return this;
      }


      public int getOutputParametersCount() {
        return instance.getOutputParametersMap().size();
      }
      /**
       * <pre>
       * The populated output parameters from the RunCommand object. For example,
       * the map might contain the entry "temperature", which was populated with
       * a value of "30" after the command finished.
       * </pre>
       *
       * <code>map&lt;string, string&gt; output_parameters = 4;</code>
       */

      public boolean containsOutputParameters(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        return instance.getOutputParametersMap().containsKey(key);
      }

      public Builder clearOutputParameters() {
        copyOnWrite();
        instance.getMutableOutputParametersMap().clear();
        return this;
      }
      /**
       * <pre>
       * The populated output parameters from the RunCommand object. For example,
       * the map might contain the entry "temperature", which was populated with
       * a value of "30" after the command finished.
       * </pre>
       *
       * <code>map&lt;string, string&gt; output_parameters = 4;</code>
       */

      public Builder removeOutputParameters(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        copyOnWrite();
        instance.getMutableOutputParametersMap().remove(key);
        return this;
      }
      /**
       * Use {@link #getOutputParametersMap()} instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String> getOutputParameters() {
        return getOutputParametersMap();
      }
      /**
       * <pre>
       * The populated output parameters from the RunCommand object. For example,
       * the map might contain the entry "temperature", which was populated with
       * a value of "30" after the command finished.
       * </pre>
       *
       * <code>map&lt;string, string&gt; output_parameters = 4;</code>
       */
      public java.util.Map<java.lang.String, java.lang.String> getOutputParametersMap() {
        return java.util.Collections.unmodifiableMap(
            instance.getOutputParametersMap());
      }
      /**
       * <pre>
       * The populated output parameters from the RunCommand object. For example,
       * the map might contain the entry "temperature", which was populated with
       * a value of "30" after the command finished.
       * </pre>
       *
       * <code>map&lt;string, string&gt; output_parameters = 4;</code>
       */

      public java.lang.String getOutputParametersOrDefault(
          java.lang.String key,
          java.lang.String defaultValue) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.String> map =
            instance.getOutputParametersMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       * The populated output parameters from the RunCommand object. For example,
       * the map might contain the entry "temperature", which was populated with
       * a value of "30" after the command finished.
       * </pre>
       *
       * <code>map&lt;string, string&gt; output_parameters = 4;</code>
       */

      public java.lang.String getOutputParametersOrThrow(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.String> map =
            instance.getOutputParametersMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <pre>
       * The populated output parameters from the RunCommand object. For example,
       * the map might contain the entry "temperature", which was populated with
       * a value of "30" after the command finished.
       * </pre>
       *
       * <code>map&lt;string, string&gt; output_parameters = 4;</code>
       */
      public Builder putOutputParameters(
          java.lang.String key,
          java.lang.String value) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        if (value == null) { throw new java.lang.NullPointerException(); }
        copyOnWrite();
        instance.getMutableOutputParametersMap().put(key, value);
        return this;
      }
      /**
       * <pre>
       * The populated output parameters from the RunCommand object. For example,
       * the map might contain the entry "temperature", which was populated with
       * a value of "30" after the command finished.
       * </pre>
       *
       * <code>map&lt;string, string&gt; output_parameters = 4;</code>
       */
      public Builder putAllOutputParameters(
          java.util.Map<java.lang.String, java.lang.String> values) {
        copyOnWrite();
        instance.getMutableOutputParametersMap().putAll(values);
        return this;
      }

      /**
       * <pre>
       * Set this field with an error message if an a error occured while
       * executing the command.
       * </pre>
       *
       * <code>optional string error_message_text = 5;</code>
       */
      public java.lang.String getErrorMessageText() {
        return instance.getErrorMessageText();
      }
      /**
       * <pre>
       * Set this field with an error message if an a error occured while
       * executing the command.
       * </pre>
       *
       * <code>optional string error_message_text = 5;</code>
       */
      public com.google.protobuf.ByteString
          getErrorMessageTextBytes() {
        return instance.getErrorMessageTextBytes();
      }
      /**
       * <pre>
       * Set this field with an error message if an a error occured while
       * executing the command.
       * </pre>
       *
       * <code>optional string error_message_text = 5;</code>
       */
      public Builder setErrorMessageText(
          java.lang.String value) {
        copyOnWrite();
        instance.setErrorMessageText(value);
        return this;
      }
      /**
       * <pre>
       * Set this field with an error message if an a error occured while
       * executing the command.
       * </pre>
       *
       * <code>optional string error_message_text = 5;</code>
       */
      public Builder clearErrorMessageText() {
        copyOnWrite();
        instance.clearErrorMessageText();
        return this;
      }
      /**
       * <pre>
       * Set this field with an error message if an a error occured while
       * executing the command.
       * </pre>
       *
       * <code>optional string error_message_text = 5;</code>
       */
      public Builder setErrorMessageTextBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setErrorMessageTextBytes(value);
        return this;
      }

      /**
       * <pre>
       * State ID from the original CommandEvent. This field is required for
       * Diatheke to correctly update the dialog state when CommandFinished 
       * is called.
       * </pre>
       *
       * <code>optional string command_state_id = 6;</code>
       */
      public java.lang.String getCommandStateId() {
        return instance.getCommandStateId();
      }
      /**
       * <pre>
       * State ID from the original CommandEvent. This field is required for
       * Diatheke to correctly update the dialog state when CommandFinished 
       * is called.
       * </pre>
       *
       * <code>optional string command_state_id = 6;</code>
       */
      public com.google.protobuf.ByteString
          getCommandStateIdBytes() {
        return instance.getCommandStateIdBytes();
      }
      /**
       * <pre>
       * State ID from the original CommandEvent. This field is required for
       * Diatheke to correctly update the dialog state when CommandFinished 
       * is called.
       * </pre>
       *
       * <code>optional string command_state_id = 6;</code>
       */
      public Builder setCommandStateId(
          java.lang.String value) {
        copyOnWrite();
        instance.setCommandStateId(value);
        return this;
      }
      /**
       * <pre>
       * State ID from the original CommandEvent. This field is required for
       * Diatheke to correctly update the dialog state when CommandFinished 
       * is called.
       * </pre>
       *
       * <code>optional string command_state_id = 6;</code>
       */
      public Builder clearCommandStateId() {
        copyOnWrite();
        instance.clearCommandStateId();
        return this;
      }
      /**
       * <pre>
       * State ID from the original CommandEvent. This field is required for
       * Diatheke to correctly update the dialog state when CommandFinished 
       * is called.
       * </pre>
       *
       * <code>optional string command_state_id = 6;</code>
       */
      public Builder setCommandStateIdBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setCommandStateIdBytes(value);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:cobaltspeech.diatheke.CommandStatus)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new cobaltspeech.diatheke.DiathekeOuterClass.CommandStatus();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          outputParameters_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          cobaltspeech.diatheke.DiathekeOuterClass.CommandStatus other = (cobaltspeech.diatheke.DiathekeOuterClass.CommandStatus) arg1;
          sessionId_ = visitor.visitString(!sessionId_.isEmpty(), sessionId_,
              !other.sessionId_.isEmpty(), other.sessionId_);
          commandId_ = visitor.visitString(!commandId_.isEmpty(), commandId_,
              !other.commandId_.isEmpty(), other.commandId_);
          returnStatus_ = visitor.visitInt(returnStatus_ != 0, returnStatus_,    other.returnStatus_ != 0, other.returnStatus_);
          outputParameters_ = visitor.visitMap(
              outputParameters_, other.internalGetOutputParameters());
          errorMessageText_ = visitor.visitString(!errorMessageText_.isEmpty(), errorMessageText_,
              !other.errorMessageText_.isEmpty(), other.errorMessageText_);
          commandStateId_ = visitor.visitString(!commandStateId_.isEmpty(), commandStateId_,
              !other.commandStateId_.isEmpty(), other.commandStateId_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  String s = input.readStringRequireUtf8();

                  sessionId_ = s;
                  break;
                }
                case 18: {
                  String s = input.readStringRequireUtf8();

                  commandId_ = s;
                  break;
                }
                case 24: {
                  int rawValue = input.readEnum();

                  returnStatus_ = rawValue;
                  break;
                }
                case 34: {
                  if (!outputParameters_.isMutable()) {
                    outputParameters_ = outputParameters_.mutableCopy();
                  }
                  OutputParametersDefaultEntryHolder.defaultEntry.parseInto(outputParameters_, input, extensionRegistry);  break;
                }
                case 42: {
                  String s = input.readStringRequireUtf8();

                  errorMessageText_ = s;
                  break;
                }
                case 50: {
                  String s = input.readStringRequireUtf8();

                  commandStateId_ = s;
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (cobaltspeech.diatheke.DiathekeOuterClass.CommandStatus.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:cobaltspeech.diatheke.CommandStatus)
    private static final cobaltspeech.diatheke.DiathekeOuterClass.CommandStatus DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new CommandStatus();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static cobaltspeech.diatheke.DiathekeOuterClass.CommandStatus getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<CommandStatus> PARSER;

    public static com.google.protobuf.Parser<CommandStatus> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface AudioInputOrBuilder extends
      // @@protoc_insertion_point(interface_extends:cobaltspeech.diatheke.AudioInput)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * Session ID returned from the NewSession call.
     * </pre>
     *
     * <code>optional string session_id = 1;</code>
     */
    java.lang.String getSessionId();
    /**
     * <pre>
     * Session ID returned from the NewSession call.
     * </pre>
     *
     * <code>optional string session_id = 1;</code>
     */
    com.google.protobuf.ByteString
        getSessionIdBytes();

    /**
     * <pre>
     * Audio data to process. The encoding of the data should match what
     * was specified in the Diatheke server configuration.
     * NOTE: If the audio data is empty, the server may interpret it as
     *       the end of the stream and stop accepting further messages.
     * </pre>
     *
     * <code>optional bytes data = 2;</code>
     */
    com.google.protobuf.ByteString getData();

    public cobaltspeech.diatheke.DiathekeOuterClass.AudioInput.RequestCase getRequestCase();
  }
  /**
   * <pre>
   * Provides input audio data for StreamAudioInput. The first message
   * sent must contain the session ID only. All subsequent messages
   * must contain audio data only.
   * </pre>
   *
   * Protobuf type {@code cobaltspeech.diatheke.AudioInput}
   */
  public  static final class AudioInput extends
      com.google.protobuf.GeneratedMessageLite<
          AudioInput, AudioInput.Builder> implements
      // @@protoc_insertion_point(message_implements:cobaltspeech.diatheke.AudioInput)
      AudioInputOrBuilder {
    private AudioInput() {
    }
    private int requestCase_ = 0;
    private java.lang.Object request_;
    public enum RequestCase
        implements com.google.protobuf.Internal.EnumLite {
      SESSION_ID(1),
      DATA(2),
      REQUEST_NOT_SET(0);
      private final int value;
      private RequestCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static RequestCase valueOf(int value) {
        return forNumber(value);
      }

      public static RequestCase forNumber(int value) {
        switch (value) {
          case 1: return SESSION_ID;
          case 2: return DATA;
          case 0: return REQUEST_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public RequestCase
    getRequestCase() {
      return RequestCase.forNumber(
          requestCase_);
    }

    private void clearRequest() {
      requestCase_ = 0;
      request_ = null;
    }

    public static final int SESSION_ID_FIELD_NUMBER = 1;
    /**
     * <pre>
     * Session ID returned from the NewSession call.
     * </pre>
     *
     * <code>optional string session_id = 1;</code>
     */
    public java.lang.String getSessionId() {
      java.lang.String ref = "";
      if (requestCase_ == 1) {
        ref = (java.lang.String) request_;
      }
      return ref;
    }
    /**
     * <pre>
     * Session ID returned from the NewSession call.
     * </pre>
     *
     * <code>optional string session_id = 1;</code>
     */
    public com.google.protobuf.ByteString
        getSessionIdBytes() {
      java.lang.String ref = "";
      if (requestCase_ == 1) {
        ref = (java.lang.String) request_;
      }
      return com.google.protobuf.ByteString.copyFromUtf8(ref);
    }
    /**
     * <pre>
     * Session ID returned from the NewSession call.
     * </pre>
     *
     * <code>optional string session_id = 1;</code>
     */
    private void setSessionId(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  requestCase_ = 1;
      request_ = value;
    }
    /**
     * <pre>
     * Session ID returned from the NewSession call.
     * </pre>
     *
     * <code>optional string session_id = 1;</code>
     */
    private void clearSessionId() {
      if (requestCase_ == 1) {
        requestCase_ = 0;
        request_ = null;
      }
    }
    /**
     * <pre>
     * Session ID returned from the NewSession call.
     * </pre>
     *
     * <code>optional string session_id = 1;</code>
     */
    private void setSessionIdBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      requestCase_ = 1;
      request_ = value.toStringUtf8();
    }

    public static final int DATA_FIELD_NUMBER = 2;
    /**
     * <pre>
     * Audio data to process. The encoding of the data should match what
     * was specified in the Diatheke server configuration.
     * NOTE: If the audio data is empty, the server may interpret it as
     *       the end of the stream and stop accepting further messages.
     * </pre>
     *
     * <code>optional bytes data = 2;</code>
     */
    public com.google.protobuf.ByteString getData() {
      if (requestCase_ == 2) {
        return (com.google.protobuf.ByteString) request_;
      }
      return com.google.protobuf.ByteString.EMPTY;
    }
    /**
     * <pre>
     * Audio data to process. The encoding of the data should match what
     * was specified in the Diatheke server configuration.
     * NOTE: If the audio data is empty, the server may interpret it as
     *       the end of the stream and stop accepting further messages.
     * </pre>
     *
     * <code>optional bytes data = 2;</code>
     */
    private void setData(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  requestCase_ = 2;
      request_ = value;
    }
    /**
     * <pre>
     * Audio data to process. The encoding of the data should match what
     * was specified in the Diatheke server configuration.
     * NOTE: If the audio data is empty, the server may interpret it as
     *       the end of the stream and stop accepting further messages.
     * </pre>
     *
     * <code>optional bytes data = 2;</code>
     */
    private void clearData() {
      if (requestCase_ == 2) {
        requestCase_ = 0;
        request_ = null;
      }
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (requestCase_ == 1) {
        output.writeString(1, getSessionId());
      }
      if (requestCase_ == 2) {
        output.writeBytes(
            2, (com.google.protobuf.ByteString)((com.google.protobuf.ByteString) request_));
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (requestCase_ == 1) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getSessionId());
      }
      if (requestCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(
              2, (com.google.protobuf.ByteString)((com.google.protobuf.ByteString) request_));
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static cobaltspeech.diatheke.DiathekeOuterClass.AudioInput parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.AudioInput parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.AudioInput parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.AudioInput parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.AudioInput parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.AudioInput parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.AudioInput parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.AudioInput parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.AudioInput parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.AudioInput parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(cobaltspeech.diatheke.DiathekeOuterClass.AudioInput prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * Provides input audio data for StreamAudioInput. The first message
     * sent must contain the session ID only. All subsequent messages
     * must contain audio data only.
     * </pre>
     *
     * Protobuf type {@code cobaltspeech.diatheke.AudioInput}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          cobaltspeech.diatheke.DiathekeOuterClass.AudioInput, Builder> implements
        // @@protoc_insertion_point(builder_implements:cobaltspeech.diatheke.AudioInput)
        cobaltspeech.diatheke.DiathekeOuterClass.AudioInputOrBuilder {
      // Construct using cobaltspeech.diatheke.DiathekeOuterClass.AudioInput.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }

      public RequestCase
          getRequestCase() {
        return instance.getRequestCase();
      }

      public Builder clearRequest() {
        copyOnWrite();
        instance.clearRequest();
        return this;
      }


      /**
       * <pre>
       * Session ID returned from the NewSession call.
       * </pre>
       *
       * <code>optional string session_id = 1;</code>
       */
      public java.lang.String getSessionId() {
        return instance.getSessionId();
      }
      /**
       * <pre>
       * Session ID returned from the NewSession call.
       * </pre>
       *
       * <code>optional string session_id = 1;</code>
       */
      public com.google.protobuf.ByteString
          getSessionIdBytes() {
        return instance.getSessionIdBytes();
      }
      /**
       * <pre>
       * Session ID returned from the NewSession call.
       * </pre>
       *
       * <code>optional string session_id = 1;</code>
       */
      public Builder setSessionId(
          java.lang.String value) {
        copyOnWrite();
        instance.setSessionId(value);
        return this;
      }
      /**
       * <pre>
       * Session ID returned from the NewSession call.
       * </pre>
       *
       * <code>optional string session_id = 1;</code>
       */
      public Builder clearSessionId() {
        copyOnWrite();
        instance.clearSessionId();
        return this;
      }
      /**
       * <pre>
       * Session ID returned from the NewSession call.
       * </pre>
       *
       * <code>optional string session_id = 1;</code>
       */
      public Builder setSessionIdBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setSessionIdBytes(value);
        return this;
      }

      /**
       * <pre>
       * Audio data to process. The encoding of the data should match what
       * was specified in the Diatheke server configuration.
       * NOTE: If the audio data is empty, the server may interpret it as
       *       the end of the stream and stop accepting further messages.
       * </pre>
       *
       * <code>optional bytes data = 2;</code>
       */
      public com.google.protobuf.ByteString getData() {
        return instance.getData();
      }
      /**
       * <pre>
       * Audio data to process. The encoding of the data should match what
       * was specified in the Diatheke server configuration.
       * NOTE: If the audio data is empty, the server may interpret it as
       *       the end of the stream and stop accepting further messages.
       * </pre>
       *
       * <code>optional bytes data = 2;</code>
       */
      public Builder setData(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setData(value);
        return this;
      }
      /**
       * <pre>
       * Audio data to process. The encoding of the data should match what
       * was specified in the Diatheke server configuration.
       * NOTE: If the audio data is empty, the server may interpret it as
       *       the end of the stream and stop accepting further messages.
       * </pre>
       *
       * <code>optional bytes data = 2;</code>
       */
      public Builder clearData() {
        copyOnWrite();
        instance.clearData();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:cobaltspeech.diatheke.AudioInput)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new cobaltspeech.diatheke.DiathekeOuterClass.AudioInput();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          cobaltspeech.diatheke.DiathekeOuterClass.AudioInput other = (cobaltspeech.diatheke.DiathekeOuterClass.AudioInput) arg1;
          switch (other.getRequestCase()) {
            case SESSION_ID: {
              request_ = visitor.visitOneofString(
                 requestCase_ == 1, request_, other.request_);
              break;
            }
            case DATA: {
              request_ = visitor.visitOneofByteString(
                  requestCase_ == 2, request_, other.request_);
              break;
            }
            case REQUEST_NOT_SET: {
              visitor.visitOneofNotSet(requestCase_ != 0);
              break;
            }
          }
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            if (other.requestCase_ != 0) {
              requestCase_ = other.requestCase_;
            }
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  String s = input.readStringRequireUtf8();
                  requestCase_ = 1;
                  request_ = s;
                  break;
                }
                case 18: {
                  requestCase_ = 2;
                  request_ = input.readBytes();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (cobaltspeech.diatheke.DiathekeOuterClass.AudioInput.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:cobaltspeech.diatheke.AudioInput)
    private static final cobaltspeech.diatheke.DiathekeOuterClass.AudioInput DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new AudioInput();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static cobaltspeech.diatheke.DiathekeOuterClass.AudioInput getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<AudioInput> PARSER;

    public static com.google.protobuf.Parser<AudioInput> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface AudioReplyOrBuilder extends
      // @@protoc_insertion_point(interface_extends:cobaltspeech.diatheke.AudioReply)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * The label defined in the Diatheke model. Identifies which "say" entry
     * in the model this message corresponds to.
     * </pre>
     *
     * <code>optional string label = 1;</code>
     */
    java.lang.String getLabel();
    /**
     * <pre>
     * The label defined in the Diatheke model. Identifies which "say" entry
     * in the model this message corresponds to.
     * </pre>
     *
     * <code>optional string label = 1;</code>
     */
    com.google.protobuf.ByteString
        getLabelBytes();

    /**
     * <pre>
     * The reply text as defined in the Diatheke model. This is the first
     * message that will be received for an AudioReply. It contains the
     * same text as the corresponding ReplyEvent in the session's event
     * stream.
     * </pre>
     *
     * <code>optional string text = 2;</code>
     */
    java.lang.String getText();
    /**
     * <pre>
     * The reply text as defined in the Diatheke model. This is the first
     * message that will be received for an AudioReply. It contains the
     * same text as the corresponding ReplyEvent in the session's event
     * stream.
     * </pre>
     *
     * <code>optional string text = 2;</code>
     */
    com.google.protobuf.ByteString
        getTextBytes();

    /**
     * <pre>
     * The audio data from TTS. There can be any number of these messages
     * for an AudioReply after the first text message and before the final
     * end message. The encoding of the data will match what was specified
     * in the server configuration.
     * </pre>
     *
     * <code>optional bytes data = 3;</code>
     */
    com.google.protobuf.ByteString getData();

    /**
     * <pre>
     * Indicates that TTS has finished streaming audio for the reply. This
     * is the last message that will be received for an AudioReply.
     * </pre>
     *
     * <code>optional .cobaltspeech.diatheke.Empty end = 4;</code>
     */
    cobaltspeech.diatheke.DiathekeOuterClass.Empty getEnd();

    public cobaltspeech.diatheke.DiathekeOuterClass.AudioReply.OutputMessageCase getOutputMessageCase();
  }
  /**
   * <pre>
   * An AudioReply is the verbal and textual reply that Diatheke returns as
   * part of a conversation (not to be confused with the server concepts of
   * request and response).
   * </pre>
   *
   * Protobuf type {@code cobaltspeech.diatheke.AudioReply}
   */
  public  static final class AudioReply extends
      com.google.protobuf.GeneratedMessageLite<
          AudioReply, AudioReply.Builder> implements
      // @@protoc_insertion_point(message_implements:cobaltspeech.diatheke.AudioReply)
      AudioReplyOrBuilder {
    private AudioReply() {
      label_ = "";
    }
    private int outputMessageCase_ = 0;
    private java.lang.Object outputMessage_;
    public enum OutputMessageCase
        implements com.google.protobuf.Internal.EnumLite {
      TEXT(2),
      DATA(3),
      END(4),
      OUTPUTMESSAGE_NOT_SET(0);
      private final int value;
      private OutputMessageCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static OutputMessageCase valueOf(int value) {
        return forNumber(value);
      }

      public static OutputMessageCase forNumber(int value) {
        switch (value) {
          case 2: return TEXT;
          case 3: return DATA;
          case 4: return END;
          case 0: return OUTPUTMESSAGE_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public OutputMessageCase
    getOutputMessageCase() {
      return OutputMessageCase.forNumber(
          outputMessageCase_);
    }

    private void clearOutputMessage() {
      outputMessageCase_ = 0;
      outputMessage_ = null;
    }

    public static final int LABEL_FIELD_NUMBER = 1;
    private java.lang.String label_;
    /**
     * <pre>
     * The label defined in the Diatheke model. Identifies which "say" entry
     * in the model this message corresponds to.
     * </pre>
     *
     * <code>optional string label = 1;</code>
     */
    public java.lang.String getLabel() {
      return label_;
    }
    /**
     * <pre>
     * The label defined in the Diatheke model. Identifies which "say" entry
     * in the model this message corresponds to.
     * </pre>
     *
     * <code>optional string label = 1;</code>
     */
    public com.google.protobuf.ByteString
        getLabelBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(label_);
    }
    /**
     * <pre>
     * The label defined in the Diatheke model. Identifies which "say" entry
     * in the model this message corresponds to.
     * </pre>
     *
     * <code>optional string label = 1;</code>
     */
    private void setLabel(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      label_ = value;
    }
    /**
     * <pre>
     * The label defined in the Diatheke model. Identifies which "say" entry
     * in the model this message corresponds to.
     * </pre>
     *
     * <code>optional string label = 1;</code>
     */
    private void clearLabel() {
      
      label_ = getDefaultInstance().getLabel();
    }
    /**
     * <pre>
     * The label defined in the Diatheke model. Identifies which "say" entry
     * in the model this message corresponds to.
     * </pre>
     *
     * <code>optional string label = 1;</code>
     */
    private void setLabelBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      label_ = value.toStringUtf8();
    }

    public static final int TEXT_FIELD_NUMBER = 2;
    /**
     * <pre>
     * The reply text as defined in the Diatheke model. This is the first
     * message that will be received for an AudioReply. It contains the
     * same text as the corresponding ReplyEvent in the session's event
     * stream.
     * </pre>
     *
     * <code>optional string text = 2;</code>
     */
    public java.lang.String getText() {
      java.lang.String ref = "";
      if (outputMessageCase_ == 2) {
        ref = (java.lang.String) outputMessage_;
      }
      return ref;
    }
    /**
     * <pre>
     * The reply text as defined in the Diatheke model. This is the first
     * message that will be received for an AudioReply. It contains the
     * same text as the corresponding ReplyEvent in the session's event
     * stream.
     * </pre>
     *
     * <code>optional string text = 2;</code>
     */
    public com.google.protobuf.ByteString
        getTextBytes() {
      java.lang.String ref = "";
      if (outputMessageCase_ == 2) {
        ref = (java.lang.String) outputMessage_;
      }
      return com.google.protobuf.ByteString.copyFromUtf8(ref);
    }
    /**
     * <pre>
     * The reply text as defined in the Diatheke model. This is the first
     * message that will be received for an AudioReply. It contains the
     * same text as the corresponding ReplyEvent in the session's event
     * stream.
     * </pre>
     *
     * <code>optional string text = 2;</code>
     */
    private void setText(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  outputMessageCase_ = 2;
      outputMessage_ = value;
    }
    /**
     * <pre>
     * The reply text as defined in the Diatheke model. This is the first
     * message that will be received for an AudioReply. It contains the
     * same text as the corresponding ReplyEvent in the session's event
     * stream.
     * </pre>
     *
     * <code>optional string text = 2;</code>
     */
    private void clearText() {
      if (outputMessageCase_ == 2) {
        outputMessageCase_ = 0;
        outputMessage_ = null;
      }
    }
    /**
     * <pre>
     * The reply text as defined in the Diatheke model. This is the first
     * message that will be received for an AudioReply. It contains the
     * same text as the corresponding ReplyEvent in the session's event
     * stream.
     * </pre>
     *
     * <code>optional string text = 2;</code>
     */
    private void setTextBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      outputMessageCase_ = 2;
      outputMessage_ = value.toStringUtf8();
    }

    public static final int DATA_FIELD_NUMBER = 3;
    /**
     * <pre>
     * The audio data from TTS. There can be any number of these messages
     * for an AudioReply after the first text message and before the final
     * end message. The encoding of the data will match what was specified
     * in the server configuration.
     * </pre>
     *
     * <code>optional bytes data = 3;</code>
     */
    public com.google.protobuf.ByteString getData() {
      if (outputMessageCase_ == 3) {
        return (com.google.protobuf.ByteString) outputMessage_;
      }
      return com.google.protobuf.ByteString.EMPTY;
    }
    /**
     * <pre>
     * The audio data from TTS. There can be any number of these messages
     * for an AudioReply after the first text message and before the final
     * end message. The encoding of the data will match what was specified
     * in the server configuration.
     * </pre>
     *
     * <code>optional bytes data = 3;</code>
     */
    private void setData(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  outputMessageCase_ = 3;
      outputMessage_ = value;
    }
    /**
     * <pre>
     * The audio data from TTS. There can be any number of these messages
     * for an AudioReply after the first text message and before the final
     * end message. The encoding of the data will match what was specified
     * in the server configuration.
     * </pre>
     *
     * <code>optional bytes data = 3;</code>
     */
    private void clearData() {
      if (outputMessageCase_ == 3) {
        outputMessageCase_ = 0;
        outputMessage_ = null;
      }
    }

    public static final int END_FIELD_NUMBER = 4;
    /**
     * <pre>
     * Indicates that TTS has finished streaming audio for the reply. This
     * is the last message that will be received for an AudioReply.
     * </pre>
     *
     * <code>optional .cobaltspeech.diatheke.Empty end = 4;</code>
     */
    public cobaltspeech.diatheke.DiathekeOuterClass.Empty getEnd() {
      if (outputMessageCase_ == 4) {
         return (cobaltspeech.diatheke.DiathekeOuterClass.Empty) outputMessage_;
      }
      return cobaltspeech.diatheke.DiathekeOuterClass.Empty.getDefaultInstance();
    }
    /**
     * <pre>
     * Indicates that TTS has finished streaming audio for the reply. This
     * is the last message that will be received for an AudioReply.
     * </pre>
     *
     * <code>optional .cobaltspeech.diatheke.Empty end = 4;</code>
     */
    private void setEnd(cobaltspeech.diatheke.DiathekeOuterClass.Empty value) {
      if (value == null) {
        throw new NullPointerException();
      }
      outputMessage_ = value;
      outputMessageCase_ = 4;
    }
    /**
     * <pre>
     * Indicates that TTS has finished streaming audio for the reply. This
     * is the last message that will be received for an AudioReply.
     * </pre>
     *
     * <code>optional .cobaltspeech.diatheke.Empty end = 4;</code>
     */
    private void setEnd(
        cobaltspeech.diatheke.DiathekeOuterClass.Empty.Builder builderForValue) {
      outputMessage_ = builderForValue.build();
      outputMessageCase_ = 4;
    }
    /**
     * <pre>
     * Indicates that TTS has finished streaming audio for the reply. This
     * is the last message that will be received for an AudioReply.
     * </pre>
     *
     * <code>optional .cobaltspeech.diatheke.Empty end = 4;</code>
     */
    private void mergeEnd(cobaltspeech.diatheke.DiathekeOuterClass.Empty value) {
      if (outputMessageCase_ == 4 &&
          outputMessage_ != cobaltspeech.diatheke.DiathekeOuterClass.Empty.getDefaultInstance()) {
        outputMessage_ = cobaltspeech.diatheke.DiathekeOuterClass.Empty.newBuilder((cobaltspeech.diatheke.DiathekeOuterClass.Empty) outputMessage_)
            .mergeFrom(value).buildPartial();
      } else {
        outputMessage_ = value;
      }
      outputMessageCase_ = 4;
    }
    /**
     * <pre>
     * Indicates that TTS has finished streaming audio for the reply. This
     * is the last message that will be received for an AudioReply.
     * </pre>
     *
     * <code>optional .cobaltspeech.diatheke.Empty end = 4;</code>
     */
    private void clearEnd() {
      if (outputMessageCase_ == 4) {
        outputMessageCase_ = 0;
        outputMessage_ = null;
      }
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!label_.isEmpty()) {
        output.writeString(1, getLabel());
      }
      if (outputMessageCase_ == 2) {
        output.writeString(2, getText());
      }
      if (outputMessageCase_ == 3) {
        output.writeBytes(
            3, (com.google.protobuf.ByteString)((com.google.protobuf.ByteString) outputMessage_));
      }
      if (outputMessageCase_ == 4) {
        output.writeMessage(4, (cobaltspeech.diatheke.DiathekeOuterClass.Empty) outputMessage_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (!label_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getLabel());
      }
      if (outputMessageCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(2, getText());
      }
      if (outputMessageCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(
              3, (com.google.protobuf.ByteString)((com.google.protobuf.ByteString) outputMessage_));
      }
      if (outputMessageCase_ == 4) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, (cobaltspeech.diatheke.DiathekeOuterClass.Empty) outputMessage_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static cobaltspeech.diatheke.DiathekeOuterClass.AudioReply parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.AudioReply parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.AudioReply parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.AudioReply parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.AudioReply parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.AudioReply parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.AudioReply parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.AudioReply parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.AudioReply parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.AudioReply parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(cobaltspeech.diatheke.DiathekeOuterClass.AudioReply prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * An AudioReply is the verbal and textual reply that Diatheke returns as
     * part of a conversation (not to be confused with the server concepts of
     * request and response).
     * </pre>
     *
     * Protobuf type {@code cobaltspeech.diatheke.AudioReply}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          cobaltspeech.diatheke.DiathekeOuterClass.AudioReply, Builder> implements
        // @@protoc_insertion_point(builder_implements:cobaltspeech.diatheke.AudioReply)
        cobaltspeech.diatheke.DiathekeOuterClass.AudioReplyOrBuilder {
      // Construct using cobaltspeech.diatheke.DiathekeOuterClass.AudioReply.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }

      public OutputMessageCase
          getOutputMessageCase() {
        return instance.getOutputMessageCase();
      }

      public Builder clearOutputMessage() {
        copyOnWrite();
        instance.clearOutputMessage();
        return this;
      }


      /**
       * <pre>
       * The label defined in the Diatheke model. Identifies which "say" entry
       * in the model this message corresponds to.
       * </pre>
       *
       * <code>optional string label = 1;</code>
       */
      public java.lang.String getLabel() {
        return instance.getLabel();
      }
      /**
       * <pre>
       * The label defined in the Diatheke model. Identifies which "say" entry
       * in the model this message corresponds to.
       * </pre>
       *
       * <code>optional string label = 1;</code>
       */
      public com.google.protobuf.ByteString
          getLabelBytes() {
        return instance.getLabelBytes();
      }
      /**
       * <pre>
       * The label defined in the Diatheke model. Identifies which "say" entry
       * in the model this message corresponds to.
       * </pre>
       *
       * <code>optional string label = 1;</code>
       */
      public Builder setLabel(
          java.lang.String value) {
        copyOnWrite();
        instance.setLabel(value);
        return this;
      }
      /**
       * <pre>
       * The label defined in the Diatheke model. Identifies which "say" entry
       * in the model this message corresponds to.
       * </pre>
       *
       * <code>optional string label = 1;</code>
       */
      public Builder clearLabel() {
        copyOnWrite();
        instance.clearLabel();
        return this;
      }
      /**
       * <pre>
       * The label defined in the Diatheke model. Identifies which "say" entry
       * in the model this message corresponds to.
       * </pre>
       *
       * <code>optional string label = 1;</code>
       */
      public Builder setLabelBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setLabelBytes(value);
        return this;
      }

      /**
       * <pre>
       * The reply text as defined in the Diatheke model. This is the first
       * message that will be received for an AudioReply. It contains the
       * same text as the corresponding ReplyEvent in the session's event
       * stream.
       * </pre>
       *
       * <code>optional string text = 2;</code>
       */
      public java.lang.String getText() {
        return instance.getText();
      }
      /**
       * <pre>
       * The reply text as defined in the Diatheke model. This is the first
       * message that will be received for an AudioReply. It contains the
       * same text as the corresponding ReplyEvent in the session's event
       * stream.
       * </pre>
       *
       * <code>optional string text = 2;</code>
       */
      public com.google.protobuf.ByteString
          getTextBytes() {
        return instance.getTextBytes();
      }
      /**
       * <pre>
       * The reply text as defined in the Diatheke model. This is the first
       * message that will be received for an AudioReply. It contains the
       * same text as the corresponding ReplyEvent in the session's event
       * stream.
       * </pre>
       *
       * <code>optional string text = 2;</code>
       */
      public Builder setText(
          java.lang.String value) {
        copyOnWrite();
        instance.setText(value);
        return this;
      }
      /**
       * <pre>
       * The reply text as defined in the Diatheke model. This is the first
       * message that will be received for an AudioReply. It contains the
       * same text as the corresponding ReplyEvent in the session's event
       * stream.
       * </pre>
       *
       * <code>optional string text = 2;</code>
       */
      public Builder clearText() {
        copyOnWrite();
        instance.clearText();
        return this;
      }
      /**
       * <pre>
       * The reply text as defined in the Diatheke model. This is the first
       * message that will be received for an AudioReply. It contains the
       * same text as the corresponding ReplyEvent in the session's event
       * stream.
       * </pre>
       *
       * <code>optional string text = 2;</code>
       */
      public Builder setTextBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setTextBytes(value);
        return this;
      }

      /**
       * <pre>
       * The audio data from TTS. There can be any number of these messages
       * for an AudioReply after the first text message and before the final
       * end message. The encoding of the data will match what was specified
       * in the server configuration.
       * </pre>
       *
       * <code>optional bytes data = 3;</code>
       */
      public com.google.protobuf.ByteString getData() {
        return instance.getData();
      }
      /**
       * <pre>
       * The audio data from TTS. There can be any number of these messages
       * for an AudioReply after the first text message and before the final
       * end message. The encoding of the data will match what was specified
       * in the server configuration.
       * </pre>
       *
       * <code>optional bytes data = 3;</code>
       */
      public Builder setData(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setData(value);
        return this;
      }
      /**
       * <pre>
       * The audio data from TTS. There can be any number of these messages
       * for an AudioReply after the first text message and before the final
       * end message. The encoding of the data will match what was specified
       * in the server configuration.
       * </pre>
       *
       * <code>optional bytes data = 3;</code>
       */
      public Builder clearData() {
        copyOnWrite();
        instance.clearData();
        return this;
      }

      /**
       * <pre>
       * Indicates that TTS has finished streaming audio for the reply. This
       * is the last message that will be received for an AudioReply.
       * </pre>
       *
       * <code>optional .cobaltspeech.diatheke.Empty end = 4;</code>
       */
      public cobaltspeech.diatheke.DiathekeOuterClass.Empty getEnd() {
        return instance.getEnd();
      }
      /**
       * <pre>
       * Indicates that TTS has finished streaming audio for the reply. This
       * is the last message that will be received for an AudioReply.
       * </pre>
       *
       * <code>optional .cobaltspeech.diatheke.Empty end = 4;</code>
       */
      public Builder setEnd(cobaltspeech.diatheke.DiathekeOuterClass.Empty value) {
        copyOnWrite();
        instance.setEnd(value);
        return this;
      }
      /**
       * <pre>
       * Indicates that TTS has finished streaming audio for the reply. This
       * is the last message that will be received for an AudioReply.
       * </pre>
       *
       * <code>optional .cobaltspeech.diatheke.Empty end = 4;</code>
       */
      public Builder setEnd(
          cobaltspeech.diatheke.DiathekeOuterClass.Empty.Builder builderForValue) {
        copyOnWrite();
        instance.setEnd(builderForValue);
        return this;
      }
      /**
       * <pre>
       * Indicates that TTS has finished streaming audio for the reply. This
       * is the last message that will be received for an AudioReply.
       * </pre>
       *
       * <code>optional .cobaltspeech.diatheke.Empty end = 4;</code>
       */
      public Builder mergeEnd(cobaltspeech.diatheke.DiathekeOuterClass.Empty value) {
        copyOnWrite();
        instance.mergeEnd(value);
        return this;
      }
      /**
       * <pre>
       * Indicates that TTS has finished streaming audio for the reply. This
       * is the last message that will be received for an AudioReply.
       * </pre>
       *
       * <code>optional .cobaltspeech.diatheke.Empty end = 4;</code>
       */
      public Builder clearEnd() {
        copyOnWrite();
        instance.clearEnd();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:cobaltspeech.diatheke.AudioReply)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new cobaltspeech.diatheke.DiathekeOuterClass.AudioReply();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          cobaltspeech.diatheke.DiathekeOuterClass.AudioReply other = (cobaltspeech.diatheke.DiathekeOuterClass.AudioReply) arg1;
          label_ = visitor.visitString(!label_.isEmpty(), label_,
              !other.label_.isEmpty(), other.label_);
          switch (other.getOutputMessageCase()) {
            case TEXT: {
              outputMessage_ = visitor.visitOneofString(
                 outputMessageCase_ == 2, outputMessage_, other.outputMessage_);
              break;
            }
            case DATA: {
              outputMessage_ = visitor.visitOneofByteString(
                  outputMessageCase_ == 3, outputMessage_, other.outputMessage_);
              break;
            }
            case END: {
              outputMessage_ = visitor.visitOneofMessage(
                  outputMessageCase_ == 4,
                  outputMessage_,
                  other.outputMessage_);
              break;
            }
            case OUTPUTMESSAGE_NOT_SET: {
              visitor.visitOneofNotSet(outputMessageCase_ != 0);
              break;
            }
          }
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            if (other.outputMessageCase_ != 0) {
              outputMessageCase_ = other.outputMessageCase_;
            }
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  String s = input.readStringRequireUtf8();

                  label_ = s;
                  break;
                }
                case 18: {
                  String s = input.readStringRequireUtf8();
                  outputMessageCase_ = 2;
                  outputMessage_ = s;
                  break;
                }
                case 26: {
                  outputMessageCase_ = 3;
                  outputMessage_ = input.readBytes();
                  break;
                }
                case 34: {
                  cobaltspeech.diatheke.DiathekeOuterClass.Empty.Builder subBuilder = null;
                  if (outputMessageCase_ == 4) {
                    subBuilder = ((cobaltspeech.diatheke.DiathekeOuterClass.Empty) outputMessage_).toBuilder();
                  }
                  outputMessage_ =
                       input.readMessage(cobaltspeech.diatheke.DiathekeOuterClass.Empty.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom((cobaltspeech.diatheke.DiathekeOuterClass.Empty) outputMessage_);
                    outputMessage_ = subBuilder.buildPartial();
                  }
                  outputMessageCase_ = 4;
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (cobaltspeech.diatheke.DiathekeOuterClass.AudioReply.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:cobaltspeech.diatheke.AudioReply)
    private static final cobaltspeech.diatheke.DiathekeOuterClass.AudioReply DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new AudioReply();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static cobaltspeech.diatheke.DiathekeOuterClass.AudioReply getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<AudioReply> PARSER;

    public static com.google.protobuf.Parser<AudioReply> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface PushTextRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:cobaltspeech.diatheke.PushTextRequest)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * Session ID returned from the NewSession call.
     * </pre>
     *
     * <code>optional string session_id = 1;</code>
     */
    java.lang.String getSessionId();
    /**
     * <pre>
     * Session ID returned from the NewSession call.
     * </pre>
     *
     * <code>optional string session_id = 1;</code>
     */
    com.google.protobuf.ByteString
        getSessionIdBytes();

    /**
     * <pre>
     * User input. This could be a transcription from manually run ASR,
     * text selected from a dropdown list, entered in a prompt, etc.
     * </pre>
     *
     * <code>optional string text = 2;</code>
     */
    java.lang.String getText();
    /**
     * <pre>
     * User input. This could be a transcription from manually run ASR,
     * text selected from a dropdown list, entered in a prompt, etc.
     * </pre>
     *
     * <code>optional string text = 2;</code>
     */
    com.google.protobuf.ByteString
        getTextBytes();
  }
  /**
   * <pre>
   * Request to push text to Diatheke as part of a conversation.
   * </pre>
   *
   * Protobuf type {@code cobaltspeech.diatheke.PushTextRequest}
   */
  public  static final class PushTextRequest extends
      com.google.protobuf.GeneratedMessageLite<
          PushTextRequest, PushTextRequest.Builder> implements
      // @@protoc_insertion_point(message_implements:cobaltspeech.diatheke.PushTextRequest)
      PushTextRequestOrBuilder {
    private PushTextRequest() {
      sessionId_ = "";
      text_ = "";
    }
    public static final int SESSION_ID_FIELD_NUMBER = 1;
    private java.lang.String sessionId_;
    /**
     * <pre>
     * Session ID returned from the NewSession call.
     * </pre>
     *
     * <code>optional string session_id = 1;</code>
     */
    public java.lang.String getSessionId() {
      return sessionId_;
    }
    /**
     * <pre>
     * Session ID returned from the NewSession call.
     * </pre>
     *
     * <code>optional string session_id = 1;</code>
     */
    public com.google.protobuf.ByteString
        getSessionIdBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(sessionId_);
    }
    /**
     * <pre>
     * Session ID returned from the NewSession call.
     * </pre>
     *
     * <code>optional string session_id = 1;</code>
     */
    private void setSessionId(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      sessionId_ = value;
    }
    /**
     * <pre>
     * Session ID returned from the NewSession call.
     * </pre>
     *
     * <code>optional string session_id = 1;</code>
     */
    private void clearSessionId() {
      
      sessionId_ = getDefaultInstance().getSessionId();
    }
    /**
     * <pre>
     * Session ID returned from the NewSession call.
     * </pre>
     *
     * <code>optional string session_id = 1;</code>
     */
    private void setSessionIdBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      sessionId_ = value.toStringUtf8();
    }

    public static final int TEXT_FIELD_NUMBER = 2;
    private java.lang.String text_;
    /**
     * <pre>
     * User input. This could be a transcription from manually run ASR,
     * text selected from a dropdown list, entered in a prompt, etc.
     * </pre>
     *
     * <code>optional string text = 2;</code>
     */
    public java.lang.String getText() {
      return text_;
    }
    /**
     * <pre>
     * User input. This could be a transcription from manually run ASR,
     * text selected from a dropdown list, entered in a prompt, etc.
     * </pre>
     *
     * <code>optional string text = 2;</code>
     */
    public com.google.protobuf.ByteString
        getTextBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(text_);
    }
    /**
     * <pre>
     * User input. This could be a transcription from manually run ASR,
     * text selected from a dropdown list, entered in a prompt, etc.
     * </pre>
     *
     * <code>optional string text = 2;</code>
     */
    private void setText(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      text_ = value;
    }
    /**
     * <pre>
     * User input. This could be a transcription from manually run ASR,
     * text selected from a dropdown list, entered in a prompt, etc.
     * </pre>
     *
     * <code>optional string text = 2;</code>
     */
    private void clearText() {
      
      text_ = getDefaultInstance().getText();
    }
    /**
     * <pre>
     * User input. This could be a transcription from manually run ASR,
     * text selected from a dropdown list, entered in a prompt, etc.
     * </pre>
     *
     * <code>optional string text = 2;</code>
     */
    private void setTextBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      text_ = value.toStringUtf8();
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!sessionId_.isEmpty()) {
        output.writeString(1, getSessionId());
      }
      if (!text_.isEmpty()) {
        output.writeString(2, getText());
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (!sessionId_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getSessionId());
      }
      if (!text_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(2, getText());
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static cobaltspeech.diatheke.DiathekeOuterClass.PushTextRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.PushTextRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.PushTextRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.PushTextRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.PushTextRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.PushTextRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.PushTextRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.PushTextRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.PushTextRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.PushTextRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(cobaltspeech.diatheke.DiathekeOuterClass.PushTextRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * Request to push text to Diatheke as part of a conversation.
     * </pre>
     *
     * Protobuf type {@code cobaltspeech.diatheke.PushTextRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          cobaltspeech.diatheke.DiathekeOuterClass.PushTextRequest, Builder> implements
        // @@protoc_insertion_point(builder_implements:cobaltspeech.diatheke.PushTextRequest)
        cobaltspeech.diatheke.DiathekeOuterClass.PushTextRequestOrBuilder {
      // Construct using cobaltspeech.diatheke.DiathekeOuterClass.PushTextRequest.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * Session ID returned from the NewSession call.
       * </pre>
       *
       * <code>optional string session_id = 1;</code>
       */
      public java.lang.String getSessionId() {
        return instance.getSessionId();
      }
      /**
       * <pre>
       * Session ID returned from the NewSession call.
       * </pre>
       *
       * <code>optional string session_id = 1;</code>
       */
      public com.google.protobuf.ByteString
          getSessionIdBytes() {
        return instance.getSessionIdBytes();
      }
      /**
       * <pre>
       * Session ID returned from the NewSession call.
       * </pre>
       *
       * <code>optional string session_id = 1;</code>
       */
      public Builder setSessionId(
          java.lang.String value) {
        copyOnWrite();
        instance.setSessionId(value);
        return this;
      }
      /**
       * <pre>
       * Session ID returned from the NewSession call.
       * </pre>
       *
       * <code>optional string session_id = 1;</code>
       */
      public Builder clearSessionId() {
        copyOnWrite();
        instance.clearSessionId();
        return this;
      }
      /**
       * <pre>
       * Session ID returned from the NewSession call.
       * </pre>
       *
       * <code>optional string session_id = 1;</code>
       */
      public Builder setSessionIdBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setSessionIdBytes(value);
        return this;
      }

      /**
       * <pre>
       * User input. This could be a transcription from manually run ASR,
       * text selected from a dropdown list, entered in a prompt, etc.
       * </pre>
       *
       * <code>optional string text = 2;</code>
       */
      public java.lang.String getText() {
        return instance.getText();
      }
      /**
       * <pre>
       * User input. This could be a transcription from manually run ASR,
       * text selected from a dropdown list, entered in a prompt, etc.
       * </pre>
       *
       * <code>optional string text = 2;</code>
       */
      public com.google.protobuf.ByteString
          getTextBytes() {
        return instance.getTextBytes();
      }
      /**
       * <pre>
       * User input. This could be a transcription from manually run ASR,
       * text selected from a dropdown list, entered in a prompt, etc.
       * </pre>
       *
       * <code>optional string text = 2;</code>
       */
      public Builder setText(
          java.lang.String value) {
        copyOnWrite();
        instance.setText(value);
        return this;
      }
      /**
       * <pre>
       * User input. This could be a transcription from manually run ASR,
       * text selected from a dropdown list, entered in a prompt, etc.
       * </pre>
       *
       * <code>optional string text = 2;</code>
       */
      public Builder clearText() {
        copyOnWrite();
        instance.clearText();
        return this;
      }
      /**
       * <pre>
       * User input. This could be a transcription from manually run ASR,
       * text selected from a dropdown list, entered in a prompt, etc.
       * </pre>
       *
       * <code>optional string text = 2;</code>
       */
      public Builder setTextBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setTextBytes(value);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:cobaltspeech.diatheke.PushTextRequest)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new cobaltspeech.diatheke.DiathekeOuterClass.PushTextRequest();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          cobaltspeech.diatheke.DiathekeOuterClass.PushTextRequest other = (cobaltspeech.diatheke.DiathekeOuterClass.PushTextRequest) arg1;
          sessionId_ = visitor.visitString(!sessionId_.isEmpty(), sessionId_,
              !other.sessionId_.isEmpty(), other.sessionId_);
          text_ = visitor.visitString(!text_.isEmpty(), text_,
              !other.text_.isEmpty(), other.text_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  String s = input.readStringRequireUtf8();

                  sessionId_ = s;
                  break;
                }
                case 18: {
                  String s = input.readStringRequireUtf8();

                  text_ = s;
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (cobaltspeech.diatheke.DiathekeOuterClass.PushTextRequest.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:cobaltspeech.diatheke.PushTextRequest)
    private static final cobaltspeech.diatheke.DiathekeOuterClass.PushTextRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new PushTextRequest();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static cobaltspeech.diatheke.DiathekeOuterClass.PushTextRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<PushTextRequest> PARSER;

    public static com.google.protobuf.Parser<PushTextRequest> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ASRRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:cobaltspeech.diatheke.ASRRequest)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * The model to use for ASR. This message should always be sent
     * before any audio data is sent.
     * </pre>
     *
     * <code>optional string model = 1;</code>
     */
    java.lang.String getModel();
    /**
     * <pre>
     * The model to use for ASR. This message should always be sent
     * before any audio data is sent.
     * </pre>
     *
     * <code>optional string model = 1;</code>
     */
    com.google.protobuf.ByteString
        getModelBytes();

    /**
     * <pre>
     * Audio data to process. The encoding of the data should match what
     * was specified in the Diatheke server configuration.
     * NOTE: If the audio data is empty, the server may interpret it as
     *       the end of the stream and stop accepting further messages.
     * </pre>
     *
     * <code>optional bytes audio = 2;</code>
     */
    com.google.protobuf.ByteString getAudio();

    public cobaltspeech.diatheke.DiathekeOuterClass.ASRRequest.AsrDataCase getAsrDataCase();
  }
  /**
   * <pre>
   * Request for streaming ASR unrelated to a session.
   * </pre>
   *
   * Protobuf type {@code cobaltspeech.diatheke.ASRRequest}
   */
  public  static final class ASRRequest extends
      com.google.protobuf.GeneratedMessageLite<
          ASRRequest, ASRRequest.Builder> implements
      // @@protoc_insertion_point(message_implements:cobaltspeech.diatheke.ASRRequest)
      ASRRequestOrBuilder {
    private ASRRequest() {
    }
    private int asrDataCase_ = 0;
    private java.lang.Object asrData_;
    public enum AsrDataCase
        implements com.google.protobuf.Internal.EnumLite {
      MODEL(1),
      AUDIO(2),
      ASRDATA_NOT_SET(0);
      private final int value;
      private AsrDataCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static AsrDataCase valueOf(int value) {
        return forNumber(value);
      }

      public static AsrDataCase forNumber(int value) {
        switch (value) {
          case 1: return MODEL;
          case 2: return AUDIO;
          case 0: return ASRDATA_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public AsrDataCase
    getAsrDataCase() {
      return AsrDataCase.forNumber(
          asrDataCase_);
    }

    private void clearAsrData() {
      asrDataCase_ = 0;
      asrData_ = null;
    }

    public static final int MODEL_FIELD_NUMBER = 1;
    /**
     * <pre>
     * The model to use for ASR. This message should always be sent
     * before any audio data is sent.
     * </pre>
     *
     * <code>optional string model = 1;</code>
     */
    public java.lang.String getModel() {
      java.lang.String ref = "";
      if (asrDataCase_ == 1) {
        ref = (java.lang.String) asrData_;
      }
      return ref;
    }
    /**
     * <pre>
     * The model to use for ASR. This message should always be sent
     * before any audio data is sent.
     * </pre>
     *
     * <code>optional string model = 1;</code>
     */
    public com.google.protobuf.ByteString
        getModelBytes() {
      java.lang.String ref = "";
      if (asrDataCase_ == 1) {
        ref = (java.lang.String) asrData_;
      }
      return com.google.protobuf.ByteString.copyFromUtf8(ref);
    }
    /**
     * <pre>
     * The model to use for ASR. This message should always be sent
     * before any audio data is sent.
     * </pre>
     *
     * <code>optional string model = 1;</code>
     */
    private void setModel(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  asrDataCase_ = 1;
      asrData_ = value;
    }
    /**
     * <pre>
     * The model to use for ASR. This message should always be sent
     * before any audio data is sent.
     * </pre>
     *
     * <code>optional string model = 1;</code>
     */
    private void clearModel() {
      if (asrDataCase_ == 1) {
        asrDataCase_ = 0;
        asrData_ = null;
      }
    }
    /**
     * <pre>
     * The model to use for ASR. This message should always be sent
     * before any audio data is sent.
     * </pre>
     *
     * <code>optional string model = 1;</code>
     */
    private void setModelBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      asrDataCase_ = 1;
      asrData_ = value.toStringUtf8();
    }

    public static final int AUDIO_FIELD_NUMBER = 2;
    /**
     * <pre>
     * Audio data to process. The encoding of the data should match what
     * was specified in the Diatheke server configuration.
     * NOTE: If the audio data is empty, the server may interpret it as
     *       the end of the stream and stop accepting further messages.
     * </pre>
     *
     * <code>optional bytes audio = 2;</code>
     */
    public com.google.protobuf.ByteString getAudio() {
      if (asrDataCase_ == 2) {
        return (com.google.protobuf.ByteString) asrData_;
      }
      return com.google.protobuf.ByteString.EMPTY;
    }
    /**
     * <pre>
     * Audio data to process. The encoding of the data should match what
     * was specified in the Diatheke server configuration.
     * NOTE: If the audio data is empty, the server may interpret it as
     *       the end of the stream and stop accepting further messages.
     * </pre>
     *
     * <code>optional bytes audio = 2;</code>
     */
    private void setAudio(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  asrDataCase_ = 2;
      asrData_ = value;
    }
    /**
     * <pre>
     * Audio data to process. The encoding of the data should match what
     * was specified in the Diatheke server configuration.
     * NOTE: If the audio data is empty, the server may interpret it as
     *       the end of the stream and stop accepting further messages.
     * </pre>
     *
     * <code>optional bytes audio = 2;</code>
     */
    private void clearAudio() {
      if (asrDataCase_ == 2) {
        asrDataCase_ = 0;
        asrData_ = null;
      }
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (asrDataCase_ == 1) {
        output.writeString(1, getModel());
      }
      if (asrDataCase_ == 2) {
        output.writeBytes(
            2, (com.google.protobuf.ByteString)((com.google.protobuf.ByteString) asrData_));
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (asrDataCase_ == 1) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getModel());
      }
      if (asrDataCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(
              2, (com.google.protobuf.ByteString)((com.google.protobuf.ByteString) asrData_));
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static cobaltspeech.diatheke.DiathekeOuterClass.ASRRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.ASRRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.ASRRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.ASRRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.ASRRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.ASRRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.ASRRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.ASRRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.ASRRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.ASRRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(cobaltspeech.diatheke.DiathekeOuterClass.ASRRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * Request for streaming ASR unrelated to a session.
     * </pre>
     *
     * Protobuf type {@code cobaltspeech.diatheke.ASRRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          cobaltspeech.diatheke.DiathekeOuterClass.ASRRequest, Builder> implements
        // @@protoc_insertion_point(builder_implements:cobaltspeech.diatheke.ASRRequest)
        cobaltspeech.diatheke.DiathekeOuterClass.ASRRequestOrBuilder {
      // Construct using cobaltspeech.diatheke.DiathekeOuterClass.ASRRequest.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }

      public AsrDataCase
          getAsrDataCase() {
        return instance.getAsrDataCase();
      }

      public Builder clearAsrData() {
        copyOnWrite();
        instance.clearAsrData();
        return this;
      }


      /**
       * <pre>
       * The model to use for ASR. This message should always be sent
       * before any audio data is sent.
       * </pre>
       *
       * <code>optional string model = 1;</code>
       */
      public java.lang.String getModel() {
        return instance.getModel();
      }
      /**
       * <pre>
       * The model to use for ASR. This message should always be sent
       * before any audio data is sent.
       * </pre>
       *
       * <code>optional string model = 1;</code>
       */
      public com.google.protobuf.ByteString
          getModelBytes() {
        return instance.getModelBytes();
      }
      /**
       * <pre>
       * The model to use for ASR. This message should always be sent
       * before any audio data is sent.
       * </pre>
       *
       * <code>optional string model = 1;</code>
       */
      public Builder setModel(
          java.lang.String value) {
        copyOnWrite();
        instance.setModel(value);
        return this;
      }
      /**
       * <pre>
       * The model to use for ASR. This message should always be sent
       * before any audio data is sent.
       * </pre>
       *
       * <code>optional string model = 1;</code>
       */
      public Builder clearModel() {
        copyOnWrite();
        instance.clearModel();
        return this;
      }
      /**
       * <pre>
       * The model to use for ASR. This message should always be sent
       * before any audio data is sent.
       * </pre>
       *
       * <code>optional string model = 1;</code>
       */
      public Builder setModelBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setModelBytes(value);
        return this;
      }

      /**
       * <pre>
       * Audio data to process. The encoding of the data should match what
       * was specified in the Diatheke server configuration.
       * NOTE: If the audio data is empty, the server may interpret it as
       *       the end of the stream and stop accepting further messages.
       * </pre>
       *
       * <code>optional bytes audio = 2;</code>
       */
      public com.google.protobuf.ByteString getAudio() {
        return instance.getAudio();
      }
      /**
       * <pre>
       * Audio data to process. The encoding of the data should match what
       * was specified in the Diatheke server configuration.
       * NOTE: If the audio data is empty, the server may interpret it as
       *       the end of the stream and stop accepting further messages.
       * </pre>
       *
       * <code>optional bytes audio = 2;</code>
       */
      public Builder setAudio(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setAudio(value);
        return this;
      }
      /**
       * <pre>
       * Audio data to process. The encoding of the data should match what
       * was specified in the Diatheke server configuration.
       * NOTE: If the audio data is empty, the server may interpret it as
       *       the end of the stream and stop accepting further messages.
       * </pre>
       *
       * <code>optional bytes audio = 2;</code>
       */
      public Builder clearAudio() {
        copyOnWrite();
        instance.clearAudio();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:cobaltspeech.diatheke.ASRRequest)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new cobaltspeech.diatheke.DiathekeOuterClass.ASRRequest();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          cobaltspeech.diatheke.DiathekeOuterClass.ASRRequest other = (cobaltspeech.diatheke.DiathekeOuterClass.ASRRequest) arg1;
          switch (other.getAsrDataCase()) {
            case MODEL: {
              asrData_ = visitor.visitOneofString(
                 asrDataCase_ == 1, asrData_, other.asrData_);
              break;
            }
            case AUDIO: {
              asrData_ = visitor.visitOneofByteString(
                  asrDataCase_ == 2, asrData_, other.asrData_);
              break;
            }
            case ASRDATA_NOT_SET: {
              visitor.visitOneofNotSet(asrDataCase_ != 0);
              break;
            }
          }
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            if (other.asrDataCase_ != 0) {
              asrDataCase_ = other.asrDataCase_;
            }
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  String s = input.readStringRequireUtf8();
                  asrDataCase_ = 1;
                  asrData_ = s;
                  break;
                }
                case 18: {
                  asrDataCase_ = 2;
                  asrData_ = input.readBytes();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (cobaltspeech.diatheke.DiathekeOuterClass.ASRRequest.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:cobaltspeech.diatheke.ASRRequest)
    private static final cobaltspeech.diatheke.DiathekeOuterClass.ASRRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ASRRequest();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static cobaltspeech.diatheke.DiathekeOuterClass.ASRRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<ASRRequest> PARSER;

    public static com.google.protobuf.Parser<ASRRequest> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ASRResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:cobaltspeech.diatheke.ASRResponse)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * Text is the Cubic engine's formatted transcript of pushed audio.
     * This field will be the 1-best alternative.
     * </pre>
     *
     * <code>optional string text = 1;</code>
     */
    java.lang.String getText();
    /**
     * <pre>
     * Text is the Cubic engine's formatted transcript of pushed audio.
     * This field will be the 1-best alternative.
     * </pre>
     *
     * <code>optional string text = 1;</code>
     */
    com.google.protobuf.ByteString
        getTextBytes();

    /**
     * <pre>
     * The confidence score is a floating point number between 0.0 - 1.0. A
     * score of 1.0 indicates that the ASR engine is 100% confident in the
     * transcription.
     * </pre>
     *
     * <code>optional double confidence_score = 2;</code>
     */
    double getConfidenceScore();
  }
  /**
   * <pre>
   * ASRResponse contains speech recognition results.
   * </pre>
   *
   * Protobuf type {@code cobaltspeech.diatheke.ASRResponse}
   */
  public  static final class ASRResponse extends
      com.google.protobuf.GeneratedMessageLite<
          ASRResponse, ASRResponse.Builder> implements
      // @@protoc_insertion_point(message_implements:cobaltspeech.diatheke.ASRResponse)
      ASRResponseOrBuilder {
    private ASRResponse() {
      text_ = "";
    }
    public static final int TEXT_FIELD_NUMBER = 1;
    private java.lang.String text_;
    /**
     * <pre>
     * Text is the Cubic engine's formatted transcript of pushed audio.
     * This field will be the 1-best alternative.
     * </pre>
     *
     * <code>optional string text = 1;</code>
     */
    public java.lang.String getText() {
      return text_;
    }
    /**
     * <pre>
     * Text is the Cubic engine's formatted transcript of pushed audio.
     * This field will be the 1-best alternative.
     * </pre>
     *
     * <code>optional string text = 1;</code>
     */
    public com.google.protobuf.ByteString
        getTextBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(text_);
    }
    /**
     * <pre>
     * Text is the Cubic engine's formatted transcript of pushed audio.
     * This field will be the 1-best alternative.
     * </pre>
     *
     * <code>optional string text = 1;</code>
     */
    private void setText(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      text_ = value;
    }
    /**
     * <pre>
     * Text is the Cubic engine's formatted transcript of pushed audio.
     * This field will be the 1-best alternative.
     * </pre>
     *
     * <code>optional string text = 1;</code>
     */
    private void clearText() {
      
      text_ = getDefaultInstance().getText();
    }
    /**
     * <pre>
     * Text is the Cubic engine's formatted transcript of pushed audio.
     * This field will be the 1-best alternative.
     * </pre>
     *
     * <code>optional string text = 1;</code>
     */
    private void setTextBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      text_ = value.toStringUtf8();
    }

    public static final int CONFIDENCE_SCORE_FIELD_NUMBER = 2;
    private double confidenceScore_;
    /**
     * <pre>
     * The confidence score is a floating point number between 0.0 - 1.0. A
     * score of 1.0 indicates that the ASR engine is 100% confident in the
     * transcription.
     * </pre>
     *
     * <code>optional double confidence_score = 2;</code>
     */
    public double getConfidenceScore() {
      return confidenceScore_;
    }
    /**
     * <pre>
     * The confidence score is a floating point number between 0.0 - 1.0. A
     * score of 1.0 indicates that the ASR engine is 100% confident in the
     * transcription.
     * </pre>
     *
     * <code>optional double confidence_score = 2;</code>
     */
    private void setConfidenceScore(double value) {
      
      confidenceScore_ = value;
    }
    /**
     * <pre>
     * The confidence score is a floating point number between 0.0 - 1.0. A
     * score of 1.0 indicates that the ASR engine is 100% confident in the
     * transcription.
     * </pre>
     *
     * <code>optional double confidence_score = 2;</code>
     */
    private void clearConfidenceScore() {
      
      confidenceScore_ = 0D;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!text_.isEmpty()) {
        output.writeString(1, getText());
      }
      if (confidenceScore_ != 0D) {
        output.writeDouble(2, confidenceScore_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (!text_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getText());
      }
      if (confidenceScore_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(2, confidenceScore_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static cobaltspeech.diatheke.DiathekeOuterClass.ASRResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.ASRResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.ASRResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.ASRResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.ASRResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.ASRResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.ASRResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.ASRResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.ASRResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.ASRResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(cobaltspeech.diatheke.DiathekeOuterClass.ASRResponse prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * ASRResponse contains speech recognition results.
     * </pre>
     *
     * Protobuf type {@code cobaltspeech.diatheke.ASRResponse}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          cobaltspeech.diatheke.DiathekeOuterClass.ASRResponse, Builder> implements
        // @@protoc_insertion_point(builder_implements:cobaltspeech.diatheke.ASRResponse)
        cobaltspeech.diatheke.DiathekeOuterClass.ASRResponseOrBuilder {
      // Construct using cobaltspeech.diatheke.DiathekeOuterClass.ASRResponse.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * Text is the Cubic engine's formatted transcript of pushed audio.
       * This field will be the 1-best alternative.
       * </pre>
       *
       * <code>optional string text = 1;</code>
       */
      public java.lang.String getText() {
        return instance.getText();
      }
      /**
       * <pre>
       * Text is the Cubic engine's formatted transcript of pushed audio.
       * This field will be the 1-best alternative.
       * </pre>
       *
       * <code>optional string text = 1;</code>
       */
      public com.google.protobuf.ByteString
          getTextBytes() {
        return instance.getTextBytes();
      }
      /**
       * <pre>
       * Text is the Cubic engine's formatted transcript of pushed audio.
       * This field will be the 1-best alternative.
       * </pre>
       *
       * <code>optional string text = 1;</code>
       */
      public Builder setText(
          java.lang.String value) {
        copyOnWrite();
        instance.setText(value);
        return this;
      }
      /**
       * <pre>
       * Text is the Cubic engine's formatted transcript of pushed audio.
       * This field will be the 1-best alternative.
       * </pre>
       *
       * <code>optional string text = 1;</code>
       */
      public Builder clearText() {
        copyOnWrite();
        instance.clearText();
        return this;
      }
      /**
       * <pre>
       * Text is the Cubic engine's formatted transcript of pushed audio.
       * This field will be the 1-best alternative.
       * </pre>
       *
       * <code>optional string text = 1;</code>
       */
      public Builder setTextBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setTextBytes(value);
        return this;
      }

      /**
       * <pre>
       * The confidence score is a floating point number between 0.0 - 1.0. A
       * score of 1.0 indicates that the ASR engine is 100% confident in the
       * transcription.
       * </pre>
       *
       * <code>optional double confidence_score = 2;</code>
       */
      public double getConfidenceScore() {
        return instance.getConfidenceScore();
      }
      /**
       * <pre>
       * The confidence score is a floating point number between 0.0 - 1.0. A
       * score of 1.0 indicates that the ASR engine is 100% confident in the
       * transcription.
       * </pre>
       *
       * <code>optional double confidence_score = 2;</code>
       */
      public Builder setConfidenceScore(double value) {
        copyOnWrite();
        instance.setConfidenceScore(value);
        return this;
      }
      /**
       * <pre>
       * The confidence score is a floating point number between 0.0 - 1.0. A
       * score of 1.0 indicates that the ASR engine is 100% confident in the
       * transcription.
       * </pre>
       *
       * <code>optional double confidence_score = 2;</code>
       */
      public Builder clearConfidenceScore() {
        copyOnWrite();
        instance.clearConfidenceScore();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:cobaltspeech.diatheke.ASRResponse)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new cobaltspeech.diatheke.DiathekeOuterClass.ASRResponse();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          cobaltspeech.diatheke.DiathekeOuterClass.ASRResponse other = (cobaltspeech.diatheke.DiathekeOuterClass.ASRResponse) arg1;
          text_ = visitor.visitString(!text_.isEmpty(), text_,
              !other.text_.isEmpty(), other.text_);
          confidenceScore_ = visitor.visitDouble(confidenceScore_ != 0D, confidenceScore_,
              other.confidenceScore_ != 0D, other.confidenceScore_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  String s = input.readStringRequireUtf8();

                  text_ = s;
                  break;
                }
                case 17: {

                  confidenceScore_ = input.readDouble();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (cobaltspeech.diatheke.DiathekeOuterClass.ASRResponse.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:cobaltspeech.diatheke.ASRResponse)
    private static final cobaltspeech.diatheke.DiathekeOuterClass.ASRResponse DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ASRResponse();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static cobaltspeech.diatheke.DiathekeOuterClass.ASRResponse getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<ASRResponse> PARSER;

    public static com.google.protobuf.Parser<ASRResponse> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface TTSRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:cobaltspeech.diatheke.TTSRequest)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * The model to use for TTS (defined in the server config file).
     * </pre>
     *
     * <code>optional string model = 1;</code>
     */
    java.lang.String getModel();
    /**
     * <pre>
     * The model to use for TTS (defined in the server config file).
     * </pre>
     *
     * <code>optional string model = 1;</code>
     */
    com.google.protobuf.ByteString
        getModelBytes();

    /**
     * <pre>
     * Text to synthesize
     * </pre>
     *
     * <code>optional string text = 2;</code>
     */
    java.lang.String getText();
    /**
     * <pre>
     * Text to synthesize
     * </pre>
     *
     * <code>optional string text = 2;</code>
     */
    com.google.protobuf.ByteString
        getTextBytes();
  }
  /**
   * <pre>
   * Request to synthesize speech unrelated to a session.
   * </pre>
   *
   * Protobuf type {@code cobaltspeech.diatheke.TTSRequest}
   */
  public  static final class TTSRequest extends
      com.google.protobuf.GeneratedMessageLite<
          TTSRequest, TTSRequest.Builder> implements
      // @@protoc_insertion_point(message_implements:cobaltspeech.diatheke.TTSRequest)
      TTSRequestOrBuilder {
    private TTSRequest() {
      model_ = "";
      text_ = "";
    }
    public static final int MODEL_FIELD_NUMBER = 1;
    private java.lang.String model_;
    /**
     * <pre>
     * The model to use for TTS (defined in the server config file).
     * </pre>
     *
     * <code>optional string model = 1;</code>
     */
    public java.lang.String getModel() {
      return model_;
    }
    /**
     * <pre>
     * The model to use for TTS (defined in the server config file).
     * </pre>
     *
     * <code>optional string model = 1;</code>
     */
    public com.google.protobuf.ByteString
        getModelBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(model_);
    }
    /**
     * <pre>
     * The model to use for TTS (defined in the server config file).
     * </pre>
     *
     * <code>optional string model = 1;</code>
     */
    private void setModel(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      model_ = value;
    }
    /**
     * <pre>
     * The model to use for TTS (defined in the server config file).
     * </pre>
     *
     * <code>optional string model = 1;</code>
     */
    private void clearModel() {
      
      model_ = getDefaultInstance().getModel();
    }
    /**
     * <pre>
     * The model to use for TTS (defined in the server config file).
     * </pre>
     *
     * <code>optional string model = 1;</code>
     */
    private void setModelBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      model_ = value.toStringUtf8();
    }

    public static final int TEXT_FIELD_NUMBER = 2;
    private java.lang.String text_;
    /**
     * <pre>
     * Text to synthesize
     * </pre>
     *
     * <code>optional string text = 2;</code>
     */
    public java.lang.String getText() {
      return text_;
    }
    /**
     * <pre>
     * Text to synthesize
     * </pre>
     *
     * <code>optional string text = 2;</code>
     */
    public com.google.protobuf.ByteString
        getTextBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(text_);
    }
    /**
     * <pre>
     * Text to synthesize
     * </pre>
     *
     * <code>optional string text = 2;</code>
     */
    private void setText(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      text_ = value;
    }
    /**
     * <pre>
     * Text to synthesize
     * </pre>
     *
     * <code>optional string text = 2;</code>
     */
    private void clearText() {
      
      text_ = getDefaultInstance().getText();
    }
    /**
     * <pre>
     * Text to synthesize
     * </pre>
     *
     * <code>optional string text = 2;</code>
     */
    private void setTextBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      text_ = value.toStringUtf8();
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!model_.isEmpty()) {
        output.writeString(1, getModel());
      }
      if (!text_.isEmpty()) {
        output.writeString(2, getText());
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (!model_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getModel());
      }
      if (!text_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(2, getText());
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static cobaltspeech.diatheke.DiathekeOuterClass.TTSRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.TTSRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.TTSRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.TTSRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.TTSRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.TTSRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.TTSRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.TTSRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.TTSRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.TTSRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(cobaltspeech.diatheke.DiathekeOuterClass.TTSRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * Request to synthesize speech unrelated to a session.
     * </pre>
     *
     * Protobuf type {@code cobaltspeech.diatheke.TTSRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          cobaltspeech.diatheke.DiathekeOuterClass.TTSRequest, Builder> implements
        // @@protoc_insertion_point(builder_implements:cobaltspeech.diatheke.TTSRequest)
        cobaltspeech.diatheke.DiathekeOuterClass.TTSRequestOrBuilder {
      // Construct using cobaltspeech.diatheke.DiathekeOuterClass.TTSRequest.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * The model to use for TTS (defined in the server config file).
       * </pre>
       *
       * <code>optional string model = 1;</code>
       */
      public java.lang.String getModel() {
        return instance.getModel();
      }
      /**
       * <pre>
       * The model to use for TTS (defined in the server config file).
       * </pre>
       *
       * <code>optional string model = 1;</code>
       */
      public com.google.protobuf.ByteString
          getModelBytes() {
        return instance.getModelBytes();
      }
      /**
       * <pre>
       * The model to use for TTS (defined in the server config file).
       * </pre>
       *
       * <code>optional string model = 1;</code>
       */
      public Builder setModel(
          java.lang.String value) {
        copyOnWrite();
        instance.setModel(value);
        return this;
      }
      /**
       * <pre>
       * The model to use for TTS (defined in the server config file).
       * </pre>
       *
       * <code>optional string model = 1;</code>
       */
      public Builder clearModel() {
        copyOnWrite();
        instance.clearModel();
        return this;
      }
      /**
       * <pre>
       * The model to use for TTS (defined in the server config file).
       * </pre>
       *
       * <code>optional string model = 1;</code>
       */
      public Builder setModelBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setModelBytes(value);
        return this;
      }

      /**
       * <pre>
       * Text to synthesize
       * </pre>
       *
       * <code>optional string text = 2;</code>
       */
      public java.lang.String getText() {
        return instance.getText();
      }
      /**
       * <pre>
       * Text to synthesize
       * </pre>
       *
       * <code>optional string text = 2;</code>
       */
      public com.google.protobuf.ByteString
          getTextBytes() {
        return instance.getTextBytes();
      }
      /**
       * <pre>
       * Text to synthesize
       * </pre>
       *
       * <code>optional string text = 2;</code>
       */
      public Builder setText(
          java.lang.String value) {
        copyOnWrite();
        instance.setText(value);
        return this;
      }
      /**
       * <pre>
       * Text to synthesize
       * </pre>
       *
       * <code>optional string text = 2;</code>
       */
      public Builder clearText() {
        copyOnWrite();
        instance.clearText();
        return this;
      }
      /**
       * <pre>
       * Text to synthesize
       * </pre>
       *
       * <code>optional string text = 2;</code>
       */
      public Builder setTextBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setTextBytes(value);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:cobaltspeech.diatheke.TTSRequest)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new cobaltspeech.diatheke.DiathekeOuterClass.TTSRequest();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          cobaltspeech.diatheke.DiathekeOuterClass.TTSRequest other = (cobaltspeech.diatheke.DiathekeOuterClass.TTSRequest) arg1;
          model_ = visitor.visitString(!model_.isEmpty(), model_,
              !other.model_.isEmpty(), other.model_);
          text_ = visitor.visitString(!text_.isEmpty(), text_,
              !other.text_.isEmpty(), other.text_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  String s = input.readStringRequireUtf8();

                  model_ = s;
                  break;
                }
                case 18: {
                  String s = input.readStringRequireUtf8();

                  text_ = s;
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (cobaltspeech.diatheke.DiathekeOuterClass.TTSRequest.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:cobaltspeech.diatheke.TTSRequest)
    private static final cobaltspeech.diatheke.DiathekeOuterClass.TTSRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new TTSRequest();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static cobaltspeech.diatheke.DiathekeOuterClass.TTSRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<TTSRequest> PARSER;

    public static com.google.protobuf.Parser<TTSRequest> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface TTSResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:cobaltspeech.diatheke.TTSResponse)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * The synthesized audio data. The data encoding will match what was
     * specified in the server configuration.
     * </pre>
     *
     * <code>optional bytes data = 1;</code>
     */
    com.google.protobuf.ByteString getData();
  }
  /**
   * <pre>
   * Response for text-to-speech unrelated to a session.
   * </pre>
   *
   * Protobuf type {@code cobaltspeech.diatheke.TTSResponse}
   */
  public  static final class TTSResponse extends
      com.google.protobuf.GeneratedMessageLite<
          TTSResponse, TTSResponse.Builder> implements
      // @@protoc_insertion_point(message_implements:cobaltspeech.diatheke.TTSResponse)
      TTSResponseOrBuilder {
    private TTSResponse() {
      data_ = com.google.protobuf.ByteString.EMPTY;
    }
    public static final int DATA_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString data_;
    /**
     * <pre>
     * The synthesized audio data. The data encoding will match what was
     * specified in the server configuration.
     * </pre>
     *
     * <code>optional bytes data = 1;</code>
     */
    public com.google.protobuf.ByteString getData() {
      return data_;
    }
    /**
     * <pre>
     * The synthesized audio data. The data encoding will match what was
     * specified in the server configuration.
     * </pre>
     *
     * <code>optional bytes data = 1;</code>
     */
    private void setData(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      data_ = value;
    }
    /**
     * <pre>
     * The synthesized audio data. The data encoding will match what was
     * specified in the server configuration.
     * </pre>
     *
     * <code>optional bytes data = 1;</code>
     */
    private void clearData() {
      
      data_ = getDefaultInstance().getData();
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!data_.isEmpty()) {
        output.writeBytes(1, data_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (!data_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, data_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static cobaltspeech.diatheke.DiathekeOuterClass.TTSResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.TTSResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.TTSResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.TTSResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.TTSResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.TTSResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.TTSResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.TTSResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.TTSResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.TTSResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(cobaltspeech.diatheke.DiathekeOuterClass.TTSResponse prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * Response for text-to-speech unrelated to a session.
     * </pre>
     *
     * Protobuf type {@code cobaltspeech.diatheke.TTSResponse}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          cobaltspeech.diatheke.DiathekeOuterClass.TTSResponse, Builder> implements
        // @@protoc_insertion_point(builder_implements:cobaltspeech.diatheke.TTSResponse)
        cobaltspeech.diatheke.DiathekeOuterClass.TTSResponseOrBuilder {
      // Construct using cobaltspeech.diatheke.DiathekeOuterClass.TTSResponse.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * The synthesized audio data. The data encoding will match what was
       * specified in the server configuration.
       * </pre>
       *
       * <code>optional bytes data = 1;</code>
       */
      public com.google.protobuf.ByteString getData() {
        return instance.getData();
      }
      /**
       * <pre>
       * The synthesized audio data. The data encoding will match what was
       * specified in the server configuration.
       * </pre>
       *
       * <code>optional bytes data = 1;</code>
       */
      public Builder setData(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setData(value);
        return this;
      }
      /**
       * <pre>
       * The synthesized audio data. The data encoding will match what was
       * specified in the server configuration.
       * </pre>
       *
       * <code>optional bytes data = 1;</code>
       */
      public Builder clearData() {
        copyOnWrite();
        instance.clearData();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:cobaltspeech.diatheke.TTSResponse)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new cobaltspeech.diatheke.DiathekeOuterClass.TTSResponse();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          cobaltspeech.diatheke.DiathekeOuterClass.TTSResponse other = (cobaltspeech.diatheke.DiathekeOuterClass.TTSResponse) arg1;
          data_ = visitor.visitByteString(data_ != com.google.protobuf.ByteString.EMPTY, data_,
              other.data_ != com.google.protobuf.ByteString.EMPTY, other.data_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {

                  data_ = input.readBytes();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (cobaltspeech.diatheke.DiathekeOuterClass.TTSResponse.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:cobaltspeech.diatheke.TTSResponse)
    private static final cobaltspeech.diatheke.DiathekeOuterClass.TTSResponse DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new TTSResponse();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static cobaltspeech.diatheke.DiathekeOuterClass.TTSResponse getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<TTSResponse> PARSER;

    public static com.google.protobuf.Parser<TTSResponse> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface EmptyOrBuilder extends
      // @@protoc_insertion_point(interface_extends:cobaltspeech.diatheke.Empty)
      com.google.protobuf.MessageLiteOrBuilder {
  }
  /**
   * Protobuf type {@code cobaltspeech.diatheke.Empty}
   */
  public  static final class Empty extends
      com.google.protobuf.GeneratedMessageLite<
          Empty, Empty.Builder> implements
      // @@protoc_insertion_point(message_implements:cobaltspeech.diatheke.Empty)
      EmptyOrBuilder {
    private Empty() {
    }
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      memoizedSerializedSize = size;
      return size;
    }

    public static cobaltspeech.diatheke.DiathekeOuterClass.Empty parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.Empty parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.Empty parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.Empty parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.Empty parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.Empty parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.Empty parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.Empty parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.Empty parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static cobaltspeech.diatheke.DiathekeOuterClass.Empty parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(cobaltspeech.diatheke.DiathekeOuterClass.Empty prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code cobaltspeech.diatheke.Empty}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          cobaltspeech.diatheke.DiathekeOuterClass.Empty, Builder> implements
        // @@protoc_insertion_point(builder_implements:cobaltspeech.diatheke.Empty)
        cobaltspeech.diatheke.DiathekeOuterClass.EmptyOrBuilder {
      // Construct using cobaltspeech.diatheke.DiathekeOuterClass.Empty.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      // @@protoc_insertion_point(builder_scope:cobaltspeech.diatheke.Empty)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new cobaltspeech.diatheke.DiathekeOuterClass.Empty();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          cobaltspeech.diatheke.DiathekeOuterClass.Empty other = (cobaltspeech.diatheke.DiathekeOuterClass.Empty) arg1;
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (cobaltspeech.diatheke.DiathekeOuterClass.Empty.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:cobaltspeech.diatheke.Empty)
    private static final cobaltspeech.diatheke.DiathekeOuterClass.Empty DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new Empty();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static cobaltspeech.diatheke.DiathekeOuterClass.Empty getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<Empty> PARSER;

    public static com.google.protobuf.Parser<Empty> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
