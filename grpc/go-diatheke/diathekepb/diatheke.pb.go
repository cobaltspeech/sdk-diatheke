// Copyright (2020) Cobalt Speech and Language Inc.

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.4
// source: diatheke.proto

package diathekepb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// CommandStatus are the resulting states of a command.
type CommandStatus_StatusCode int32

const (
	// SUCCESS indicates that the command was successfully completed, and the
	// dialog state may now move on to the next state.
	CommandStatus_SUCCESS CommandStatus_StatusCode = 0
	// FAILURE indicates that there was a fatal error running the command.
	// The session will log an error and return to the start state of the
	// model when this status is encountered.
	CommandStatus_FAILURE CommandStatus_StatusCode = 1
)

// Enum value maps for CommandStatus_StatusCode.
var (
	CommandStatus_StatusCode_name = map[int32]string{
		0: "SUCCESS",
		1: "FAILURE",
	}
	CommandStatus_StatusCode_value = map[string]int32{
		"SUCCESS": 0,
		"FAILURE": 1,
	}
)

func (x CommandStatus_StatusCode) Enum() *CommandStatus_StatusCode {
	p := new(CommandStatus_StatusCode)
	*p = x
	return p
}

func (x CommandStatus_StatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommandStatus_StatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_diatheke_proto_enumTypes[0].Descriptor()
}

func (CommandStatus_StatusCode) Type() protoreflect.EnumType {
	return &file_diatheke_proto_enumTypes[0]
}

func (x CommandStatus_StatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommandStatus_StatusCode.Descriptor instead.
func (CommandStatus_StatusCode) EnumDescriptor() ([]byte, []int) {
	return file_diatheke_proto_rawDescGZIP(), []int{8, 0}
}

// The message sent by the server for the `Version` method.
type VersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Server that manages all of the the other components.
	Server string `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
}

func (x *VersionResponse) Reset() {
	*x = VersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diatheke_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionResponse) ProtoMessage() {}

func (x *VersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_diatheke_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionResponse.ProtoReflect.Descriptor instead.
func (*VersionResponse) Descriptor() ([]byte, []int) {
	return file_diatheke_proto_rawDescGZIP(), []int{0}
}

func (x *VersionResponse) GetServer() string {
	if x != nil {
		return x.Server
	}
	return ""
}

// The message sent by the server in response to a Models request.
// Returns an array of model names.
type ModelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Array of models available for use.
	Models []string `protobuf:"bytes,1,rep,name=models,proto3" json:"models,omitempty"`
}

func (x *ModelsResponse) Reset() {
	*x = ModelsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diatheke_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelsResponse) ProtoMessage() {}

func (x *ModelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_diatheke_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelsResponse.ProtoReflect.Descriptor instead.
func (*ModelsResponse) Descriptor() ([]byte, []int) {
	return file_diatheke_proto_rawDescGZIP(), []int{1}
}

func (x *ModelsResponse) GetModels() []string {
	if x != nil {
		return x.Models
	}
	return nil
}

// Request for the NewSession call.
type NewSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// For applications that have more than one model to use for ASR/NLU.
	// ASR grammar can vary between models, as well as sets of commands.
	// Some applications will only have one model.
	Model string `protobuf:"bytes,1,opt,name=model,proto3" json:"model,omitempty"`
}

func (x *NewSessionRequest) Reset() {
	*x = NewSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diatheke_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewSessionRequest) ProtoMessage() {}

func (x *NewSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_diatheke_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewSessionRequest.ProtoReflect.Descriptor instead.
func (*NewSessionRequest) Descriptor() ([]byte, []int) {
	return file_diatheke_proto_rawDescGZIP(), []int{2}
}

func (x *NewSessionRequest) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

// Simple message that only contains the session ID.
type SessionID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Session ID returned from the NewSession call.
	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
}

func (x *SessionID) Reset() {
	*x = SessionID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diatheke_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionID) ProtoMessage() {}

func (x *SessionID) ProtoReflect() protoreflect.Message {
	mi := &file_diatheke_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionID.ProtoReflect.Descriptor instead.
func (*SessionID) Descriptor() ([]byte, []int) {
	return file_diatheke_proto_rawDescGZIP(), []int{3}
}

func (x *SessionID) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

// An event from Diatheke in response to either recognized audio,
// submitted text, or some other transition in the model.
type DiathekeEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Result:
	//	*DiathekeEvent_Command
	//	*DiathekeEvent_Recognize
	//	*DiathekeEvent_Reply
	Result isDiathekeEvent_Result `protobuf_oneof:"result"`
}

func (x *DiathekeEvent) Reset() {
	*x = DiathekeEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diatheke_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiathekeEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiathekeEvent) ProtoMessage() {}

func (x *DiathekeEvent) ProtoReflect() protoreflect.Message {
	mi := &file_diatheke_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiathekeEvent.ProtoReflect.Descriptor instead.
func (*DiathekeEvent) Descriptor() ([]byte, []int) {
	return file_diatheke_proto_rawDescGZIP(), []int{4}
}

func (m *DiathekeEvent) GetResult() isDiathekeEvent_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *DiathekeEvent) GetCommand() *CommandEvent {
	if x, ok := x.GetResult().(*DiathekeEvent_Command); ok {
		return x.Command
	}
	return nil
}

func (x *DiathekeEvent) GetRecognize() *RecognizeEvent {
	if x, ok := x.GetResult().(*DiathekeEvent_Recognize); ok {
		return x.Recognize
	}
	return nil
}

func (x *DiathekeEvent) GetReply() *ReplyEvent {
	if x, ok := x.GetResult().(*DiathekeEvent_Reply); ok {
		return x.Reply
	}
	return nil
}

type isDiathekeEvent_Result interface {
	isDiathekeEvent_Result()
}

type DiathekeEvent_Command struct {
	// Indicates Diatheke found an actionable state in the dialog,
	// and requests the client to perform the given command.
	//
	// Users should always call CommandFinished after receiving
	// this event so that Diatheke can update the dialog state when the
	// command is complete.
	Command *CommandEvent `protobuf:"bytes,1,opt,name=command,proto3,oneof"`
}

type DiathekeEvent_Recognize struct {
	// An event indicating whether pushed text and audio was recognized by
	// ASR and/or Diatheke.
	Recognize *RecognizeEvent `protobuf:"bytes,2,opt,name=recognize,proto3,oneof"`
}

type DiathekeEvent_Reply struct {
	// The textual reply from Diatheke in the conversation (not to be
	// confused with the server concepts of request and response). For
	// example, this could be a question to solicit more information
	// from the user, a status report, or any other reply defined by
	// the Diatheke model. The text of this message is also provided in
	// the AudioReply stream (if one is open).
	Reply *ReplyEvent `protobuf:"bytes,3,opt,name=reply,proto3,oneof"`
}

func (*DiathekeEvent_Command) isDiathekeEvent_Result() {}

func (*DiathekeEvent_Recognize) isDiathekeEvent_Result() {}

func (*DiathekeEvent_Reply) isDiathekeEvent_Result() {}

// A CommandEvent occurs when Diatheke wants the client to execute the
// given command.
type CommandEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the command that should be run.  i.e. "COM01" for Command #01.
	CommandId string `protobuf:"bytes,1,opt,name=command_id,json=commandId,proto3" json:"command_id,omitempty"`
	// A generic map of parameters (name, value). The parameters are
	// defined in the Diatheke model. Depending on the command, these
	// parameters should be sent back with the CommandStatus update.
	Parameters map[string]string `protobuf:"bytes,2,rep,name=parameters,proto3" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// ID to keep track of the dialog state when the command is requested.
	// This field is required in the CommandStatus message so that Diatheke
	// can correctly update the dialog state when CommandFinished is called.
	CommandStateId string `protobuf:"bytes,3,opt,name=command_state_id,json=commandStateId,proto3" json:"command_state_id,omitempty"`
}

func (x *CommandEvent) Reset() {
	*x = CommandEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diatheke_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandEvent) ProtoMessage() {}

func (x *CommandEvent) ProtoReflect() protoreflect.Message {
	mi := &file_diatheke_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandEvent.ProtoReflect.Descriptor instead.
func (*CommandEvent) Descriptor() ([]byte, []int) {
	return file_diatheke_proto_rawDescGZIP(), []int{5}
}

func (x *CommandEvent) GetCommandId() string {
	if x != nil {
		return x.CommandId
	}
	return ""
}

func (x *CommandEvent) GetParameters() map[string]string {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *CommandEvent) GetCommandStateId() string {
	if x != nil {
		return x.CommandStateId
	}
	return ""
}

// A RecognizeEvent occurs if a session's audio input has a transcription
// available, or if the PushText method was called. In both cases, the
// event will indicate whether the text was recognized as a valid intent
// by the Diatheke model.
type RecognizeEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The pushed text or transcription of audio sent to Diatheke.
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	// True if the submitted text or audio transcription was recognized by the
	// Diatheke model as a valid intent or entity.
	ValidInput bool `protobuf:"varint,2,opt,name=valid_input,json=validInput,proto3" json:"valid_input,omitempty"`
}

func (x *RecognizeEvent) Reset() {
	*x = RecognizeEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diatheke_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecognizeEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecognizeEvent) ProtoMessage() {}

func (x *RecognizeEvent) ProtoReflect() protoreflect.Message {
	mi := &file_diatheke_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecognizeEvent.ProtoReflect.Descriptor instead.
func (*RecognizeEvent) Descriptor() ([]byte, []int) {
	return file_diatheke_proto_rawDescGZIP(), []int{6}
}

func (x *RecognizeEvent) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *RecognizeEvent) GetValidInput() bool {
	if x != nil {
		return x.ValidInput
	}
	return false
}

// A ReplyEvent occurs when Diatheke has a reply in the conversation (not
// to be confused with the server concepts of request and response). These
// correspond to replies defined in the Diatheke model. For example, it might
// be a prompt for additional information from the user, a status update,
// or a confirmation. ReplyEvents are not generated in response to
// StreamTTS calls.
type ReplyEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Text of the reply event (defined by the Diatheke model).
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	// Label of the reply event (defined by the Diatheke model).
	Label string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *ReplyEvent) Reset() {
	*x = ReplyEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diatheke_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyEvent) ProtoMessage() {}

func (x *ReplyEvent) ProtoReflect() protoreflect.Message {
	mi := &file_diatheke_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyEvent.ProtoReflect.Descriptor instead.
func (*ReplyEvent) Descriptor() ([]byte, []int) {
	return file_diatheke_proto_rawDescGZIP(), []int{7}
}

func (x *ReplyEvent) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *ReplyEvent) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

// The final status of an executed command.
type CommandStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// session_id should be the same as the status id returned from
	// NewSessionResponse.
	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// ID of the command as given in the RunCommand object.
	CommandId    string                   `protobuf:"bytes,2,opt,name=command_id,json=commandId,proto3" json:"command_id,omitempty"`
	ReturnStatus CommandStatus_StatusCode `protobuf:"varint,3,opt,name=return_status,json=returnStatus,proto3,enum=cobaltspeech.diatheke.CommandStatus_StatusCode" json:"return_status,omitempty"`
	// Parameters to return to Diatheke. For example, the map might contain
	// the entry "temperature", which was populated with a value of "30"
	// after the command finished. Expected parameters are defined by the
	// Diatheke model.
	OutputParameters map[string]string `protobuf:"bytes,4,rep,name=output_parameters,json=outputParameters,proto3" json:"output_parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Set this field with an error message if a fatal error occured while
	// executing the command (return_status == FAILURE).
	ErrorMessageText string `protobuf:"bytes,5,opt,name=error_message_text,json=errorMessageText,proto3" json:"error_message_text,omitempty"`
	// State ID from the original CommandEvent. This field is required for
	// Diatheke to correctly update the dialog state when CommandFinished
	// is called.
	CommandStateId string `protobuf:"bytes,6,opt,name=command_state_id,json=commandStateId,proto3" json:"command_state_id,omitempty"`
}

func (x *CommandStatus) Reset() {
	*x = CommandStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diatheke_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandStatus) ProtoMessage() {}

func (x *CommandStatus) ProtoReflect() protoreflect.Message {
	mi := &file_diatheke_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandStatus.ProtoReflect.Descriptor instead.
func (*CommandStatus) Descriptor() ([]byte, []int) {
	return file_diatheke_proto_rawDescGZIP(), []int{8}
}

func (x *CommandStatus) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *CommandStatus) GetCommandId() string {
	if x != nil {
		return x.CommandId
	}
	return ""
}

func (x *CommandStatus) GetReturnStatus() CommandStatus_StatusCode {
	if x != nil {
		return x.ReturnStatus
	}
	return CommandStatus_SUCCESS
}

func (x *CommandStatus) GetOutputParameters() map[string]string {
	if x != nil {
		return x.OutputParameters
	}
	return nil
}

func (x *CommandStatus) GetErrorMessageText() string {
	if x != nil {
		return x.ErrorMessageText
	}
	return ""
}

func (x *CommandStatus) GetCommandStateId() string {
	if x != nil {
		return x.CommandStateId
	}
	return ""
}

// Provides input audio data for StreamAudioInput. The first message
// sent must contain the session ID only. All subsequent messages
// must contain audio data only.
type AudioInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//	*AudioInput_SessionId
	//	*AudioInput_Data
	Request isAudioInput_Request `protobuf_oneof:"request"`
}

func (x *AudioInput) Reset() {
	*x = AudioInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diatheke_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioInput) ProtoMessage() {}

func (x *AudioInput) ProtoReflect() protoreflect.Message {
	mi := &file_diatheke_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioInput.ProtoReflect.Descriptor instead.
func (*AudioInput) Descriptor() ([]byte, []int) {
	return file_diatheke_proto_rawDescGZIP(), []int{9}
}

func (m *AudioInput) GetRequest() isAudioInput_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *AudioInput) GetSessionId() string {
	if x, ok := x.GetRequest().(*AudioInput_SessionId); ok {
		return x.SessionId
	}
	return ""
}

func (x *AudioInput) GetData() []byte {
	if x, ok := x.GetRequest().(*AudioInput_Data); ok {
		return x.Data
	}
	return nil
}

type isAudioInput_Request interface {
	isAudioInput_Request()
}

type AudioInput_SessionId struct {
	// Session ID returned from the NewSession call.
	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3,oneof"`
}

type AudioInput_Data struct {
	// Audio data to process. The encoding of the data should match what
	// was specified in the Diatheke server configuration.
	// NOTE: If the audio data is empty, the server may interpret it as
	//       the end of the stream and stop accepting further messages.
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3,oneof"`
}

func (*AudioInput_SessionId) isAudioInput_Request() {}

func (*AudioInput_Data) isAudioInput_Request() {}

// An AudioReply is the verbal and textual reply that Diatheke returns as
// part of a conversation (not to be confused with the server concepts of
// request and response).
type AudioReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The label defined in the Diatheke model. Identifies which reply
	// in the model this message corresponds to.
	Label string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	// Types that are assignable to OutputMessage:
	//	*AudioReply_Text
	//	*AudioReply_Data
	//	*AudioReply_End
	OutputMessage isAudioReply_OutputMessage `protobuf_oneof:"output_message"`
}

func (x *AudioReply) Reset() {
	*x = AudioReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diatheke_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioReply) ProtoMessage() {}

func (x *AudioReply) ProtoReflect() protoreflect.Message {
	mi := &file_diatheke_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioReply.ProtoReflect.Descriptor instead.
func (*AudioReply) Descriptor() ([]byte, []int) {
	return file_diatheke_proto_rawDescGZIP(), []int{10}
}

func (x *AudioReply) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (m *AudioReply) GetOutputMessage() isAudioReply_OutputMessage {
	if m != nil {
		return m.OutputMessage
	}
	return nil
}

func (x *AudioReply) GetText() string {
	if x, ok := x.GetOutputMessage().(*AudioReply_Text); ok {
		return x.Text
	}
	return ""
}

func (x *AudioReply) GetData() []byte {
	if x, ok := x.GetOutputMessage().(*AudioReply_Data); ok {
		return x.Data
	}
	return nil
}

func (x *AudioReply) GetEnd() *Empty {
	if x, ok := x.GetOutputMessage().(*AudioReply_End); ok {
		return x.End
	}
	return nil
}

type isAudioReply_OutputMessage interface {
	isAudioReply_OutputMessage()
}

type AudioReply_Text struct {
	// The reply text as defined in the Diatheke model. This is the first
	// message that will be received for an AudioReply. It contains the
	// same text as the corresponding ReplyEvent in the session's event
	// stream.
	Text string `protobuf:"bytes,2,opt,name=text,proto3,oneof"`
}

type AudioReply_Data struct {
	// The audio data from TTS. There can be any number of these messages
	// for an AudioReply after the first text message and before the final
	// end message. The encoding of the data will match what was specified
	// in the server configuration.
	Data []byte `protobuf:"bytes,3,opt,name=data,proto3,oneof"`
}

type AudioReply_End struct {
	// Indicates that TTS has finished streaming audio for the reply. This
	// is the last message that will be received for an AudioReply.
	End *Empty `protobuf:"bytes,4,opt,name=end,proto3,oneof"`
}

func (*AudioReply_Text) isAudioReply_OutputMessage() {}

func (*AudioReply_Data) isAudioReply_OutputMessage() {}

func (*AudioReply_End) isAudioReply_OutputMessage() {}

// Request to push text to Diatheke as part of a conversation.
type PushTextRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Session ID returned from the NewSession call.
	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// User input. This could be a transcription from manually run ASR,
	// text selected from a dropdown list, entered in a prompt, etc.
	Text string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *PushTextRequest) Reset() {
	*x = PushTextRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diatheke_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushTextRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushTextRequest) ProtoMessage() {}

func (x *PushTextRequest) ProtoReflect() protoreflect.Message {
	mi := &file_diatheke_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushTextRequest.ProtoReflect.Descriptor instead.
func (*PushTextRequest) Descriptor() ([]byte, []int) {
	return file_diatheke_proto_rawDescGZIP(), []int{11}
}

func (x *PushTextRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *PushTextRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

// Request for streaming ASR unrelated to a session.
type ASRRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to AsrData:
	//	*ASRRequest_Model
	//	*ASRRequest_Audio
	AsrData isASRRequest_AsrData `protobuf_oneof:"asr_data"`
}

func (x *ASRRequest) Reset() {
	*x = ASRRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diatheke_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ASRRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ASRRequest) ProtoMessage() {}

func (x *ASRRequest) ProtoReflect() protoreflect.Message {
	mi := &file_diatheke_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ASRRequest.ProtoReflect.Descriptor instead.
func (*ASRRequest) Descriptor() ([]byte, []int) {
	return file_diatheke_proto_rawDescGZIP(), []int{12}
}

func (m *ASRRequest) GetAsrData() isASRRequest_AsrData {
	if m != nil {
		return m.AsrData
	}
	return nil
}

func (x *ASRRequest) GetModel() string {
	if x, ok := x.GetAsrData().(*ASRRequest_Model); ok {
		return x.Model
	}
	return ""
}

func (x *ASRRequest) GetAudio() []byte {
	if x, ok := x.GetAsrData().(*ASRRequest_Audio); ok {
		return x.Audio
	}
	return nil
}

type isASRRequest_AsrData interface {
	isASRRequest_AsrData()
}

type ASRRequest_Model struct {
	// The Cubic model to use for ASR. This message should always be sent
	// before any audio data is sent.
	Model string `protobuf:"bytes,1,opt,name=model,proto3,oneof"`
}

type ASRRequest_Audio struct {
	// Audio data to process. The encoding of the data should match what
	// was specified in the Diatheke server configuration.
	// NOTE: If the audio data is empty, the server may interpret it as
	//       the end of the stream and stop accepting further messages.
	Audio []byte `protobuf:"bytes,2,opt,name=audio,proto3,oneof"`
}

func (*ASRRequest_Model) isASRRequest_AsrData() {}

func (*ASRRequest_Audio) isASRRequest_AsrData() {}

// ASRResponse contains speech recognition results.
type ASRResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Text is the Cubic engine's formatted transcript of pushed audio.
	// This field will be the 1-best alternative.
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	// The confidence score is a floating point number between 0.0 - 1.0. A
	// score of 1.0 indicates that the ASR engine is 100% confident in the
	// transcription.
	ConfidenceScore float64 `protobuf:"fixed64,2,opt,name=confidence_score,json=confidenceScore,proto3" json:"confidence_score,omitempty"`
}

func (x *ASRResponse) Reset() {
	*x = ASRResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diatheke_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ASRResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ASRResponse) ProtoMessage() {}

func (x *ASRResponse) ProtoReflect() protoreflect.Message {
	mi := &file_diatheke_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ASRResponse.ProtoReflect.Descriptor instead.
func (*ASRResponse) Descriptor() ([]byte, []int) {
	return file_diatheke_proto_rawDescGZIP(), []int{13}
}

func (x *ASRResponse) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *ASRResponse) GetConfidenceScore() float64 {
	if x != nil {
		return x.ConfidenceScore
	}
	return 0
}

// Request to synthesize speech unrelated to a session.
type TTSRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Luna model to use for TTS (defined in the server config file).
	Model string `protobuf:"bytes,1,opt,name=model,proto3" json:"model,omitempty"`
	// Text to synthesize
	Text string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *TTSRequest) Reset() {
	*x = TTSRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diatheke_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TTSRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TTSRequest) ProtoMessage() {}

func (x *TTSRequest) ProtoReflect() protoreflect.Message {
	mi := &file_diatheke_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TTSRequest.ProtoReflect.Descriptor instead.
func (*TTSRequest) Descriptor() ([]byte, []int) {
	return file_diatheke_proto_rawDescGZIP(), []int{14}
}

func (x *TTSRequest) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *TTSRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

// Response for text-to-speech unrelated to a session.
type TTSResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The synthesized audio data. The data encoding will match what was
	// specified in the server configuration.
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TTSResponse) Reset() {
	*x = TTSResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diatheke_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TTSResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TTSResponse) ProtoMessage() {}

func (x *TTSResponse) ProtoReflect() protoreflect.Message {
	mi := &file_diatheke_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TTSResponse.ProtoReflect.Descriptor instead.
func (*TTSResponse) Descriptor() ([]byte, []int) {
	return file_diatheke_proto_rawDescGZIP(), []int{15}
}

func (x *TTSResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diatheke_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_diatheke_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_diatheke_proto_rawDescGZIP(), []int{16}
}

var File_diatheke_proto protoreflect.FileDescriptor

var file_diatheke_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x15, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x64,
	0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x22, 0x29, 0x0a, 0x0f, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x22, 0x28, 0x0a, 0x0e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x22, 0x29, 0x0a, 0x11,
	0x4e, 0x65, 0x77, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x22, 0x2a, 0x0a, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x22, 0xdc, 0x01, 0x0a, 0x0d, 0x44, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73,
	0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x45, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x62, 0x61,
	0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b,
	0x65, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x7a, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x7a, 0x65, 0x12, 0x39, 0x0a,
	0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63,
	0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x64, 0x69, 0x61, 0x74,
	0x68, 0x65, 0x6b, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0xeb, 0x01, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x49, 0x64, 0x12, 0x53, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73,
	0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49,
	0x64, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x45, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x7a, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x36, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22,
	0xd1, 0x03, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x12,
	0x54, 0x0a, 0x0d, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73,
	0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x67, 0x0a, 0x11, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e,
	0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2c,
	0x0a, 0x12, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x28, 0x0a, 0x10,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x49, 0x64, 0x1a, 0x43, 0x0a, 0x15, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x26, 0x0a, 0x0a, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52,
	0x45, 0x10, 0x01, 0x22, 0x4e, 0x0a, 0x0a, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x1f, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x92, 0x01, 0x0a, 0x0a, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x14,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68,
	0x2e, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48,
	0x00, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x44, 0x0a, 0x0f, 0x50, 0x75, 0x73, 0x68,
	0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x48,
	0x0a, 0x0a, 0x41, 0x53, 0x52, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x05,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x42, 0x0a, 0x0a, 0x08,
	0x61, 0x73, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4c, 0x0a, 0x0b, 0x41, 0x53, 0x52, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x36, 0x0a, 0x0a, 0x54, 0x54, 0x53, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x21,
	0x0a, 0x0b, 0x54, 0x54, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0xd3, 0x07, 0x0a, 0x08, 0x44,
	0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x12, 0x51, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1c, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63,
	0x68, 0x2e, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x26, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e,
	0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x06, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x12, 0x1c, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65,
	0x65, 0x63, 0x68, 0x2e, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x25, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63,
	0x68, 0x2e, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x0a, 0x4e,
	0x65, 0x77, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x2e, 0x63, 0x6f, 0x62, 0x61,
	0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b,
	0x65, 0x2e, 0x4e, 0x65, 0x77, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65,
	0x63, 0x68, 0x2e, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x2e, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0a, 0x45, 0x6e, 0x64, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70,
	0x65, 0x65, 0x63, 0x68, 0x2e, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x2e, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x1a, 0x1c, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74,
	0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x12, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x20, 0x2e,
	0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x64, 0x69, 0x61,
	0x74, 0x68, 0x65, 0x6b, 0x65, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x1a,
	0x24, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x64,
	0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x2e, 0x44, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x00, 0x30, 0x01, 0x12, 0x57, 0x0a, 0x0f, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x24, 0x2e, 0x63,
	0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x64, 0x69, 0x61, 0x74,
	0x68, 0x65, 0x6b, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x1a, 0x1c, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63,
	0x68, 0x2e, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x57, 0x0a, 0x10, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x21, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73,
	0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x2e, 0x41,
	0x75, 0x64, 0x69, 0x6f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x1c, 0x2e, 0x63, 0x6f, 0x62, 0x61,
	0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b,
	0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x28, 0x01, 0x12, 0x5d, 0x0a, 0x12, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65,
	0x73, 0x12, 0x20, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68,
	0x2e, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x1a, 0x21, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65,
	0x63, 0x68, 0x2e, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x2e, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x30, 0x01, 0x12, 0x52, 0x0a, 0x08, 0x50, 0x75,
	0x73, 0x68, 0x54, 0x65, 0x78, 0x74, 0x12, 0x26, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73,
	0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x2e, 0x50,
	0x75, 0x73, 0x68, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c,
	0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x64, 0x69,
	0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x58,
	0x0a, 0x09, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x53, 0x52, 0x12, 0x21, 0x2e, 0x63, 0x6f,
	0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x64, 0x69, 0x61, 0x74, 0x68,
	0x65, 0x6b, 0x65, 0x2e, 0x41, 0x53, 0x52, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22,
	0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x64, 0x69,
	0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x2e, 0x41, 0x53, 0x52, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x56, 0x0a, 0x09, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x54, 0x54, 0x53, 0x12, 0x21, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c, 0x74, 0x73, 0x70,
	0x65, 0x65, 0x63, 0x68, 0x2e, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x2e, 0x54, 0x54,
	0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x63, 0x6f, 0x62, 0x61, 0x6c,
	0x74, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65,
	0x2e, 0x54, 0x54, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01,
	0x42, 0x0c, 0x5a, 0x0a, 0x64, 0x69, 0x61, 0x74, 0x68, 0x65, 0x6b, 0x65, 0x70, 0x62, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_diatheke_proto_rawDescOnce sync.Once
	file_diatheke_proto_rawDescData = file_diatheke_proto_rawDesc
)

func file_diatheke_proto_rawDescGZIP() []byte {
	file_diatheke_proto_rawDescOnce.Do(func() {
		file_diatheke_proto_rawDescData = protoimpl.X.CompressGZIP(file_diatheke_proto_rawDescData)
	})
	return file_diatheke_proto_rawDescData
}

var file_diatheke_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_diatheke_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_diatheke_proto_goTypes = []interface{}{
	(CommandStatus_StatusCode)(0), // 0: cobaltspeech.diatheke.CommandStatus.StatusCode
	(*VersionResponse)(nil),       // 1: cobaltspeech.diatheke.VersionResponse
	(*ModelsResponse)(nil),        // 2: cobaltspeech.diatheke.ModelsResponse
	(*NewSessionRequest)(nil),     // 3: cobaltspeech.diatheke.NewSessionRequest
	(*SessionID)(nil),             // 4: cobaltspeech.diatheke.SessionID
	(*DiathekeEvent)(nil),         // 5: cobaltspeech.diatheke.DiathekeEvent
	(*CommandEvent)(nil),          // 6: cobaltspeech.diatheke.CommandEvent
	(*RecognizeEvent)(nil),        // 7: cobaltspeech.diatheke.RecognizeEvent
	(*ReplyEvent)(nil),            // 8: cobaltspeech.diatheke.ReplyEvent
	(*CommandStatus)(nil),         // 9: cobaltspeech.diatheke.CommandStatus
	(*AudioInput)(nil),            // 10: cobaltspeech.diatheke.AudioInput
	(*AudioReply)(nil),            // 11: cobaltspeech.diatheke.AudioReply
	(*PushTextRequest)(nil),       // 12: cobaltspeech.diatheke.PushTextRequest
	(*ASRRequest)(nil),            // 13: cobaltspeech.diatheke.ASRRequest
	(*ASRResponse)(nil),           // 14: cobaltspeech.diatheke.ASRResponse
	(*TTSRequest)(nil),            // 15: cobaltspeech.diatheke.TTSRequest
	(*TTSResponse)(nil),           // 16: cobaltspeech.diatheke.TTSResponse
	(*Empty)(nil),                 // 17: cobaltspeech.diatheke.Empty
	nil,                           // 18: cobaltspeech.diatheke.CommandEvent.ParametersEntry
	nil,                           // 19: cobaltspeech.diatheke.CommandStatus.OutputParametersEntry
}
var file_diatheke_proto_depIdxs = []int32{
	6,  // 0: cobaltspeech.diatheke.DiathekeEvent.command:type_name -> cobaltspeech.diatheke.CommandEvent
	7,  // 1: cobaltspeech.diatheke.DiathekeEvent.recognize:type_name -> cobaltspeech.diatheke.RecognizeEvent
	8,  // 2: cobaltspeech.diatheke.DiathekeEvent.reply:type_name -> cobaltspeech.diatheke.ReplyEvent
	18, // 3: cobaltspeech.diatheke.CommandEvent.parameters:type_name -> cobaltspeech.diatheke.CommandEvent.ParametersEntry
	0,  // 4: cobaltspeech.diatheke.CommandStatus.return_status:type_name -> cobaltspeech.diatheke.CommandStatus.StatusCode
	19, // 5: cobaltspeech.diatheke.CommandStatus.output_parameters:type_name -> cobaltspeech.diatheke.CommandStatus.OutputParametersEntry
	17, // 6: cobaltspeech.diatheke.AudioReply.end:type_name -> cobaltspeech.diatheke.Empty
	17, // 7: cobaltspeech.diatheke.Diatheke.Version:input_type -> cobaltspeech.diatheke.Empty
	17, // 8: cobaltspeech.diatheke.Diatheke.Models:input_type -> cobaltspeech.diatheke.Empty
	3,  // 9: cobaltspeech.diatheke.Diatheke.NewSession:input_type -> cobaltspeech.diatheke.NewSessionRequest
	4,  // 10: cobaltspeech.diatheke.Diatheke.EndSession:input_type -> cobaltspeech.diatheke.SessionID
	4,  // 11: cobaltspeech.diatheke.Diatheke.SessionEventStream:input_type -> cobaltspeech.diatheke.SessionID
	9,  // 12: cobaltspeech.diatheke.Diatheke.CommandFinished:input_type -> cobaltspeech.diatheke.CommandStatus
	10, // 13: cobaltspeech.diatheke.Diatheke.StreamAudioInput:input_type -> cobaltspeech.diatheke.AudioInput
	4,  // 14: cobaltspeech.diatheke.Diatheke.StreamAudioReplies:input_type -> cobaltspeech.diatheke.SessionID
	12, // 15: cobaltspeech.diatheke.Diatheke.PushText:input_type -> cobaltspeech.diatheke.PushTextRequest
	13, // 16: cobaltspeech.diatheke.Diatheke.StreamASR:input_type -> cobaltspeech.diatheke.ASRRequest
	15, // 17: cobaltspeech.diatheke.Diatheke.StreamTTS:input_type -> cobaltspeech.diatheke.TTSRequest
	1,  // 18: cobaltspeech.diatheke.Diatheke.Version:output_type -> cobaltspeech.diatheke.VersionResponse
	2,  // 19: cobaltspeech.diatheke.Diatheke.Models:output_type -> cobaltspeech.diatheke.ModelsResponse
	4,  // 20: cobaltspeech.diatheke.Diatheke.NewSession:output_type -> cobaltspeech.diatheke.SessionID
	17, // 21: cobaltspeech.diatheke.Diatheke.EndSession:output_type -> cobaltspeech.diatheke.Empty
	5,  // 22: cobaltspeech.diatheke.Diatheke.SessionEventStream:output_type -> cobaltspeech.diatheke.DiathekeEvent
	17, // 23: cobaltspeech.diatheke.Diatheke.CommandFinished:output_type -> cobaltspeech.diatheke.Empty
	17, // 24: cobaltspeech.diatheke.Diatheke.StreamAudioInput:output_type -> cobaltspeech.diatheke.Empty
	11, // 25: cobaltspeech.diatheke.Diatheke.StreamAudioReplies:output_type -> cobaltspeech.diatheke.AudioReply
	17, // 26: cobaltspeech.diatheke.Diatheke.PushText:output_type -> cobaltspeech.diatheke.Empty
	14, // 27: cobaltspeech.diatheke.Diatheke.StreamASR:output_type -> cobaltspeech.diatheke.ASRResponse
	16, // 28: cobaltspeech.diatheke.Diatheke.StreamTTS:output_type -> cobaltspeech.diatheke.TTSResponse
	18, // [18:29] is the sub-list for method output_type
	7,  // [7:18] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_diatheke_proto_init() }
func file_diatheke_proto_init() {
	if File_diatheke_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_diatheke_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diatheke_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diatheke_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diatheke_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diatheke_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiathekeEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diatheke_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diatheke_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecognizeEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diatheke_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diatheke_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diatheke_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudioInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diatheke_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudioReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diatheke_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushTextRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diatheke_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ASRRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diatheke_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ASRResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diatheke_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TTSRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diatheke_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TTSResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diatheke_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_diatheke_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*DiathekeEvent_Command)(nil),
		(*DiathekeEvent_Recognize)(nil),
		(*DiathekeEvent_Reply)(nil),
	}
	file_diatheke_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*AudioInput_SessionId)(nil),
		(*AudioInput_Data)(nil),
	}
	file_diatheke_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*AudioReply_Text)(nil),
		(*AudioReply_Data)(nil),
		(*AudioReply_End)(nil),
	}
	file_diatheke_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*ASRRequest_Model)(nil),
		(*ASRRequest_Audio)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_diatheke_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_diatheke_proto_goTypes,
		DependencyIndexes: file_diatheke_proto_depIdxs,
		EnumInfos:         file_diatheke_proto_enumTypes,
		MessageInfos:      file_diatheke_proto_msgTypes,
	}.Build()
	File_diatheke_proto = out.File
	file_diatheke_proto_rawDesc = nil
	file_diatheke_proto_goTypes = nil
	file_diatheke_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DiathekeClient is the client API for Diatheke service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DiathekeClient interface {
	// Queries the Version of the Server.
	Version(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*VersionResponse, error)
	// Models will return a list of available versions.  Model values from
	// this list may be used in NewSession calls.
	Models(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ModelsResponse, error)
	// Requests a new session with the given config and returns the session
	// ID, which is required for other rpc methods.
	NewSession(ctx context.Context, in *NewSessionRequest, opts ...grpc.CallOption) (*SessionID, error)
	// Terminates an existing session and closes any open session streams.
	// It is an error if the SessionEndRequest has an invalid SessionID.
	EndSession(ctx context.Context, in *SessionID, opts ...grpc.CallOption) (*Empty, error)
	// Requests a new event stream for the given session. Only one stream
	// per session is allowed.
	SessionEventStream(ctx context.Context, in *SessionID, opts ...grpc.CallOption) (Diatheke_SessionEventStreamClient, error)
	// Notify Diatheke when a command has completed so that it may update
	// the dialog state. The initial command request will come as part of
	// a DiathekeEvent. After sending a CommandEvent, Diatheke will wait
	// until it receives the CommandFinished notification before continuing
	// to the next action in the model. Client applications should therefore
	// always call this after receiving a CommandEvent, or else the session
	// will hang.
	CommandFinished(ctx context.Context, in *CommandStatus, opts ...grpc.CallOption) (*Empty, error)
	// Begin an audio input stream for a session. The first message to
	// the server should specify the sessionID, with binary audio data pushed
	// for every subsequent message. As the audio is recognized, Diatheke
	// will respond with appropriate events on the session's event stream.
	// <p>
	// Only one stream at a time is allowed for a session. A previously
	// created audio input stream must be closed before starting a new one.
	StreamAudioInput(ctx context.Context, opts ...grpc.CallOption) (Diatheke_StreamAudioInputClient, error)
	// Create an audio reply stream for a session. The returned stream
	// will receive replies (as defined in the Diatheke model) from the
	// server as they occur in the conversation. For each reply, the
	// stream will first receive the text to synthesize (defined by the model),
	// followed by one or more messages containing the synthesized audio bytes.
	// The reply will end with a message indicating that TTS for that
	// entry is complete. Only one reply stream at a time is allowed for a
	// session.
	// NOTE: The text in the first message of an audio reply is the same that
	//       will be received in the session's event stream.
	StreamAudioReplies(ctx context.Context, in *SessionID, opts ...grpc.CallOption) (Diatheke_StreamAudioRepliesClient, error)
	// Push text to Diatheke as part of the conversation for a session.
	// Diatheke will respond with an appropriate event on the session's
	// event stream based on whether the given text was recognized as a
	// valid intent or not.
	PushText(ctx context.Context, in *PushTextRequest, opts ...grpc.CallOption) (*Empty, error)
	// Manually run streaming ASR unrelated to any session by pushing
	// audio data to the server on the audio stream. As transcriptions
	// become available, the server will return them on the ASRResponse
	// stream. The transcriptions may then be used for, e.g., the PushText
	// method. This function is provided as a convenience.
	StreamASR(ctx context.Context, opts ...grpc.CallOption) (Diatheke_StreamASRClient, error)
	// Manually run streaming TTS. The Audio stream will receive
	// binary audio data as it is synthesized and will close automatically
	// when synthesis is complete. This function is provided as a
	// convenience.
	StreamTTS(ctx context.Context, in *TTSRequest, opts ...grpc.CallOption) (Diatheke_StreamTTSClient, error)
}

type diathekeClient struct {
	cc grpc.ClientConnInterface
}

func NewDiathekeClient(cc grpc.ClientConnInterface) DiathekeClient {
	return &diathekeClient{cc}
}

func (c *diathekeClient) Version(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, "/cobaltspeech.diatheke.Diatheke/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diathekeClient) Models(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ModelsResponse, error) {
	out := new(ModelsResponse)
	err := c.cc.Invoke(ctx, "/cobaltspeech.diatheke.Diatheke/Models", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diathekeClient) NewSession(ctx context.Context, in *NewSessionRequest, opts ...grpc.CallOption) (*SessionID, error) {
	out := new(SessionID)
	err := c.cc.Invoke(ctx, "/cobaltspeech.diatheke.Diatheke/NewSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diathekeClient) EndSession(ctx context.Context, in *SessionID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/cobaltspeech.diatheke.Diatheke/EndSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diathekeClient) SessionEventStream(ctx context.Context, in *SessionID, opts ...grpc.CallOption) (Diatheke_SessionEventStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Diatheke_serviceDesc.Streams[0], "/cobaltspeech.diatheke.Diatheke/SessionEventStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &diathekeSessionEventStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Diatheke_SessionEventStreamClient interface {
	Recv() (*DiathekeEvent, error)
	grpc.ClientStream
}

type diathekeSessionEventStreamClient struct {
	grpc.ClientStream
}

func (x *diathekeSessionEventStreamClient) Recv() (*DiathekeEvent, error) {
	m := new(DiathekeEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *diathekeClient) CommandFinished(ctx context.Context, in *CommandStatus, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/cobaltspeech.diatheke.Diatheke/CommandFinished", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diathekeClient) StreamAudioInput(ctx context.Context, opts ...grpc.CallOption) (Diatheke_StreamAudioInputClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Diatheke_serviceDesc.Streams[1], "/cobaltspeech.diatheke.Diatheke/StreamAudioInput", opts...)
	if err != nil {
		return nil, err
	}
	x := &diathekeStreamAudioInputClient{stream}
	return x, nil
}

type Diatheke_StreamAudioInputClient interface {
	Send(*AudioInput) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type diathekeStreamAudioInputClient struct {
	grpc.ClientStream
}

func (x *diathekeStreamAudioInputClient) Send(m *AudioInput) error {
	return x.ClientStream.SendMsg(m)
}

func (x *diathekeStreamAudioInputClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *diathekeClient) StreamAudioReplies(ctx context.Context, in *SessionID, opts ...grpc.CallOption) (Diatheke_StreamAudioRepliesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Diatheke_serviceDesc.Streams[2], "/cobaltspeech.diatheke.Diatheke/StreamAudioReplies", opts...)
	if err != nil {
		return nil, err
	}
	x := &diathekeStreamAudioRepliesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Diatheke_StreamAudioRepliesClient interface {
	Recv() (*AudioReply, error)
	grpc.ClientStream
}

type diathekeStreamAudioRepliesClient struct {
	grpc.ClientStream
}

func (x *diathekeStreamAudioRepliesClient) Recv() (*AudioReply, error) {
	m := new(AudioReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *diathekeClient) PushText(ctx context.Context, in *PushTextRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/cobaltspeech.diatheke.Diatheke/PushText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diathekeClient) StreamASR(ctx context.Context, opts ...grpc.CallOption) (Diatheke_StreamASRClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Diatheke_serviceDesc.Streams[3], "/cobaltspeech.diatheke.Diatheke/StreamASR", opts...)
	if err != nil {
		return nil, err
	}
	x := &diathekeStreamASRClient{stream}
	return x, nil
}

type Diatheke_StreamASRClient interface {
	Send(*ASRRequest) error
	Recv() (*ASRResponse, error)
	grpc.ClientStream
}

type diathekeStreamASRClient struct {
	grpc.ClientStream
}

func (x *diathekeStreamASRClient) Send(m *ASRRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *diathekeStreamASRClient) Recv() (*ASRResponse, error) {
	m := new(ASRResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *diathekeClient) StreamTTS(ctx context.Context, in *TTSRequest, opts ...grpc.CallOption) (Diatheke_StreamTTSClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Diatheke_serviceDesc.Streams[4], "/cobaltspeech.diatheke.Diatheke/StreamTTS", opts...)
	if err != nil {
		return nil, err
	}
	x := &diathekeStreamTTSClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Diatheke_StreamTTSClient interface {
	Recv() (*TTSResponse, error)
	grpc.ClientStream
}

type diathekeStreamTTSClient struct {
	grpc.ClientStream
}

func (x *diathekeStreamTTSClient) Recv() (*TTSResponse, error) {
	m := new(TTSResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DiathekeServer is the server API for Diatheke service.
type DiathekeServer interface {
	// Queries the Version of the Server.
	Version(context.Context, *Empty) (*VersionResponse, error)
	// Models will return a list of available versions.  Model values from
	// this list may be used in NewSession calls.
	Models(context.Context, *Empty) (*ModelsResponse, error)
	// Requests a new session with the given config and returns the session
	// ID, which is required for other rpc methods.
	NewSession(context.Context, *NewSessionRequest) (*SessionID, error)
	// Terminates an existing session and closes any open session streams.
	// It is an error if the SessionEndRequest has an invalid SessionID.
	EndSession(context.Context, *SessionID) (*Empty, error)
	// Requests a new event stream for the given session. Only one stream
	// per session is allowed.
	SessionEventStream(*SessionID, Diatheke_SessionEventStreamServer) error
	// Notify Diatheke when a command has completed so that it may update
	// the dialog state. The initial command request will come as part of
	// a DiathekeEvent. After sending a CommandEvent, Diatheke will wait
	// until it receives the CommandFinished notification before continuing
	// to the next action in the model. Client applications should therefore
	// always call this after receiving a CommandEvent, or else the session
	// will hang.
	CommandFinished(context.Context, *CommandStatus) (*Empty, error)
	// Begin an audio input stream for a session. The first message to
	// the server should specify the sessionID, with binary audio data pushed
	// for every subsequent message. As the audio is recognized, Diatheke
	// will respond with appropriate events on the session's event stream.
	// <p>
	// Only one stream at a time is allowed for a session. A previously
	// created audio input stream must be closed before starting a new one.
	StreamAudioInput(Diatheke_StreamAudioInputServer) error
	// Create an audio reply stream for a session. The returned stream
	// will receive replies (as defined in the Diatheke model) from the
	// server as they occur in the conversation. For each reply, the
	// stream will first receive the text to synthesize (defined by the model),
	// followed by one or more messages containing the synthesized audio bytes.
	// The reply will end with a message indicating that TTS for that
	// entry is complete. Only one reply stream at a time is allowed for a
	// session.
	// NOTE: The text in the first message of an audio reply is the same that
	//       will be received in the session's event stream.
	StreamAudioReplies(*SessionID, Diatheke_StreamAudioRepliesServer) error
	// Push text to Diatheke as part of the conversation for a session.
	// Diatheke will respond with an appropriate event on the session's
	// event stream based on whether the given text was recognized as a
	// valid intent or not.
	PushText(context.Context, *PushTextRequest) (*Empty, error)
	// Manually run streaming ASR unrelated to any session by pushing
	// audio data to the server on the audio stream. As transcriptions
	// become available, the server will return them on the ASRResponse
	// stream. The transcriptions may then be used for, e.g., the PushText
	// method. This function is provided as a convenience.
	StreamASR(Diatheke_StreamASRServer) error
	// Manually run streaming TTS. The Audio stream will receive
	// binary audio data as it is synthesized and will close automatically
	// when synthesis is complete. This function is provided as a
	// convenience.
	StreamTTS(*TTSRequest, Diatheke_StreamTTSServer) error
}

// UnimplementedDiathekeServer can be embedded to have forward compatible implementations.
type UnimplementedDiathekeServer struct {
}

func (*UnimplementedDiathekeServer) Version(context.Context, *Empty) (*VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (*UnimplementedDiathekeServer) Models(context.Context, *Empty) (*ModelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Models not implemented")
}
func (*UnimplementedDiathekeServer) NewSession(context.Context, *NewSessionRequest) (*SessionID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewSession not implemented")
}
func (*UnimplementedDiathekeServer) EndSession(context.Context, *SessionID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndSession not implemented")
}
func (*UnimplementedDiathekeServer) SessionEventStream(*SessionID, Diatheke_SessionEventStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SessionEventStream not implemented")
}
func (*UnimplementedDiathekeServer) CommandFinished(context.Context, *CommandStatus) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommandFinished not implemented")
}
func (*UnimplementedDiathekeServer) StreamAudioInput(Diatheke_StreamAudioInputServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamAudioInput not implemented")
}
func (*UnimplementedDiathekeServer) StreamAudioReplies(*SessionID, Diatheke_StreamAudioRepliesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamAudioReplies not implemented")
}
func (*UnimplementedDiathekeServer) PushText(context.Context, *PushTextRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushText not implemented")
}
func (*UnimplementedDiathekeServer) StreamASR(Diatheke_StreamASRServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamASR not implemented")
}
func (*UnimplementedDiathekeServer) StreamTTS(*TTSRequest, Diatheke_StreamTTSServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamTTS not implemented")
}

func RegisterDiathekeServer(s *grpc.Server, srv DiathekeServer) {
	s.RegisterService(&_Diatheke_serviceDesc, srv)
}

func _Diatheke_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiathekeServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cobaltspeech.diatheke.Diatheke/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiathekeServer).Version(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Diatheke_Models_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiathekeServer).Models(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cobaltspeech.diatheke.Diatheke/Models",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiathekeServer).Models(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Diatheke_NewSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiathekeServer).NewSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cobaltspeech.diatheke.Diatheke/NewSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiathekeServer).NewSession(ctx, req.(*NewSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Diatheke_EndSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiathekeServer).EndSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cobaltspeech.diatheke.Diatheke/EndSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiathekeServer).EndSession(ctx, req.(*SessionID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Diatheke_SessionEventStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SessionID)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DiathekeServer).SessionEventStream(m, &diathekeSessionEventStreamServer{stream})
}

type Diatheke_SessionEventStreamServer interface {
	Send(*DiathekeEvent) error
	grpc.ServerStream
}

type diathekeSessionEventStreamServer struct {
	grpc.ServerStream
}

func (x *diathekeSessionEventStreamServer) Send(m *DiathekeEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _Diatheke_CommandFinished_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiathekeServer).CommandFinished(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cobaltspeech.diatheke.Diatheke/CommandFinished",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiathekeServer).CommandFinished(ctx, req.(*CommandStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _Diatheke_StreamAudioInput_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DiathekeServer).StreamAudioInput(&diathekeStreamAudioInputServer{stream})
}

type Diatheke_StreamAudioInputServer interface {
	SendAndClose(*Empty) error
	Recv() (*AudioInput, error)
	grpc.ServerStream
}

type diathekeStreamAudioInputServer struct {
	grpc.ServerStream
}

func (x *diathekeStreamAudioInputServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *diathekeStreamAudioInputServer) Recv() (*AudioInput, error) {
	m := new(AudioInput)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Diatheke_StreamAudioReplies_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SessionID)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DiathekeServer).StreamAudioReplies(m, &diathekeStreamAudioRepliesServer{stream})
}

type Diatheke_StreamAudioRepliesServer interface {
	Send(*AudioReply) error
	grpc.ServerStream
}

type diathekeStreamAudioRepliesServer struct {
	grpc.ServerStream
}

func (x *diathekeStreamAudioRepliesServer) Send(m *AudioReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Diatheke_PushText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiathekeServer).PushText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cobaltspeech.diatheke.Diatheke/PushText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiathekeServer).PushText(ctx, req.(*PushTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Diatheke_StreamASR_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DiathekeServer).StreamASR(&diathekeStreamASRServer{stream})
}

type Diatheke_StreamASRServer interface {
	Send(*ASRResponse) error
	Recv() (*ASRRequest, error)
	grpc.ServerStream
}

type diathekeStreamASRServer struct {
	grpc.ServerStream
}

func (x *diathekeStreamASRServer) Send(m *ASRResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *diathekeStreamASRServer) Recv() (*ASRRequest, error) {
	m := new(ASRRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Diatheke_StreamTTS_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TTSRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DiathekeServer).StreamTTS(m, &diathekeStreamTTSServer{stream})
}

type Diatheke_StreamTTSServer interface {
	Send(*TTSResponse) error
	grpc.ServerStream
}

type diathekeStreamTTSServer struct {
	grpc.ServerStream
}

func (x *diathekeStreamTTSServer) Send(m *TTSResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Diatheke_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cobaltspeech.diatheke.Diatheke",
	HandlerType: (*DiathekeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _Diatheke_Version_Handler,
		},
		{
			MethodName: "Models",
			Handler:    _Diatheke_Models_Handler,
		},
		{
			MethodName: "NewSession",
			Handler:    _Diatheke_NewSession_Handler,
		},
		{
			MethodName: "EndSession",
			Handler:    _Diatheke_EndSession_Handler,
		},
		{
			MethodName: "CommandFinished",
			Handler:    _Diatheke_CommandFinished_Handler,
		},
		{
			MethodName: "PushText",
			Handler:    _Diatheke_PushText_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SessionEventStream",
			Handler:       _Diatheke_SessionEventStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamAudioInput",
			Handler:       _Diatheke_StreamAudioInput_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamAudioReplies",
			Handler:       _Diatheke_StreamAudioReplies_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamASR",
			Handler:       _Diatheke_StreamASR_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamTTS",
			Handler:       _Diatheke_StreamTTS_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "diatheke.proto",
}
