# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import diatheke_pb2 as diatheke__pb2


class DiathekeStub(object):
    """Service that implements the Cobalt Diatheke Dialog Management API.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Version = channel.unary_unary(
                '/cobaltspeech.diatheke.Diatheke/Version',
                request_serializer=diatheke__pb2.Empty.SerializeToString,
                response_deserializer=diatheke__pb2.VersionResponse.FromString,
                )
        self.ListModels = channel.unary_unary(
                '/cobaltspeech.diatheke.Diatheke/ListModels',
                request_serializer=diatheke__pb2.Empty.SerializeToString,
                response_deserializer=diatheke__pb2.ListModelsResponse.FromString,
                )
        self.CreateSession = channel.unary_unary(
                '/cobaltspeech.diatheke.Diatheke/CreateSession',
                request_serializer=diatheke__pb2.SessionStart.SerializeToString,
                response_deserializer=diatheke__pb2.SessionOutput.FromString,
                )
        self.DeleteSession = channel.unary_unary(
                '/cobaltspeech.diatheke.Diatheke/DeleteSession',
                request_serializer=diatheke__pb2.TokenData.SerializeToString,
                response_deserializer=diatheke__pb2.Empty.FromString,
                )
        self.UpdateSession = channel.unary_unary(
                '/cobaltspeech.diatheke.Diatheke/UpdateSession',
                request_serializer=diatheke__pb2.SessionInput.SerializeToString,
                response_deserializer=diatheke__pb2.SessionOutput.FromString,
                )
        self.StreamASR = channel.stream_unary(
                '/cobaltspeech.diatheke.Diatheke/StreamASR',
                request_serializer=diatheke__pb2.ASRInput.SerializeToString,
                response_deserializer=diatheke__pb2.ASRResult.FromString,
                )
        self.StreamTTS = channel.unary_stream(
                '/cobaltspeech.diatheke.Diatheke/StreamTTS',
                request_serializer=diatheke__pb2.ReplyAction.SerializeToString,
                response_deserializer=diatheke__pb2.TTSAudio.FromString,
                )
        self.Transcribe = channel.stream_stream(
                '/cobaltspeech.diatheke.Diatheke/Transcribe',
                request_serializer=diatheke__pb2.TranscribeInput.SerializeToString,
                response_deserializer=diatheke__pb2.TranscribeResult.FromString,
                )


class DiathekeServicer(object):
    """Service that implements the Cobalt Diatheke Dialog Management API.
    """

    def Version(self, request, context):
        """Returns version information from the server.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListModels(self, request, context):
        """ListModels returns information about the Diatheke models
        the server can access.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateSession(self, request, context):
        """Create a new Diatheke session. Also returns a list of
        actions to take next.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteSession(self, request, context):
        """Delete the session. Behavior is undefined if the given
        TokenData is used again after this function is called.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateSession(self, request, context):
        """Process input for a session and get an updated session with
        a list of actions to take next. This is the only method
        that modifies the Diatheke session state.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamASR(self, request_iterator, context):
        """Create an ASR stream. A result is returned when the
        stream is closed by the client (which forces the ASR to
        endpoint), or when a transcript becomes available on its
        own, in which case the stream is closed by the server.
        The ASR result may be used in the UpdateSession method.
        <br/><br/>
        If the session has a wakeword enabled, and the client
        application is using Diatheke and Cubic to handle the
        wakeword processing, this method will not return a
        result until the wakeword condition has been satisfied.
        Utterances without the required wakeword will be
        discarded and no transcription will be returned.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamTTS(self, request, context):
        """Create a TTS stream to receive audio for the given reply.
        The stream will close when TTS is finished. The client
        may also close the stream early to cancel the speech
        synthesis.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Transcribe(self, request_iterator, context):
        """Create an ASR stream for transcription. Unlike StreamASR,
        Transcribe does not listen for a wakeword. This method
        returns a bi-directional stream, and its intended use is
        for situations where a user may say anything at all, whether
        it is short or long, and the application wants to save the
        transcript (e.g., take a note, send a message).
        <br/><br/>
        The first message sent to the server must be the TranscribeAction,
        with remaining messages sending audio data.
        Messages received from the server will include the current
        best partial transcription until the full transcription is
        ready. The stream ends when either the client application
        closes it, a predefined duration of silence (non-speech)
        occurs, or the end-transcription intent is recognized.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DiathekeServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Version': grpc.unary_unary_rpc_method_handler(
                    servicer.Version,
                    request_deserializer=diatheke__pb2.Empty.FromString,
                    response_serializer=diatheke__pb2.VersionResponse.SerializeToString,
            ),
            'ListModels': grpc.unary_unary_rpc_method_handler(
                    servicer.ListModels,
                    request_deserializer=diatheke__pb2.Empty.FromString,
                    response_serializer=diatheke__pb2.ListModelsResponse.SerializeToString,
            ),
            'CreateSession': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateSession,
                    request_deserializer=diatheke__pb2.SessionStart.FromString,
                    response_serializer=diatheke__pb2.SessionOutput.SerializeToString,
            ),
            'DeleteSession': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteSession,
                    request_deserializer=diatheke__pb2.TokenData.FromString,
                    response_serializer=diatheke__pb2.Empty.SerializeToString,
            ),
            'UpdateSession': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateSession,
                    request_deserializer=diatheke__pb2.SessionInput.FromString,
                    response_serializer=diatheke__pb2.SessionOutput.SerializeToString,
            ),
            'StreamASR': grpc.stream_unary_rpc_method_handler(
                    servicer.StreamASR,
                    request_deserializer=diatheke__pb2.ASRInput.FromString,
                    response_serializer=diatheke__pb2.ASRResult.SerializeToString,
            ),
            'StreamTTS': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamTTS,
                    request_deserializer=diatheke__pb2.ReplyAction.FromString,
                    response_serializer=diatheke__pb2.TTSAudio.SerializeToString,
            ),
            'Transcribe': grpc.stream_stream_rpc_method_handler(
                    servicer.Transcribe,
                    request_deserializer=diatheke__pb2.TranscribeInput.FromString,
                    response_serializer=diatheke__pb2.TranscribeResult.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cobaltspeech.diatheke.Diatheke', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Diatheke(object):
    """Service that implements the Cobalt Diatheke Dialog Management API.
    """

    @staticmethod
    def Version(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cobaltspeech.diatheke.Diatheke/Version',
            diatheke__pb2.Empty.SerializeToString,
            diatheke__pb2.VersionResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListModels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cobaltspeech.diatheke.Diatheke/ListModels',
            diatheke__pb2.Empty.SerializeToString,
            diatheke__pb2.ListModelsResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cobaltspeech.diatheke.Diatheke/CreateSession',
            diatheke__pb2.SessionStart.SerializeToString,
            diatheke__pb2.SessionOutput.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cobaltspeech.diatheke.Diatheke/DeleteSession',
            diatheke__pb2.TokenData.SerializeToString,
            diatheke__pb2.Empty.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cobaltspeech.diatheke.Diatheke/UpdateSession',
            diatheke__pb2.SessionInput.SerializeToString,
            diatheke__pb2.SessionOutput.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamASR(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/cobaltspeech.diatheke.Diatheke/StreamASR',
            diatheke__pb2.ASRInput.SerializeToString,
            diatheke__pb2.ASRResult.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamTTS(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/cobaltspeech.diatheke.Diatheke/StreamTTS',
            diatheke__pb2.ReplyAction.SerializeToString,
            diatheke__pb2.TTSAudio.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Transcribe(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/cobaltspeech.diatheke.Diatheke/Transcribe',
            diatheke__pb2.TranscribeInput.SerializeToString,
            diatheke__pb2.TranscribeResult.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
