// Copyright (2021) Cobalt Speech and Language Inc.

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package cobaltspeech.diatheke;
option go_package = ".;diathekepb";
option java_package = "com.cobaltspeech.diatheke";


// Service that implements the Cobalt Diatheke Dialog Management API.
service Diatheke {
    // Returns version information from the server.
    rpc Version(Empty) returns (VersionResponse) {}

    // ListModels returns information about the Diatheke models
    // the server can access.
    rpc ListModels(Empty) returns (ListModelsResponse) {}

    // Create a new Diatheke session. Also returns a list of
    // actions to take next.
    rpc CreateSession(SessionStart) returns (SessionOutput) {}

    // Delete the session. Behavior is undefined if the given
    // TokenData is used again after this function is called.
    rpc DeleteSession(TokenData) returns (Empty) {}

    // Process input for a session and get an updated session with
    // a list of actions to take next. This is the only method
    // that modifies the Diatheke session state.
    rpc UpdateSession(SessionInput) returns (SessionOutput) {}

    // Create an ASR stream. A result is returned when the
    // stream is closed by the client (which forces the ASR to
    // endpoint), or when a transcript becomes available on its
    // own, in which case the stream is closed by the server.
    // The ASR result may be used in the UpdateSession method.
    //
    // If the session has a wakeword enabled, and the client
    // application is using Diatheke and Cubic to handle the
    // wakeword processing, this method will not return a
    // result until the wakeword condition has been satisfied.
    // Utterances without the required wakeword will be
    // discarded and no transcription will be returned.
    rpc StreamASR(stream ASRInput) returns (ASRResult) {}

    // Create a TTS stream to receive audio for the given reply.
    // The stream will close when TTS is finished. The client
    // may also close the stream early to cancel the speech
    // synthesis.
    rpc StreamTTS(ReplyAction) returns (stream TTSAudio) {}

    // Create an ASR stream for transcription. Unlike StreamASR,
    // Transcribe does not listen for a wakeword. This method
    // returns a bi-directional stream, and its intended use is
    // for situations where a user may say anything at all, whether
    // it is short or long, and the application wants to save the
    // transcript (e.g., take a note, send a message).
    //
    // The first message sent to the server must include the
    // Cubic model ID, with remaining messages sending audio data.
    // Messages received from the server will include the current
    // best partial transcription until the full transcription is
    // ready. The stream ends when either the client application
    // closes it, a predefined duration of silence (non-speech)
    // occurs, or the end-transcription intent is recognized.
    rpc Transcribe(stream TranscribeInput) returns (stream TranscribeResult) {}
}

// Lists the version of Diatheke and the engines it uses.
message VersionResponse {
    // Dialog management engine
    string diatheke = 1;

    // NLU engine
    string chosun = 2;

    // ASR engine
    string cubic = 3;

    // TTS engine
    string luna = 4;
}

// A list of models available on the Diatheke server.
message ListModelsResponse {
    repeated ModelInfo models = 1;
}

// Information about a single Diatheke model.
message ModelInfo {
    // Diatheke model ID, which is used to create a new session.
    string id = 1;

    // Pretty model name, which may be used for display purposes.
    string name = 2;

    // Language code of the model.
    string language = 3;

    // The ASR audio sample rate, if ASR is enabled.
    uint32 asr_sample_rate = 4;

    // The TTS audio sample rate, if TTS is enabled.
    uint32 tts_sample_rate = 5;
}

// Used by Diatheke to update the session state.
message SessionInput {
    // The session token.
    TokenData token = 1;

    oneof input {
        // Process the user supplied text.
        TextInput text = 2;

        // Process an ASR result.
        ASRResult asr = 3;

        // Process the result of a completed command.
        CommandResult cmd = 4;

        // Change the current session state.
        SetStory story = 5;
    }
}

// A token that represents a single Diatheke session and its
// current state.
message TokenData {
    bytes data = 1;

    // Session ID, useful for correlating logging between a
    // client and the server.
    string id = 2;

    // Additional data supplied by the client app, which will
    // be logged with other session info by the server.
    string metadata = 3;
}

// Used to create a new session.
message SessionStart {
    // Specifies the Diatheke model ID to use for the session.
    string model_id = 1;

    // Specifies a custom wakeword to use for this session. The
    // wakeword must be enabled in the Diatheke model for this
    // to have any effect. It will override the default wakeword
    // specified in the model.
    string wakeword = 2;
}

// User supplied text to send to Diatheke for processing.
message TextInput {
    string text = 1;
}

// The result of executing a command.
message CommandResult {
    // The command ID, as given by the CommandAction
    string id = 1;

    // Output from the command expected by the Diatheke model.
    // For example, this could be the result of a data query.
    map<string, string> out_parameters = 2;

    // If there was an error during execution, indicate it
    // here with a brief message that will be logged by
    // Diatheke.
    string error = 3;
}

// Changes the current state of a Diatheke session to run at
// the specified story.
message SetStory {
    // The ID of the story to run, as defined in the
    // Diatheke model.
    string story_id = 1;

    // A list of parameters to set before running the given
    // story. This will replace any parameters currently
    // defined in the session.
    map<string, string> parameters = 2;
}

// The result of updating a session.
message SessionOutput {
    // The updated session token.
    TokenData token = 1;

    // The list of actions the client should take next,
    // using the session token returned with this result.
    repeated ActionData action_list = 2;
}

// Specifies an action that the client application should take.
message ActionData {
    oneof action {
        // The user must provide input to Diatheke.
        WaitForUserAction input = 1;

        // The client app must execute the specified command.
        CommandAction command = 2;

        // The client app should provide the reply to the user.
        ReplyAction reply = 3;

        // The client app should transcribe user input.
        TranscribeAction transcribe = 4;
    }
}

// This action indicates that Diatheke is expecting user input.
message WaitForUserAction {
    // True if the next user input must begin with a wake-word.
    bool requires_wake_word = 1;

    // True if the input is required immediately (i.e., in
    // response to a question Diatheke asked the user). When
    // false, the client should be allowed to wait indefinitely
    // for the user to provide input.
    bool immediate = 2;
}

// This action indicates that the client application should
// execute a command.
message CommandAction {
    // The ID of the command to execute, as defined in the
    // Diatheke model.
    string id = 1;
    map<string, string> input_parameters = 2;
}

// This action indicates that the client application should
// give the provided text to the user. This action may also 
// be used to synthesize speech with the StreamTTS method.
message ReplyAction {
    // Text of the reply
    string text = 1;

    // TTS model to use with the TTSReply method
    string luna_model = 2;
}

// This action indicates that the client application should
// transcribe the user's input.
message TranscribeAction {
    // The ID of the transcribe action, which is useful to
    // differentiate separate transcription tasks within a
    // single sesssion.
    string id = 1;

    // The ASR model to use for transcription.
    string cubic_model_id = 2;

    // The Diatheke model where this transcribe action is
    // defined. If empty, the server will not be able to
    // automatically close the transcribe stream based on
    // conditions defined in the Diatheke model, such as
    // a non-speech timeout or an "end-transcription" intent.
    // When empty, the stream must be closed by the client
    // application.
    string diatheke_model_id = 3;
}

// Data to send to the ASR stream. The first message on the
// stream must be the session token followed by audio data.
message ASRInput {
    oneof data {
        // Session data, used to determine the correct Cubic
        // model to use for ASR, with other contextual
        // information.
        TokenData token = 1;

        // Audio data to transcribe.
        bytes audio = 2;
    }
}

// The result from the ASR stream, sent after the ASR engine
// has endpointed or the stream was closed by the client.
message ASRResult {
    // The transcription.
    string text = 1;

    // Confidence estimate between 0 and 1. A higher number
    // represents a higher likelihood of the output being 
    // correct.
    double confidence = 2;

    // True if a timeout was defined for the session's current
    // input state in the Diatheke model, and the timeout
    // expired before getting a transcription. This timeout
    // refers to the amount of time a user has to verbally
    // respond to Diatheke after the ASR stream has been
    // created, and should not be confused with a network
    // connection timeout.
    bool timedOut = 3;
}

// Contains synthesized speech audio. The specific encoding
// is defined in the server config file.
message TTSAudio {
    bytes audio = 1;
}

// Data to send to the Transcribe stream. The first message on
// the stream must be a TranscribeAction, followed by audio data.
message TranscribeInput {
    oneof data {
        // Action defining the transcribe configuration.
        TranscribeAction action = 1;

        // Audio data to transcribe.
        bytes audio = 2;
    }
}

// The result from the Transcribe stream. Usually, many partial
// (or intermediate) transcriptions will be sent until the final
// transcription is ready for every utterance processed.
message TranscribeResult {
    // The transcription.
    string text = 1;

    // Confidence estimate between 0 and 1. A higher number
    // represents a higher likelihood of the transcription
    // being correct.
    double confidence = 2;

    // True if this is a partial result, in which case the
    // text of the transcription for the current utterance
    // being processed is allowed to change in future results.
    // When false, this represents the final transcription for
    // an utterance, which will not change with further audio
    // input. It is sent when the ASR has endpointed. After the
    // final transcription is sent, any additional results sent
    // on the Transcribe stream belong to the next utterance.
    bool is_partial = 3;
}

message Empty {}
